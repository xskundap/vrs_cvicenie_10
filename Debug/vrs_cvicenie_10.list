
vrs_cvicenie_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005624  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  080057b8  080057b8  000157b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b2c  08005b2c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005b2c  08005b2c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b2c  08005b2c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b2c  08005b2c  00015b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b30  08005b30  00015b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000074  08005ba8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08005ba8  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008203  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a94  00000000  00000000  000282a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  00029d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000680  00000000  00000000  0002a488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017897  00000000  00000000  0002ab08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000602d  00000000  00000000  0004239f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076f96  00000000  00000000  000483cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bf362  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e8c  00000000  00000000  000bf3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800579c 	.word	0x0800579c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800579c 	.word	0x0800579c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db0b      	blt.n	8000bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f003 021f 	and.w	r2, r3, #31
 8000bb0:	4907      	ldr	r1, [pc, #28]	; (8000bd0 <__NVIC_EnableIRQ+0x38>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	095b      	lsrs	r3, r3, #5
 8000bb8:	2001      	movs	r0, #1
 8000bba:	fa00 f202 	lsl.w	r2, r0, r2
 8000bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000e100 	.word	0xe000e100

08000bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	db0a      	blt.n	8000bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	490c      	ldr	r1, [pc, #48]	; (8000c20 <__NVIC_SetPriority+0x4c>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	0112      	lsls	r2, r2, #4
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bfc:	e00a      	b.n	8000c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4908      	ldr	r1, [pc, #32]	; (8000c24 <__NVIC_SetPriority+0x50>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	3b04      	subs	r3, #4
 8000c0c:	0112      	lsls	r2, r2, #4
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	440b      	add	r3, r1
 8000c12:	761a      	strb	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	; 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f1c3 0307 	rsb	r3, r3, #7
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	bf28      	it	cs
 8000c46:	2304      	movcs	r3, #4
 8000c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d902      	bls.n	8000c58 <NVIC_EncodePriority+0x30>
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3b03      	subs	r3, #3
 8000c56:	e000      	b.n	8000c5a <NVIC_EncodePriority+0x32>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43da      	mvns	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	43d9      	mvns	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	4313      	orrs	r3, r2
         );
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3724      	adds	r7, #36	; 0x24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c9a:	695a      	ldr	r2, [r3, #20]
 8000c9c:	4907      	ldr	r1, [pc, #28]	; (8000cbc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ca6:	695a      	ldr	r2, [r3, #20]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4013      	ands	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cae:	68fb      	ldr	r3, [r7, #12]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f7ff ffe3 	bl	8000c90 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000cca:	f7ff ff57 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ffa7 	bl	8000c28 <NVIC_EncodePriority>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4619      	mov	r1, r3
 8000cde:	2010      	movs	r0, #16
 8000ce0:	f7ff ff78 	bl	8000bd4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000ce4:	2010      	movs	r0, #16
 8000ce6:	f7ff ff57 	bl	8000b98 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000cea:	f7ff ff47 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff97 	bl	8000c28 <NVIC_EncodePriority>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	2011      	movs	r0, #17
 8000d00:	f7ff ff68 	bl	8000bd4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000d04:	2011      	movs	r0, #17
 8000d06:	f7ff ff47 	bl	8000b98 <__NVIC_EnableIRQ>

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <LL_AHB1_GRP1_EnableClock>:
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d1a:	695a      	ldr	r2, [r3, #20]
 8000d1c:	4907      	ldr	r1, [pc, #28]	; (8000d3c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d26:	695a      	ldr	r2, [r3, #20]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	40021000 	.word	0x40021000

08000d40 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	683a      	ldr	r2, [r7, #0]
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d62:	463b      	mov	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
 8000d70:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d72:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d76:	f7ff ffcb 	bl	8000d10 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000d7a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000d7e:	f7ff ffc7 	bl	8000d10 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 8000d82:	2108      	movs	r1, #8
 8000d84:	480a      	ldr	r0, [pc, #40]	; (8000db0 <MX_GPIO_Init+0x54>)
 8000d86:	f7ff ffdb 	bl	8000d40 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000d8a:	2308      	movs	r3, #8
 8000d8c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	463b      	mov	r3, r7
 8000da0:	4619      	mov	r1, r3
 8000da2:	4803      	ldr	r0, [pc, #12]	; (8000db0 <MX_GPIO_Init+0x54>)
 8000da4:	f001 fc4a 	bl	800263c <LL_GPIO_Init>
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
*/
}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	48000400 	.word	0x48000400

08000db4 <__NVIC_SetPriorityGrouping>:
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de6:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	60d3      	str	r3, [r2, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_GetPriorityGrouping>:
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <__NVIC_GetPriorityGrouping+0x18>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	f003 0307 	and.w	r3, r3, #7
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_SetPriority>:
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	; (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	; (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <LL_RCC_HSI_Enable+0x1c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <LL_RCC_HSI_Enable+0x1c>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <LL_RCC_HSI_IsReady+0x20>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	bf0c      	ite	eq
 8000f04:	2301      	moveq	r3, #1
 8000f06:	2300      	movne	r3, #0
 8000f08:	b2db      	uxtb	r3, r3
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	40021000 	.word	0x40021000

08000f18 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	4904      	ldr	r1, [pc, #16]	; (8000f40 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	600b      	str	r3, [r1, #0]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000

08000f44 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <LL_RCC_SetSysClkSource+0x24>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f023 0203 	bic.w	r2, r3, #3
 8000f54:	4904      	ldr	r1, [pc, #16]	; (8000f68 <LL_RCC_SetSysClkSource+0x24>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	604b      	str	r3, [r1, #4]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	40021000 	.word	0x40021000

08000f6c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <LL_RCC_GetSysClkSource+0x18>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 030c 	and.w	r3, r3, #12
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000

08000f88 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <LL_RCC_SetAHBPrescaler+0x24>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f98:	4904      	ldr	r1, [pc, #16]	; (8000fac <LL_RCC_SetAHBPrescaler+0x24>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	604b      	str	r3, [r1, #4]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	40021000 	.word	0x40021000

08000fb0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000fc0:	4904      	ldr	r1, [pc, #16]	; (8000fd4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	604b      	str	r3, [r1, #4]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <LL_RCC_SetAPB2Prescaler+0x24>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000fe8:	4904      	ldr	r1, [pc, #16]	; (8000ffc <LL_RCC_SetAPB2Prescaler+0x24>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	604b      	str	r3, [r1, #4]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	40021000 	.word	0x40021000

08001000 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <LL_APB1_GRP1_EnableClock+0x2c>)
 800100a:	69da      	ldr	r2, [r3, #28]
 800100c:	4907      	ldr	r1, [pc, #28]	; (800102c <LL_APB1_GRP1_EnableClock+0x2c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4313      	orrs	r3, r2
 8001012:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001016:	69da      	ldr	r2, [r3, #28]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4013      	ands	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40021000 	.word	0x40021000

08001030 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <LL_APB2_GRP1_EnableClock+0x2c>)
 800103a:	699a      	ldr	r2, [r3, #24]
 800103c:	4907      	ldr	r1, [pc, #28]	; (800105c <LL_APB2_GRP1_EnableClock+0x2c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4313      	orrs	r3, r2
 8001042:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001046:	699a      	ldr	r2, [r3, #24]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4013      	ands	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800104e:	68fb      	ldr	r3, [r7, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	40021000 	.word	0x40021000

08001060 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <LL_FLASH_SetLatency+0x24>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f023 0207 	bic.w	r2, r3, #7
 8001070:	4904      	ldr	r1, [pc, #16]	; (8001084 <LL_FLASH_SetLatency+0x24>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4313      	orrs	r3, r2
 8001076:	600b      	str	r3, [r1, #0]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	40022000 	.word	0x40022000

08001088 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <LL_FLASH_GetLatency+0x18>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0307 	and.w	r3, r3, #7
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40022000 	.word	0x40022000

080010a4 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	d106      	bne.n	80010c0 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <LL_SYSTICK_SetClkSource+0x34>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <LL_SYSTICK_SetClkSource+0x34>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80010be:	e005      	b.n	80010cc <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <LL_SYSTICK_SetClkSource+0x34>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <LL_SYSTICK_SetClkSource+0x34>)
 80010c6:	f023 0304 	bic.w	r3, r3, #4
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000e010 	.word	0xe000e010

080010dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f7ff ffa5 	bl	8001030 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80010e6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80010ea:	f7ff ff89 	bl	8001000 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ee:	2003      	movs	r0, #3
 80010f0:	f7ff fe60 	bl	8000db4 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80010f4:	f7ff fe82 	bl	8000dfc <__NVIC_GetPriorityGrouping>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2200      	movs	r2, #0
 80010fc:	210f      	movs	r1, #15
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff feb4 	bl	8000e6c <NVIC_EncodePriority>
 8001104:	4603      	mov	r3, r0
 8001106:	4619      	mov	r1, r3
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f7ff fe84 	bl	8000e18 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001110:	f000 f954 	bl	80013bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001114:	f7ff fe22 	bl	8000d5c <MX_GPIO_Init>
  MX_DMA_Init();
 8001118:	f7ff fdd2 	bl	8000cc0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800111c:	f000 ffe0 	bl	80020e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  USART2_RegisterCallback(proccesDmaData);
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <main+0x58>)
 8001122:	f000 ffcb 	bl	80020bc <USART2_RegisterCallback>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  print();
 8001126:	f000 f807 	bl	8001138 <print>
	  LL_mDelay(5000);
 800112a:	f241 3088 	movw	r0, #5000	; 0x1388
 800112e:	f001 fda1 	bl	8002c74 <LL_mDelay>
	  print();
 8001132:	e7f8      	b.n	8001126 <main+0x4a>
 8001134:	08001429 	.word	0x08001429

08001138 <print>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void print(){
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	b0a4      	sub	sp, #144	; 0x90
 800113c:	af00      	add	r7, sp, #0
	uint8_t s1[] = "Buffer capacity: ";
 800113e:	4b8f      	ldr	r3, [pc, #572]	; (800137c <print+0x244>)
 8001140:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8001144:	461d      	mov	r5, r3
 8001146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114a:	682b      	ldr	r3, [r5, #0]
 800114c:	8023      	strh	r3, [r4, #0]
	uint8_t s2[] = "bytes, occupied memory: ";
 800114e:	4b8c      	ldr	r3, [pc, #560]	; (8001380 <print+0x248>)
 8001150:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001154:	461d      	mov	r5, r3
 8001156:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800115a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800115e:	c403      	stmia	r4!, {r0, r1}
 8001160:	7022      	strb	r2, [r4, #0]
	uint8_t s3[] = "bytes, load [in %]: ";
 8001162:	4b88      	ldr	r3, [pc, #544]	; (8001384 <print+0x24c>)
 8001164:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001168:	461d      	mov	r5, r3
 800116a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800116c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800116e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001172:	6020      	str	r0, [r4, #0]
 8001174:	3404      	adds	r4, #4
 8001176:	7021      	strb	r1, [r4, #0]
	uint8_t s4[] = "%\n\r";
 8001178:	4b83      	ldr	r3, [pc, #524]	; (8001388 <print+0x250>)
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t s5[] = "Pocet malych pismen: ";
 800117c:	4b83      	ldr	r3, [pc, #524]	; (800138c <print+0x254>)
 800117e:	f107 041c 	add.w	r4, r7, #28
 8001182:	461d      	mov	r5, r3
 8001184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001188:	e895 0003 	ldmia.w	r5, {r0, r1}
 800118c:	6020      	str	r0, [r4, #0]
 800118e:	3404      	adds	r4, #4
 8001190:	8021      	strh	r1, [r4, #0]
	uint8_t s6[] = "	Pocet velkych pismen: ";
 8001192:	4b7f      	ldr	r3, [pc, #508]	; (8001390 <print+0x258>)
 8001194:	1d3c      	adds	r4, r7, #4
 8001196:	461d      	mov	r5, r3
 8001198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011a0:	e884 0003 	stmia.w	r4, {r0, r1}
	uint8_t s7[] = "\n\r";
 80011a4:	4a7b      	ldr	r2, [pc, #492]	; (8001394 <print+0x25c>)
 80011a6:	463b      	mov	r3, r7
 80011a8:	6812      	ldr	r2, [r2, #0]
 80011aa:	4611      	mov	r1, r2
 80011ac:	8019      	strh	r1, [r3, #0]
 80011ae:	3302      	adds	r3, #2
 80011b0:	0c12      	lsrs	r2, r2, #16
 80011b2:	701a      	strb	r2, [r3, #0]
	uint16_t buffer_size =  DMA_USART2_BUFFER_SIZE;
 80011b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	float pom_occupiedMem = occupiedMem;
 80011bc:	4b76      	ldr	r3, [pc, #472]	; (8001398 <print+0x260>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	ee07 3a90 	vmov	s15, r3
 80011c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011c8:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float pom_buffer_size = buffer_size;
 80011cc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011d0:	ee07 3a90 	vmov	s15, r3
 80011d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011d8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float percento = (pom_occupiedMem/pom_buffer_size)*100.0;
 80011dc:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80011e0:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80011e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011e8:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800139c <print+0x264>
 80011ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80

	sprintf(buffer, "%d", buffer_size);
 80011f4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011f8:	461a      	mov	r2, r3
 80011fa:	4969      	ldr	r1, [pc, #420]	; (80013a0 <print+0x268>)
 80011fc:	4869      	ldr	r0, [pc, #420]	; (80013a4 <print+0x26c>)
 80011fe:	f001 fdc5 	bl	8002d8c <siprintf>
	strcat(s1, buffer);
 8001202:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001206:	4967      	ldr	r1, [pc, #412]	; (80013a4 <print+0x26c>)
 8001208:	4618      	mov	r0, r3
 800120a:	f001 fddf 	bl	8002dcc <strcat>

	USART2_PutBuffer(s1, strlen(s1));
 800120e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001212:	4618      	mov	r0, r3
 8001214:	f7fe ffdc 	bl	80001d0 <strlen>
 8001218:	4603      	mov	r3, r0
 800121a:	b2da      	uxtb	r2, r3
 800121c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f001 f844 	bl	80022b0 <USART2_PutBuffer>
	LL_mDelay(50);
 8001228:	2032      	movs	r0, #50	; 0x32
 800122a:	f001 fd23 	bl	8002c74 <LL_mDelay>

	sprintf(memory, "%d", occupiedMem);
 800122e:	4b5a      	ldr	r3, [pc, #360]	; (8001398 <print+0x260>)
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	495a      	ldr	r1, [pc, #360]	; (80013a0 <print+0x268>)
 8001236:	485c      	ldr	r0, [pc, #368]	; (80013a8 <print+0x270>)
 8001238:	f001 fda8 	bl	8002d8c <siprintf>
	strcat(s2, memory);
 800123c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001240:	4959      	ldr	r1, [pc, #356]	; (80013a8 <print+0x270>)
 8001242:	4618      	mov	r0, r3
 8001244:	f001 fdc2 	bl	8002dcc <strcat>

	USART2_PutBuffer(s2, strlen(s2));
 8001248:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800124c:	4618      	mov	r0, r3
 800124e:	f7fe ffbf 	bl	80001d0 <strlen>
 8001252:	4603      	mov	r3, r0
 8001254:	b2da      	uxtb	r2, r3
 8001256:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f001 f827 	bl	80022b0 <USART2_PutBuffer>
	LL_mDelay(50);
 8001262:	2032      	movs	r0, #50	; 0x32
 8001264:	f001 fd06 	bl	8002c74 <LL_mDelay>

	gcvt(percento, 6, load);
 8001268:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800126c:	f7ff f96c 	bl	8000548 <__aeabi_f2d>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	494d      	ldr	r1, [pc, #308]	; (80013ac <print+0x274>)
 8001276:	2006      	movs	r0, #6
 8001278:	ec43 2b10 	vmov	d0, r2, r3
 800127c:	f001 fd30 	bl	8002ce0 <gcvt>
	strcat(s3, load);
 8001280:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001284:	4949      	ldr	r1, [pc, #292]	; (80013ac <print+0x274>)
 8001286:	4618      	mov	r0, r3
 8001288:	f001 fda0 	bl	8002dcc <strcat>

	USART2_PutBuffer(s3, strlen(s3));
 800128c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001290:	4618      	mov	r0, r3
 8001292:	f7fe ff9d 	bl	80001d0 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	b2da      	uxtb	r2, r3
 800129a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f001 f805 	bl	80022b0 <USART2_PutBuffer>
	LL_mDelay(50);
 80012a6:	2032      	movs	r0, #50	; 0x32
 80012a8:	f001 fce4 	bl	8002c74 <LL_mDelay>

	USART2_PutBuffer(s4, strlen(s4));
 80012ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7fe ff8d 	bl	80001d0 <strlen>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 fff5 	bl	80022b0 <USART2_PutBuffer>
	LL_mDelay(50);
 80012c6:	2032      	movs	r0, #50	; 0x32
 80012c8:	f001 fcd4 	bl	8002c74 <LL_mDelay>

	sprintf(male_pismena, "%d", letters.small_letter);
 80012cc:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <print+0x278>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4933      	ldr	r1, [pc, #204]	; (80013a0 <print+0x268>)
 80012d4:	4837      	ldr	r0, [pc, #220]	; (80013b4 <print+0x27c>)
 80012d6:	f001 fd59 	bl	8002d8c <siprintf>
	strcat(s5, male_pismena);
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	4935      	ldr	r1, [pc, #212]	; (80013b4 <print+0x27c>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f001 fd73 	bl	8002dcc <strcat>

	USART2_PutBuffer(s5, strlen(s5));
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7fe ff70 	bl	80001d0 <strlen>
 80012f0:	4603      	mov	r3, r0
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4611      	mov	r1, r2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 ffd8 	bl	80022b0 <USART2_PutBuffer>
	LL_mDelay(50);
 8001300:	2032      	movs	r0, #50	; 0x32
 8001302:	f001 fcb7 	bl	8002c74 <LL_mDelay>

	sprintf(velke_pismena, "%d", letters.capital_letter);
 8001306:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <print+0x278>)
 8001308:	785b      	ldrb	r3, [r3, #1]
 800130a:	461a      	mov	r2, r3
 800130c:	4924      	ldr	r1, [pc, #144]	; (80013a0 <print+0x268>)
 800130e:	482a      	ldr	r0, [pc, #168]	; (80013b8 <print+0x280>)
 8001310:	f001 fd3c 	bl	8002d8c <siprintf>
	strcat(s6, velke_pismena);
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	4928      	ldr	r1, [pc, #160]	; (80013b8 <print+0x280>)
 8001318:	4618      	mov	r0, r3
 800131a:	f001 fd57 	bl	8002dcc <strcat>

	USART2_PutBuffer(s6, strlen(s6));
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4618      	mov	r0, r3
 8001322:	f7fe ff55 	bl	80001d0 <strlen>
 8001326:	4603      	mov	r3, r0
 8001328:	b2da      	uxtb	r2, r3
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f000 ffbe 	bl	80022b0 <USART2_PutBuffer>
	LL_mDelay(50);
 8001334:	2032      	movs	r0, #50	; 0x32
 8001336:	f001 fc9d 	bl	8002c74 <LL_mDelay>

	USART2_PutBuffer(s7, strlen(s7));
 800133a:	463b      	mov	r3, r7
 800133c:	4618      	mov	r0, r3
 800133e:	f7fe ff47 	bl	80001d0 <strlen>
 8001342:	4603      	mov	r3, r0
 8001344:	b2da      	uxtb	r2, r3
 8001346:	463b      	mov	r3, r7
 8001348:	4611      	mov	r1, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f000 ffb0 	bl	80022b0 <USART2_PutBuffer>
	LL_mDelay(50);
 8001350:	2032      	movs	r0, #50	; 0x32
 8001352:	f001 fc8f 	bl	8002c74 <LL_mDelay>
	USART2_PutBuffer(s7, strlen(s7));
 8001356:	463b      	mov	r3, r7
 8001358:	4618      	mov	r0, r3
 800135a:	f7fe ff39 	bl	80001d0 <strlen>
 800135e:	4603      	mov	r3, r0
 8001360:	b2da      	uxtb	r2, r3
 8001362:	463b      	mov	r3, r7
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f000 ffa2 	bl	80022b0 <USART2_PutBuffer>
	LL_mDelay(50);
 800136c:	2032      	movs	r0, #50	; 0x32
 800136e:	f001 fc81 	bl	8002c74 <LL_mDelay>
}
 8001372:	bf00      	nop
 8001374:	3790      	adds	r7, #144	; 0x90
 8001376:	46bd      	mov	sp, r7
 8001378:	bdb0      	pop	{r4, r5, r7, pc}
 800137a:	bf00      	nop
 800137c:	080057bc 	.word	0x080057bc
 8001380:	080057d0 	.word	0x080057d0
 8001384:	080057ec 	.word	0x080057ec
 8001388:	000d0a25 	.word	0x000d0a25
 800138c:	08005804 	.word	0x08005804
 8001390:	0800581c 	.word	0x0800581c
 8001394:	08005834 	.word	0x08005834
 8001398:	200000d2 	.word	0x200000d2
 800139c:	42c80000 	.word	0x42c80000
 80013a0:	080057b8 	.word	0x080057b8
 80013a4:	200000d8 	.word	0x200000d8
 80013a8:	200000cc 	.word	0x200000cc
 80013ac:	200000e8 	.word	0x200000e8
 80013b0:	200000d0 	.word	0x200000d0
 80013b4:	200000b4 	.word	0x200000b4
 80013b8:	200000d4 	.word	0x200000d4

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff fe4d 	bl	8001060 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80013c6:	bf00      	nop
 80013c8:	f7ff fe5e 	bl	8001088 <LL_FLASH_GetLatency>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1fa      	bne.n	80013c8 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80013d2:	f7ff fd7f 	bl	8000ed4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80013d6:	bf00      	nop
 80013d8:	f7ff fd8c 	bl	8000ef4 <LL_RCC_HSI_IsReady>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d1fa      	bne.n	80013d8 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80013e2:	2010      	movs	r0, #16
 80013e4:	f7ff fd98 	bl	8000f18 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff fdcd 	bl	8000f88 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f7ff fdde 	bl	8000fb0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80013f4:	2000      	movs	r0, #0
 80013f6:	f7ff fdef 	bl	8000fd8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f7ff fda2 	bl	8000f44 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001400:	bf00      	nop
 8001402:	f7ff fdb3 	bl	8000f6c <LL_RCC_GetSysClkSource>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1fa      	bne.n	8001402 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <SystemClock_Config+0x68>)
 800140e:	f001 fc23 	bl	8002c58 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001412:	2004      	movs	r0, #4
 8001414:	f7ff fe46 	bl	80010a4 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <SystemClock_Config+0x68>)
 800141a:	f001 fc51 	bl	8002cc0 <LL_SetSystemCoreClock>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	007a1200 	.word	0x007a1200

08001428 <proccesDmaData>:

/* USER CODE BEGIN 4 */
void proccesDmaData(const uint8_t* sign, uint16_t len)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	807b      	strh	r3, [r7, #2]
	/* Process received data */

	uint8_t pom = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	75fb      	strb	r3, [r7, #23]
	int count;
	int count_1 = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
		// type your algorithm here:

	while(pom < len){
 800143c:	e080      	b.n	8001540 <proccesDmaData+0x118>
	uint8_t akt = *(sign+pom);
 800143e:	7dfb      	ldrb	r3, [r7, #23]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	72fb      	strb	r3, [r7, #11]
		if(*(sign+pom) == '$'){
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b24      	cmp	r3, #36	; 0x24
 8001452:	d128      	bne.n	80014a6 <proccesDmaData+0x7e>
			++dollar;
 8001454:	4b41      	ldr	r3, [pc, #260]	; (800155c <proccesDmaData+0x134>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	4a40      	ldr	r2, [pc, #256]	; (800155c <proccesDmaData+0x134>)
 800145c:	6013      	str	r3, [r2, #0]
			start = 1;
 800145e:	4b40      	ldr	r3, [pc, #256]	; (8001560 <proccesDmaData+0x138>)
 8001460:	2201      	movs	r2, #1
 8001462:	601a      	str	r2, [r3, #0]
			male = 0;
 8001464:	4b3f      	ldr	r3, [pc, #252]	; (8001564 <proccesDmaData+0x13c>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
			count = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
			velke = 0;
 800146e:	4b3e      	ldr	r3, [pc, #248]	; (8001568 <proccesDmaData+0x140>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

			if(dollar >= 2){
 8001474:	4b39      	ldr	r3, [pc, #228]	; (800155c <proccesDmaData+0x134>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b01      	cmp	r3, #1
 800147a:	dd14      	ble.n	80014a6 <proccesDmaData+0x7e>
				start = 0;
 800147c:	4b38      	ldr	r3, [pc, #224]	; (8001560 <proccesDmaData+0x138>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]

				letters.capital_letter = letters.capital_letter + velke;
 8001482:	4b3a      	ldr	r3, [pc, #232]	; (800156c <proccesDmaData+0x144>)
 8001484:	785a      	ldrb	r2, [r3, #1]
 8001486:	4b38      	ldr	r3, [pc, #224]	; (8001568 <proccesDmaData+0x140>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	4413      	add	r3, r2
 800148e:	b2da      	uxtb	r2, r3
 8001490:	4b36      	ldr	r3, [pc, #216]	; (800156c <proccesDmaData+0x144>)
 8001492:	705a      	strb	r2, [r3, #1]
				letters.small_letter = letters.small_letter + male;
 8001494:	4b35      	ldr	r3, [pc, #212]	; (800156c <proccesDmaData+0x144>)
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	4b32      	ldr	r3, [pc, #200]	; (8001564 <proccesDmaData+0x13c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	4413      	add	r3, r2
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b32      	ldr	r3, [pc, #200]	; (800156c <proccesDmaData+0x144>)
 80014a4:	701a      	strb	r2, [r3, #0]

				dollar == 0;
			}
		}

		if(start == 1){
 80014a6:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <proccesDmaData+0x138>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d131      	bne.n	8001512 <proccesDmaData+0xea>
			}
			if(*(sign+pom) >= 'A' && *(sign+pom) <= 'Z'){
				velke = velke + 1;
			}
			*/
			if(*(sign+pom) == state_manual[count_1]){
 80014ae:	7dfb      	ldrb	r3, [r7, #23]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	4413      	add	r3, r2
 80014b4:	781a      	ldrb	r2, [r3, #0]
 80014b6:	492e      	ldr	r1, [pc, #184]	; (8001570 <proccesDmaData+0x148>)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	440b      	add	r3, r1
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d108      	bne.n	80014d4 <proccesDmaData+0xac>
				count_1++;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3301      	adds	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
				if(count_1 == 6){		//manual
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d11e      	bne.n	800150c <proccesDmaData+0xe4>


					count_1 = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	e01b      	b.n	800150c <proccesDmaData+0xe4>
				}
			}

			else if((*(sign+pom) != state_manual[count_1]) && (*(sign+pom) == state_auto[count_1])){
 80014d4:	7dfb      	ldrb	r3, [r7, #23]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	781a      	ldrb	r2, [r3, #0]
 80014dc:	4924      	ldr	r1, [pc, #144]	; (8001570 <proccesDmaData+0x148>)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	440b      	add	r3, r1
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d011      	beq.n	800150c <proccesDmaData+0xe4>
 80014e8:	7dfb      	ldrb	r3, [r7, #23]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	4920      	ldr	r1, [pc, #128]	; (8001574 <proccesDmaData+0x14c>)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	440b      	add	r3, r1
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d107      	bne.n	800150c <proccesDmaData+0xe4>
				count_1++;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	3301      	adds	r3, #1
 8001500:	60fb      	str	r3, [r7, #12]
				if(count_1 == 4){		//auto
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2b04      	cmp	r3, #4
 8001506:	d101      	bne.n	800150c <proccesDmaData+0xe4>


				count_1 = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
				}
			}

			count++;
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	3301      	adds	r3, #1
 8001510:	613b      	str	r3, [r7, #16]
			letters.capital_letter = letters.capital_letter + velke;
			letters.small_letter = letters.small_letter + male;

		}
*/
		if(count == 35 && *(sign+pom) != '$'){
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	2b23      	cmp	r3, #35	; 0x23
 8001516:	d110      	bne.n	800153a <proccesDmaData+0x112>
 8001518:	7dfb      	ldrb	r3, [r7, #23]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b24      	cmp	r3, #36	; 0x24
 8001522:	d00a      	beq.n	800153a <proccesDmaData+0x112>
			start = 0;
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <proccesDmaData+0x138>)
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
			male = 0;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <proccesDmaData+0x13c>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
			count = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	613b      	str	r3, [r7, #16]
			velke = 0;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <proccesDmaData+0x140>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
		}
		pom++;
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	3301      	adds	r3, #1
 800153e:	75fb      	strb	r3, [r7, #23]
	while(pom < len){
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	b29b      	uxth	r3, r3
 8001544:	887a      	ldrh	r2, [r7, #2]
 8001546:	429a      	cmp	r2, r3
 8001548:	f63f af79 	bhi.w	800143e <proccesDmaData+0x16>
	}
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	2000009c 	.word	0x2000009c
 8001560:	20000098 	.word	0x20000098
 8001564:	20000090 	.word	0x20000090
 8001568:	20000094 	.word	0x20000094
 800156c:	200000d0 	.word	0x200000d0
 8001570:	20000000 	.word	0x20000000
 8001574:	20000008 	.word	0x20000008

08001578 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	3b01      	subs	r3, #1
 8001586:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <LL_DMA_DisableChannel+0x3c>)
 8001588:	5cd3      	ldrb	r3, [r2, r3]
 800158a:	461a      	mov	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4413      	add	r3, r2
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	3a01      	subs	r2, #1
 8001596:	4907      	ldr	r1, [pc, #28]	; (80015b4 <LL_DMA_DisableChannel+0x3c>)
 8001598:	5c8a      	ldrb	r2, [r1, r2]
 800159a:	4611      	mov	r1, r2
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	440a      	add	r2, r1
 80015a0:	f023 0301 	bic.w	r3, r3, #1
 80015a4:	6013      	str	r3, [r2, #0]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	08005838 	.word	0x08005838

080015b8 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80015cc:	bf0c      	ite	eq
 80015ce:	2301      	moveq	r3, #1
 80015d0:	2300      	movne	r3, #0
 80015d2:	b2db      	uxtb	r3, r3
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015f4:	bf0c      	ite	eq
 80015f6:	2301      	moveq	r3, #1
 80015f8:	2300      	movne	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001618:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800161c:	bf0c      	ite	eq
 800161e:	2301      	moveq	r3, #1
 8001620:	2300      	movne	r3, #0
 8001622:	b2db      	uxtb	r3, r3
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800163e:	605a      	str	r2, [r3, #4]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800165a:	605a      	str	r2, [r3, #4]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001676:	605a      	str	r2, [r3, #4]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	2b10      	cmp	r3, #16
 8001696:	d101      	bne.n	800169c <LL_USART_IsActiveFlag_IDLE+0x18>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <LL_USART_IsActiveFlag_IDLE+0x1a>
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ba:	2b40      	cmp	r3, #64	; 0x40
 80016bc:	d101      	bne.n	80016c2 <LL_USART_IsActiveFlag_TC+0x18>
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <LL_USART_IsActiveFlag_TC+0x1a>
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2210      	movs	r2, #16
 80016dc:	621a      	str	r2, [r3, #32]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <NMI_Handler+0x4>

080016f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <HardFault_Handler+0x4>

080016f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <MemManage_Handler+0x4>

080016fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <BusFault_Handler+0x4>

08001702 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <UsageFault_Handler+0x4>

08001708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8001744:	480c      	ldr	r0, [pc, #48]	; (8001778 <DMA1_Channel6_IRQHandler+0x38>)
 8001746:	f7ff ff37 	bl	80015b8 <LL_DMA_IsActiveFlag_TC6>
 800174a:	4603      	mov	r3, r0
 800174c:	2b01      	cmp	r3, #1
 800174e:	d105      	bne.n	800175c <DMA1_Channel6_IRQHandler+0x1c>
	{
			USART2_CheckDmaReception();
 8001750:	f000 fdce 	bl	80022f0 <USART2_CheckDmaReception>
			LL_DMA_ClearFlag_TC6(DMA1);
 8001754:	4808      	ldr	r0, [pc, #32]	; (8001778 <DMA1_Channel6_IRQHandler+0x38>)
 8001756:	f7ff ff6b 	bl	8001630 <LL_DMA_ClearFlag_TC6>
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800175a:	e00a      	b.n	8001772 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 800175c:	4806      	ldr	r0, [pc, #24]	; (8001778 <DMA1_Channel6_IRQHandler+0x38>)
 800175e:	f7ff ff53 	bl	8001608 <LL_DMA_IsActiveFlag_HT6>
 8001762:	4603      	mov	r3, r0
 8001764:	2b01      	cmp	r3, #1
 8001766:	d104      	bne.n	8001772 <DMA1_Channel6_IRQHandler+0x32>
			USART2_CheckDmaReception();
 8001768:	f000 fdc2 	bl	80022f0 <USART2_CheckDmaReception>
			LL_DMA_ClearFlag_HT6(DMA1);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <DMA1_Channel6_IRQHandler+0x38>)
 800176e:	f7ff ff7b 	bl	8001668 <LL_DMA_ClearFlag_HT6>
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40020000 	.word	0x40020000

0800177c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8001780:	480a      	ldr	r0, [pc, #40]	; (80017ac <DMA1_Channel7_IRQHandler+0x30>)
 8001782:	f7ff ff2d 	bl	80015e0 <LL_DMA_IsActiveFlag_TC7>
 8001786:	4603      	mov	r3, r0
 8001788:	2b01      	cmp	r3, #1
 800178a:	d10d      	bne.n	80017a8 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 800178c:	4807      	ldr	r0, [pc, #28]	; (80017ac <DMA1_Channel7_IRQHandler+0x30>)
 800178e:	f7ff ff5d 	bl	800164c <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8001792:	bf00      	nop
 8001794:	4806      	ldr	r0, [pc, #24]	; (80017b0 <DMA1_Channel7_IRQHandler+0x34>)
 8001796:	f7ff ff88 	bl	80016aa <LL_USART_IsActiveFlag_TC>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f9      	beq.n	8001794 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 80017a0:	2107      	movs	r1, #7
 80017a2:	4802      	ldr	r0, [pc, #8]	; (80017ac <DMA1_Channel7_IRQHandler+0x30>)
 80017a4:	f7ff fee8 	bl	8001578 <LL_DMA_DisableChannel>
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40020000 	.word	0x40020000
 80017b0:	40004400 	.word	0x40004400

080017b4 <USART2_IRQHandler>:

/* USER CODE BEGIN 1 */
void USART2_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 80017b8:	4806      	ldr	r0, [pc, #24]	; (80017d4 <USART2_IRQHandler+0x20>)
 80017ba:	f7ff ff63 	bl	8001684 <LL_USART_IsActiveFlag_IDLE>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 80017c4:	f000 fd94 	bl	80022f0 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <USART2_IRQHandler+0x20>)
 80017ca:	f7ff ff81 	bl	80016d0 <LL_USART_ClearFlag_IDLE>
	}
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40004400 	.word	0x40004400

080017d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
	return 1;
 80017dc:	2301      	movs	r3, #1
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <_kill>:

int _kill(int pid, int sig)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017f2:	f001 fa99 	bl	8002d28 <__errno>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2216      	movs	r2, #22
 80017fa:	601a      	str	r2, [r3, #0]
	return -1;
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <_exit>:

void _exit (int status)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001810:	f04f 31ff 	mov.w	r1, #4294967295
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ffe7 	bl	80017e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800181a:	e7fe      	b.n	800181a <_exit+0x12>

0800181c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e00a      	b.n	8001844 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800182e:	f3af 8000 	nop.w
 8001832:	4601      	mov	r1, r0
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	60ba      	str	r2, [r7, #8]
 800183a:	b2ca      	uxtb	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	3301      	adds	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	429a      	cmp	r2, r3
 800184a:	dbf0      	blt.n	800182e <_read+0x12>
	}

return len;
 800184c:	687b      	ldr	r3, [r7, #4]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	e009      	b.n	800187c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	60ba      	str	r2, [r7, #8]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3301      	adds	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	429a      	cmp	r2, r3
 8001882:	dbf1      	blt.n	8001868 <_write+0x12>
	}
	return len;
 8001884:	687b      	ldr	r3, [r7, #4]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <_close>:

int _close(int file)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
	return -1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018b6:	605a      	str	r2, [r3, #4]
	return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_isatty>:

int _isatty(int file)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
	return 1;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
	return 0;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001900:	4a14      	ldr	r2, [pc, #80]	; (8001954 <_sbrk+0x5c>)
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <_sbrk+0x60>)
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <_sbrk+0x64>)
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <_sbrk+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	429a      	cmp	r2, r3
 8001926:	d207      	bcs.n	8001938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001928:	f001 f9fe 	bl	8002d28 <__errno>
 800192c:	4603      	mov	r3, r0
 800192e:	220c      	movs	r2, #12
 8001930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	e009      	b.n	800194c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <_sbrk+0x64>)
 8001948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20004000 	.word	0x20004000
 8001958:	00000400 	.word	0x00000400
 800195c:	200000a0 	.word	0x200000a0
 8001960:	20000200 	.word	0x20000200

08001964 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <SystemInit+0x20>)
 800196a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <SystemInit+0x20>)
 8001970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_EnableIRQ>:
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	2b00      	cmp	r3, #0
 8001998:	db0b      	blt.n	80019b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	f003 021f 	and.w	r2, r3, #31
 80019a0:	4907      	ldr	r1, [pc, #28]	; (80019c0 <__NVIC_EnableIRQ+0x38>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	2001      	movs	r0, #1
 80019aa:	fa00 f202 	lsl.w	r2, r0, r2
 80019ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000e100 	.word	0xe000e100

080019c4 <__NVIC_SetPriority>:
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	6039      	str	r1, [r7, #0]
 80019ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	db0a      	blt.n	80019ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	490c      	ldr	r1, [pc, #48]	; (8001a10 <__NVIC_SetPriority+0x4c>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	0112      	lsls	r2, r2, #4
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	440b      	add	r3, r1
 80019e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019ec:	e00a      	b.n	8001a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4908      	ldr	r1, [pc, #32]	; (8001a14 <__NVIC_SetPriority+0x50>)
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	3b04      	subs	r3, #4
 80019fc:	0112      	lsls	r2, r2, #4
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	440b      	add	r3, r1
 8001a02:	761a      	strb	r2, [r3, #24]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000e100 	.word	0xe000e100
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <LL_DMA_EnableChannel>:
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <LL_DMA_EnableChannel+0x3c>)
 8001a28:	5cd3      	ldrb	r3, [r2, r3]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	3a01      	subs	r2, #1
 8001a36:	4907      	ldr	r1, [pc, #28]	; (8001a54 <LL_DMA_EnableChannel+0x3c>)
 8001a38:	5c8a      	ldrb	r2, [r1, r2]
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	440a      	add	r2, r1
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6013      	str	r3, [r2, #0]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	08005858 	.word	0x08005858

08001a58 <LL_DMA_DisableChannel>:
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <LL_DMA_DisableChannel+0x3c>)
 8001a68:	5cd3      	ldrb	r3, [r2, r3]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4413      	add	r3, r2
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	3a01      	subs	r2, #1
 8001a76:	4907      	ldr	r1, [pc, #28]	; (8001a94 <LL_DMA_DisableChannel+0x3c>)
 8001a78:	5c8a      	ldrb	r2, [r1, r2]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	440a      	add	r2, r1
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6013      	str	r3, [r2, #0]
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	08005858 	.word	0x08005858

08001a98 <LL_DMA_SetDataTransferDirection>:
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	; (8001ae0 <LL_DMA_SetDataTransferDirection+0x48>)
 8001aaa:	5cd3      	ldrb	r3, [r2, r3]
 8001aac:	461a      	mov	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ab8:	f023 0310 	bic.w	r3, r3, #16
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	3a01      	subs	r2, #1
 8001ac0:	4907      	ldr	r1, [pc, #28]	; (8001ae0 <LL_DMA_SetDataTransferDirection+0x48>)
 8001ac2:	5c8a      	ldrb	r2, [r1, r2]
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	440a      	add	r2, r1
 8001aca:	4611      	mov	r1, r2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
}
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	08005858 	.word	0x08005858

08001ae4 <LL_DMA_GetDataTransferDirection>:
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <LL_DMA_GetDataTransferDirection+0x2c>)
 8001af4:	5cd3      	ldrb	r3, [r2, r3]
 8001af6:	461a      	mov	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4413      	add	r3, r2
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	f244 0310 	movw	r3, #16400	; 0x4010
 8001b02:	4013      	ands	r3, r2
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	08005858 	.word	0x08005858

08001b14 <LL_DMA_SetMode>:
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	4a0c      	ldr	r2, [pc, #48]	; (8001b58 <LL_DMA_SetMode+0x44>)
 8001b26:	5cd3      	ldrb	r3, [r2, r3]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f023 0220 	bic.w	r2, r3, #32
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	4907      	ldr	r1, [pc, #28]	; (8001b58 <LL_DMA_SetMode+0x44>)
 8001b3a:	5ccb      	ldrb	r3, [r1, r3]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	440b      	add	r3, r1
 8001b42:	4619      	mov	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]
}
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	08005858 	.word	0x08005858

08001b5c <LL_DMA_SetPeriphIncMode>:
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	4a0c      	ldr	r2, [pc, #48]	; (8001ba0 <LL_DMA_SetPeriphIncMode+0x44>)
 8001b6e:	5cd3      	ldrb	r3, [r2, r3]
 8001b70:	461a      	mov	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4413      	add	r3, r2
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	4907      	ldr	r1, [pc, #28]	; (8001ba0 <LL_DMA_SetPeriphIncMode+0x44>)
 8001b82:	5ccb      	ldrb	r3, [r1, r3]
 8001b84:	4619      	mov	r1, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	440b      	add	r3, r1
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]
}
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	08005858 	.word	0x08005858

08001ba4 <LL_DMA_SetMemoryIncMode>:
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <LL_DMA_SetMemoryIncMode+0x44>)
 8001bb6:	5cd3      	ldrb	r3, [r2, r3]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	4907      	ldr	r1, [pc, #28]	; (8001be8 <LL_DMA_SetMemoryIncMode+0x44>)
 8001bca:	5ccb      	ldrb	r3, [r1, r3]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	440b      	add	r3, r1
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]
}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	08005858 	.word	0x08005858

08001bec <LL_DMA_SetPeriphSize>:
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <LL_DMA_SetPeriphSize+0x44>)
 8001bfe:	5cd3      	ldrb	r3, [r2, r3]
 8001c00:	461a      	mov	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4413      	add	r3, r2
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	4907      	ldr	r1, [pc, #28]	; (8001c30 <LL_DMA_SetPeriphSize+0x44>)
 8001c12:	5ccb      	ldrb	r3, [r1, r3]
 8001c14:	4619      	mov	r1, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	440b      	add	r3, r1
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	08005858 	.word	0x08005858

08001c34 <LL_DMA_SetMemorySize>:
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	4a0c      	ldr	r2, [pc, #48]	; (8001c78 <LL_DMA_SetMemorySize+0x44>)
 8001c46:	5cd3      	ldrb	r3, [r2, r3]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	4907      	ldr	r1, [pc, #28]	; (8001c78 <LL_DMA_SetMemorySize+0x44>)
 8001c5a:	5ccb      	ldrb	r3, [r1, r3]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	440b      	add	r3, r1
 8001c62:	4619      	mov	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	08005858 	.word	0x08005858

08001c7c <LL_DMA_SetChannelPriorityLevel>:
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	4a0c      	ldr	r2, [pc, #48]	; (8001cc0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001c8e:	5cd3      	ldrb	r3, [r2, r3]
 8001c90:	461a      	mov	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4413      	add	r3, r2
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	4907      	ldr	r1, [pc, #28]	; (8001cc0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001ca2:	5ccb      	ldrb	r3, [r1, r3]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	440b      	add	r3, r1
 8001caa:	4619      	mov	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
}
 8001cb2:	bf00      	nop
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	08005858 	.word	0x08005858

08001cc4 <LL_DMA_SetDataLength>:
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <LL_DMA_SetDataLength+0x44>)
 8001cd6:	5cd3      	ldrb	r3, [r2, r3]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4413      	add	r3, r2
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	0c1b      	lsrs	r3, r3, #16
 8001ce2:	041b      	lsls	r3, r3, #16
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	3a01      	subs	r2, #1
 8001ce8:	4907      	ldr	r1, [pc, #28]	; (8001d08 <LL_DMA_SetDataLength+0x44>)
 8001cea:	5c8a      	ldrb	r2, [r1, r2]
 8001cec:	4611      	mov	r1, r2
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	440a      	add	r2, r1
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	08005858 	.word	0x08005858

08001d0c <LL_DMA_GetDataLength>:
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4a06      	ldr	r2, [pc, #24]	; (8001d34 <LL_DMA_GetDataLength+0x28>)
 8001d1c:	5cd3      	ldrb	r3, [r2, r3]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	b29b      	uxth	r3, r3
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	08005858 	.word	0x08005858

08001d38 <LL_DMA_ConfigAddresses>:
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	2b10      	cmp	r3, #16
 8001d4a:	d114      	bne.n	8001d76 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	4a16      	ldr	r2, [pc, #88]	; (8001dac <LL_DMA_ConfigAddresses+0x74>)
 8001d52:	5cd3      	ldrb	r3, [r2, r3]
 8001d54:	461a      	mov	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4413      	add	r3, r2
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	4a11      	ldr	r2, [pc, #68]	; (8001dac <LL_DMA_ConfigAddresses+0x74>)
 8001d66:	5cd3      	ldrb	r3, [r2, r3]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	461a      	mov	r2, r3
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	6093      	str	r3, [r2, #8]
}
 8001d74:	e013      	b.n	8001d9e <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	4a0c      	ldr	r2, [pc, #48]	; (8001dac <LL_DMA_ConfigAddresses+0x74>)
 8001d7c:	5cd3      	ldrb	r3, [r2, r3]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	461a      	mov	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	4a07      	ldr	r2, [pc, #28]	; (8001dac <LL_DMA_ConfigAddresses+0x74>)
 8001d90:	5cd3      	ldrb	r3, [r2, r3]
 8001d92:	461a      	mov	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4413      	add	r3, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	60d3      	str	r3, [r2, #12]
}
 8001d9e:	bf00      	nop
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	08005858 	.word	0x08005858

08001db0 <LL_DMA_SetMemoryAddress>:
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	4a06      	ldr	r2, [pc, #24]	; (8001ddc <LL_DMA_SetMemoryAddress+0x2c>)
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4413      	add	r3, r2
 8001dca:	461a      	mov	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	60d3      	str	r3, [r2, #12]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	08005858 	.word	0x08005858

08001de0 <LL_DMA_SetPeriphAddress>:
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	4a06      	ldr	r2, [pc, #24]	; (8001e0c <LL_DMA_SetPeriphAddress+0x2c>)
 8001df2:	5cd3      	ldrb	r3, [r2, r3]
 8001df4:	461a      	mov	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4413      	add	r3, r2
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6093      	str	r3, [r2, #8]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	08005858 	.word	0x08005858

08001e10 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <LL_DMA_EnableIT_TC+0x3c>)
 8001e20:	5cd3      	ldrb	r3, [r2, r3]
 8001e22:	461a      	mov	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4413      	add	r3, r2
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	3a01      	subs	r2, #1
 8001e2e:	4907      	ldr	r1, [pc, #28]	; (8001e4c <LL_DMA_EnableIT_TC+0x3c>)
 8001e30:	5c8a      	ldrb	r2, [r1, r2]
 8001e32:	4611      	mov	r1, r2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	440a      	add	r2, r1
 8001e38:	f043 0302 	orr.w	r3, r3, #2
 8001e3c:	6013      	str	r3, [r2, #0]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	08005858 	.word	0x08005858

08001e50 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <LL_DMA_EnableIT_HT+0x3c>)
 8001e60:	5cd3      	ldrb	r3, [r2, r3]
 8001e62:	461a      	mov	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4413      	add	r3, r2
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	3a01      	subs	r2, #1
 8001e6e:	4907      	ldr	r1, [pc, #28]	; (8001e8c <LL_DMA_EnableIT_HT+0x3c>)
 8001e70:	5c8a      	ldrb	r2, [r1, r2]
 8001e72:	4611      	mov	r1, r2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	440a      	add	r2, r1
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	6013      	str	r3, [r2, #0]
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	08005858 	.word	0x08005858

08001e90 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ecc <LL_DMA_EnableIT_TE+0x3c>)
 8001ea0:	5cd3      	ldrb	r3, [r2, r3]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	3a01      	subs	r2, #1
 8001eae:	4907      	ldr	r1, [pc, #28]	; (8001ecc <LL_DMA_EnableIT_TE+0x3c>)
 8001eb0:	5c8a      	ldrb	r2, [r1, r2]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	440a      	add	r2, r1
 8001eb8:	f043 0308 	orr.w	r3, r3, #8
 8001ebc:	6013      	str	r3, [r2, #0]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	08005858 	.word	0x08005858

08001ed0 <LL_AHB1_GRP1_EnableClock>:
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	4907      	ldr	r1, [pc, #28]	; (8001efc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ee6:	695a      	ldr	r2, [r3, #20]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4013      	ands	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	40021000 	.word	0x40021000

08001f00 <LL_APB1_GRP1_EnableClock>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f0a:	69da      	ldr	r2, [r3, #28]
 8001f0c:	4907      	ldr	r1, [pc, #28]	; (8001f2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f16:	69da      	ldr	r2, [r3, #28]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	40021000 	.word	0x40021000

08001f30 <LL_USART_Enable>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f043 0201 	orr.w	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	601a      	str	r2, [r3, #0]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_USART_ConfigAsyncMode>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	; 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	e853 3f00 	ldrex	r3, [r3]
 8001f8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f043 0310 	orr.w	r3, r3, #16
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	61ba      	str	r2, [r7, #24]
 8001f9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fa0:	6979      	ldr	r1, [r7, #20]
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	e841 2300 	strex	r3, r2, [r1]
 8001fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1e9      	bne.n	8001f84 <LL_USART_EnableIT_IDLE+0x8>
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3724      	adds	r7, #36	; 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b089      	sub	sp, #36	; 0x24
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3308      	adds	r3, #8
 8001fca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	e853 3f00 	ldrex	r3, [r3]
 8001fd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fda:	61fb      	str	r3, [r7, #28]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3308      	adds	r3, #8
 8001fe0:	69fa      	ldr	r2, [r7, #28]
 8001fe2:	61ba      	str	r2, [r7, #24]
 8001fe4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fe6:	6979      	ldr	r1, [r7, #20]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	e841 2300 	strex	r3, r2, [r1]
 8001fee:	613b      	str	r3, [r7, #16]
   return(result);
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1e7      	bne.n	8001fc6 <LL_USART_DisableIT_CTS+0x8>
}
 8001ff6:	bf00      	nop
 8001ff8:	bf00      	nop
 8001ffa:	3724      	adds	r7, #36	; 0x24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8002004:	b480      	push	{r7}
 8002006:	b089      	sub	sp, #36	; 0x24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3308      	adds	r3, #8
 8002010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	e853 3f00 	ldrex	r3, [r3]
 8002018:	60bb      	str	r3, [r7, #8]
   return(result);
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3308      	adds	r3, #8
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	61ba      	str	r2, [r7, #24]
 800202a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800202c:	6979      	ldr	r1, [r7, #20]
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	e841 2300 	strex	r3, r2, [r1]
 8002034:	613b      	str	r3, [r7, #16]
   return(result);
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1e7      	bne.n	800200c <LL_USART_EnableDMAReq_RX+0x8>
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3724      	adds	r7, #36	; 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 800204a:	b480      	push	{r7}
 800204c:	b089      	sub	sp, #36	; 0x24
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3308      	adds	r3, #8
 8002056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	e853 3f00 	ldrex	r3, [r3]
 800205e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3308      	adds	r3, #8
 800206c:	69fa      	ldr	r2, [r7, #28]
 800206e:	61ba      	str	r2, [r7, #24]
 8002070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002072:	6979      	ldr	r1, [r7, #20]
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	e841 2300 	strex	r3, r2, [r1]
 800207a:	613b      	str	r3, [r7, #16]
   return(result);
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1e7      	bne.n	8002052 <LL_USART_EnableDMAReq_TX+0x8>
}
 8002082:	bf00      	nop
 8002084:	bf00      	nop
 8002086:	3724      	adds	r7, #36	; 0x24
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d103      	bne.n	80020a8 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3328      	adds	r3, #40	; 0x28
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	e002      	b.n	80020ae <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3324      	adds	r3, #36	; 0x24
 80020ac:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 80020ae:	68fb      	ldr	r3, [r7, #12]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <USART2_RegisterCallback>:
uint8_t bufferUSART2dma[DMA_USART2_BUFFER_SIZE];
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(const uint8_t* data, uint16_t len) = 0;

void USART2_RegisterCallback(void *callback)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a03      	ldr	r2, [pc, #12]	; (80020dc <USART2_RegisterCallback+0x20>)
 80020ce:	6013      	str	r3, [r2, #0]
	}
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	200000a4 	.word	0x200000a4

080020e0 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020e0:	b5b0      	push	{r4, r5, r7, lr}
 80020e2:	b090      	sub	sp, #64	; 0x40
 80020e4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80020e6:	f107 031c 	add.w	r3, r7, #28
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	60da      	str	r2, [r3, #12]
 80020f4:	611a      	str	r2, [r3, #16]
 80020f6:	615a      	str	r2, [r3, #20]
 80020f8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
 8002108:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800210a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800210e:	f7ff fef7 	bl	8001f00 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002112:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002116:	f7ff fedb 	bl	8001ed0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800211a:	230c      	movs	r3, #12
 800211c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800211e:	2302      	movs	r3, #2
 8002120:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002122:	2303      	movs	r3, #3
 8002124:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800212e:	2307      	movs	r3, #7
 8002130:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	1d3b      	adds	r3, r7, #4
 8002134:	4619      	mov	r1, r3
 8002136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800213a:	f000 fa7f 	bl	800263c <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800213e:	2200      	movs	r2, #0
 8002140:	2106      	movs	r1, #6
 8002142:	4858      	ldr	r0, [pc, #352]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 8002144:	f7ff fca8 	bl	8001a98 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8002148:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800214c:	2106      	movs	r1, #6
 800214e:	4855      	ldr	r0, [pc, #340]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 8002150:	f7ff fd94 	bl	8001c7c <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8002154:	2200      	movs	r2, #0
 8002156:	2106      	movs	r1, #6
 8002158:	4852      	ldr	r0, [pc, #328]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 800215a:	f7ff fcdb 	bl	8001b14 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 800215e:	2200      	movs	r2, #0
 8002160:	2106      	movs	r1, #6
 8002162:	4850      	ldr	r0, [pc, #320]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 8002164:	f7ff fcfa 	bl	8001b5c <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8002168:	2280      	movs	r2, #128	; 0x80
 800216a:	2106      	movs	r1, #6
 800216c:	484d      	ldr	r0, [pc, #308]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 800216e:	f7ff fd19 	bl	8001ba4 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002172:	2200      	movs	r2, #0
 8002174:	2106      	movs	r1, #6
 8002176:	484b      	ldr	r0, [pc, #300]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 8002178:	f7ff fd38 	bl	8001bec <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 800217c:	2200      	movs	r2, #0
 800217e:	2106      	movs	r1, #6
 8002180:	4848      	ldr	r0, [pc, #288]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 8002182:	f7ff fd57 	bl	8001c34 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8002186:	2101      	movs	r1, #1
 8002188:	4847      	ldr	r0, [pc, #284]	; (80022a8 <MX_USART2_UART_Init+0x1c8>)
 800218a:	f7ff ff81 	bl	8002090 <LL_USART_DMA_GetRegAddr>
 800218e:	4604      	mov	r4, r0
 8002190:	4d46      	ldr	r5, [pc, #280]	; (80022ac <MX_USART2_UART_Init+0x1cc>)
 8002192:	2106      	movs	r1, #6
 8002194:	4843      	ldr	r0, [pc, #268]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 8002196:	f7ff fca5 	bl	8001ae4 <LL_DMA_GetDataTransferDirection>
 800219a:	4603      	mov	r3, r0
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	462b      	mov	r3, r5
 80021a0:	4622      	mov	r2, r4
 80021a2:	2106      	movs	r1, #6
 80021a4:	483f      	ldr	r0, [pc, #252]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 80021a6:	f7ff fdc7 	bl	8001d38 <LL_DMA_ConfigAddresses>
  						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
  							(uint32_t)bufferUSART2dma,
  							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 80021aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ae:	2106      	movs	r1, #6
 80021b0:	483c      	ldr	r0, [pc, #240]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 80021b2:	f7ff fd87 	bl	8001cc4 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80021b6:	2106      	movs	r1, #6
 80021b8:	483a      	ldr	r0, [pc, #232]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 80021ba:	f7ff fc2d 	bl	8001a18 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 80021be:	483a      	ldr	r0, [pc, #232]	; (80022a8 <MX_USART2_UART_Init+0x1c8>)
 80021c0:	f7ff ff20 	bl	8002004 <LL_USART_EnableDMAReq_RX>

#if !POLLING
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 80021c4:	2106      	movs	r1, #6
 80021c6:	4837      	ldr	r0, [pc, #220]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 80021c8:	f7ff fe22 	bl	8001e10 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 80021cc:	2106      	movs	r1, #6
 80021ce:	4835      	ldr	r0, [pc, #212]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 80021d0:	f7ff fe3e 	bl	8001e50 <LL_DMA_EnableIT_HT>
#endif

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80021d4:	2210      	movs	r2, #16
 80021d6:	2107      	movs	r1, #7
 80021d8:	4832      	ldr	r0, [pc, #200]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 80021da:	f7ff fc5d 	bl	8001a98 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 80021de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021e2:	2107      	movs	r1, #7
 80021e4:	482f      	ldr	r0, [pc, #188]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 80021e6:	f7ff fd49 	bl	8001c7c <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2107      	movs	r1, #7
 80021ee:	482d      	ldr	r0, [pc, #180]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 80021f0:	f7ff fc90 	bl	8001b14 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 80021f4:	2200      	movs	r2, #0
 80021f6:	2107      	movs	r1, #7
 80021f8:	482a      	ldr	r0, [pc, #168]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 80021fa:	f7ff fcaf 	bl	8001b5c <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 80021fe:	2280      	movs	r2, #128	; 0x80
 8002200:	2107      	movs	r1, #7
 8002202:	4828      	ldr	r0, [pc, #160]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 8002204:	f7ff fcce 	bl	8001ba4 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8002208:	2200      	movs	r2, #0
 800220a:	2107      	movs	r1, #7
 800220c:	4825      	ldr	r0, [pc, #148]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 800220e:	f7ff fced 	bl	8001bec <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002212:	2200      	movs	r2, #0
 8002214:	2107      	movs	r1, #7
 8002216:	4823      	ldr	r0, [pc, #140]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 8002218:	f7ff fd0c 	bl	8001c34 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 800221c:	2100      	movs	r1, #0
 800221e:	4822      	ldr	r0, [pc, #136]	; (80022a8 <MX_USART2_UART_Init+0x1c8>)
 8002220:	f7ff ff36 	bl	8002090 <LL_USART_DMA_GetRegAddr>
 8002224:	4603      	mov	r3, r0
 8002226:	461a      	mov	r2, r3
 8002228:	2107      	movs	r1, #7
 800222a:	481e      	ldr	r0, [pc, #120]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 800222c:	f7ff fdd8 	bl	8001de0 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8002230:	481d      	ldr	r0, [pc, #116]	; (80022a8 <MX_USART2_UART_Init+0x1c8>)
 8002232:	f7ff ff0a 	bl	800204a <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8002236:	2107      	movs	r1, #7
 8002238:	481a      	ldr	r0, [pc, #104]	; (80022a4 <MX_USART2_UART_Init+0x1c4>)
 800223a:	f7ff fe29 	bl	8001e90 <LL_DMA_EnableIT_TE>

  /* USER CODE BEGIN USART2_Init 1 */

  NVIC_SetPriority(USART2_IRQn, 0);
 800223e:	2100      	movs	r1, #0
 8002240:	2026      	movs	r0, #38	; 0x26
 8002242:	f7ff fbbf 	bl	80019c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002246:	2026      	movs	r0, #38	; 0x26
 8002248:	f7ff fb9e 	bl	8001988 <__NVIC_EnableIRQ>

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800224c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002250:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002252:	2300      	movs	r3, #0
 8002254:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800225a:	2300      	movs	r3, #0
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800225e:	230c      	movs	r3, #12
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002262:	2300      	movs	r3, #0
 8002264:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002266:	2300      	movs	r3, #0
 8002268:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800226a:	f107 031c 	add.w	r3, r7, #28
 800226e:	4619      	mov	r1, r3
 8002270:	480d      	ldr	r0, [pc, #52]	; (80022a8 <MX_USART2_UART_Init+0x1c8>)
 8002272:	f000 fc6b 	bl	8002b4c <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8002276:	480c      	ldr	r0, [pc, #48]	; (80022a8 <MX_USART2_UART_Init+0x1c8>)
 8002278:	f7ff fea1 	bl	8001fbe <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 800227c:	480a      	ldr	r0, [pc, #40]	; (80022a8 <MX_USART2_UART_Init+0x1c8>)
 800227e:	f7ff fe67 	bl	8001f50 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002282:	4809      	ldr	r0, [pc, #36]	; (80022a8 <MX_USART2_UART_Init+0x1c8>)
 8002284:	f7ff fe54 	bl	8001f30 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

#if !POLLING
  LL_USART_EnableIT_IDLE(USART2);
 8002288:	4807      	ldr	r0, [pc, #28]	; (80022a8 <MX_USART2_UART_Init+0x1c8>)
 800228a:	f7ff fe77 	bl	8001f7c <LL_USART_EnableIT_IDLE>
#endif
  LL_USART_ConfigAsyncMode(USART2);
 800228e:	4806      	ldr	r0, [pc, #24]	; (80022a8 <MX_USART2_UART_Init+0x1c8>)
 8002290:	f7ff fe5e 	bl	8001f50 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002294:	4804      	ldr	r0, [pc, #16]	; (80022a8 <MX_USART2_UART_Init+0x1c8>)
 8002296:	f7ff fe4b 	bl	8001f30 <LL_USART_Enable>
  /* USER CODE END USART2_Init 2 */

}
 800229a:	bf00      	nop
 800229c:	3738      	adds	r7, #56	; 0x38
 800229e:	46bd      	mov	sp, r7
 80022a0:	bdb0      	pop	{r4, r5, r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40020000 	.word	0x40020000
 80022a8:	40004400 	.word	0x40004400
 80022ac:	200000ec 	.word	0x200000ec

080022b0 <USART2_PutBuffer>:

/* USER CODE BEGIN 1 */
// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	461a      	mov	r2, r3
 80022c0:	2107      	movs	r1, #7
 80022c2:	480a      	ldr	r0, [pc, #40]	; (80022ec <USART2_PutBuffer+0x3c>)
 80022c4:	f7ff fd74 	bl	8001db0 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	461a      	mov	r2, r3
 80022cc:	2107      	movs	r1, #7
 80022ce:	4807      	ldr	r0, [pc, #28]	; (80022ec <USART2_PutBuffer+0x3c>)
 80022d0:	f7ff fcf8 	bl	8001cc4 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 80022d4:	2107      	movs	r1, #7
 80022d6:	4805      	ldr	r0, [pc, #20]	; (80022ec <USART2_PutBuffer+0x3c>)
 80022d8:	f7ff fd9a 	bl	8001e10 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 80022dc:	2107      	movs	r1, #7
 80022de:	4803      	ldr	r0, [pc, #12]	; (80022ec <USART2_PutBuffer+0x3c>)
 80022e0:	f7ff fb9a 	bl	8001a18 <LL_DMA_EnableChannel>
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40020000 	.word	0x40020000

080022f0 <USART2_CheckDmaReception>:

void USART2_CheckDmaReception(void)
{
 80022f0:	b5b0      	push	{r4, r5, r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af02      	add	r7, sp, #8
	if(USART2_ProcessData == 0) return;
 80022f6:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <USART2_CheckDmaReception+0xd8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d060      	beq.n	80023c0 <USART2_CheckDmaReception+0xd0>

	static uint16_t old_pos = 0;

	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 80022fe:	2106      	movs	r1, #6
 8002300:	4832      	ldr	r0, [pc, #200]	; (80023cc <USART2_CheckDmaReception+0xdc>)
 8002302:	f7ff fd03 	bl	8001d0c <LL_DMA_GetDataLength>
 8002306:	4603      	mov	r3, r0
 8002308:	b29b      	uxth	r3, r3
 800230a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800230e:	80fb      	strh	r3, [r7, #6]

	occupiedMem = pos;
 8002310:	4a2f      	ldr	r2, [pc, #188]	; (80023d0 <USART2_CheckDmaReception+0xe0>)
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	8013      	strh	r3, [r2, #0]

	if (pos != old_pos)
 8002316:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <USART2_CheckDmaReception+0xe4>)
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	88fa      	ldrh	r2, [r7, #6]
 800231c:	429a      	cmp	r2, r3
 800231e:	d050      	beq.n	80023c2 <USART2_CheckDmaReception+0xd2>
	{
		if (pos <= DMA_USART2_BUFFER_SIZE-1)
 8002320:	88fb      	ldrh	r3, [r7, #6]
 8002322:	2bff      	cmp	r3, #255	; 0xff
 8002324:	d811      	bhi.n	800234a <USART2_CheckDmaReception+0x5a>
		{
			USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos);
 8002326:	4b28      	ldr	r3, [pc, #160]	; (80023c8 <USART2_CheckDmaReception+0xd8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a2a      	ldr	r2, [pc, #168]	; (80023d4 <USART2_CheckDmaReception+0xe4>)
 800232c:	8812      	ldrh	r2, [r2, #0]
 800232e:	4611      	mov	r1, r2
 8002330:	4a29      	ldr	r2, [pc, #164]	; (80023d8 <USART2_CheckDmaReception+0xe8>)
 8002332:	1888      	adds	r0, r1, r2
 8002334:	4a27      	ldr	r2, [pc, #156]	; (80023d4 <USART2_CheckDmaReception+0xe4>)
 8002336:	8812      	ldrh	r2, [r2, #0]
 8002338:	88f9      	ldrh	r1, [r7, #6]
 800233a:	1a8a      	subs	r2, r1, r2
 800233c:	b292      	uxth	r2, r2
 800233e:	4611      	mov	r1, r2
 8002340:	4798      	blx	r3
			old_pos = pos;
 8002342:	4a24      	ldr	r2, [pc, #144]	; (80023d4 <USART2_CheckDmaReception+0xe4>)
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	8013      	strh	r3, [r2, #0]
 8002348:	e03b      	b.n	80023c2 <USART2_CheckDmaReception+0xd2>
		}

		else{
			USART2_ProcessData(&bufferUSART2dma[old_pos], DMA_USART2_BUFFER_SIZE - old_pos);
 800234a:	4b1f      	ldr	r3, [pc, #124]	; (80023c8 <USART2_CheckDmaReception+0xd8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a21      	ldr	r2, [pc, #132]	; (80023d4 <USART2_CheckDmaReception+0xe4>)
 8002350:	8812      	ldrh	r2, [r2, #0]
 8002352:	4611      	mov	r1, r2
 8002354:	4a20      	ldr	r2, [pc, #128]	; (80023d8 <USART2_CheckDmaReception+0xe8>)
 8002356:	1888      	adds	r0, r1, r2
 8002358:	4a1e      	ldr	r2, [pc, #120]	; (80023d4 <USART2_CheckDmaReception+0xe4>)
 800235a:	8812      	ldrh	r2, [r2, #0]
 800235c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8002360:	b292      	uxth	r2, r2
 8002362:	4611      	mov	r1, r2
 8002364:	4798      	blx	r3
			//USART2_ProcessData(&bufferUSART2dma[old_pos]);
			memset(bufferUSART2dma, 0, DMA_USART2_BUFFER_SIZE);
 8002366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800236a:	2100      	movs	r1, #0
 800236c:	481a      	ldr	r0, [pc, #104]	; (80023d8 <USART2_CheckDmaReception+0xe8>)
 800236e:	f000 fd05 	bl	8002d7c <memset>
			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002372:	2106      	movs	r1, #6
 8002374:	4815      	ldr	r0, [pc, #84]	; (80023cc <USART2_CheckDmaReception+0xdc>)
 8002376:	f7ff fb6f 	bl	8001a58 <LL_DMA_DisableChannel>
			LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 800237a:	2101      	movs	r1, #1
 800237c:	4817      	ldr	r0, [pc, #92]	; (80023dc <USART2_CheckDmaReception+0xec>)
 800237e:	f7ff fe87 	bl	8002090 <LL_USART_DMA_GetRegAddr>
 8002382:	4604      	mov	r4, r0
 8002384:	4d14      	ldr	r5, [pc, #80]	; (80023d8 <USART2_CheckDmaReception+0xe8>)
 8002386:	2106      	movs	r1, #6
 8002388:	4810      	ldr	r0, [pc, #64]	; (80023cc <USART2_CheckDmaReception+0xdc>)
 800238a:	f7ff fbab 	bl	8001ae4 <LL_DMA_GetDataTransferDirection>
 800238e:	4603      	mov	r3, r0
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	462b      	mov	r3, r5
 8002394:	4622      	mov	r2, r4
 8002396:	2106      	movs	r1, #6
 8002398:	480c      	ldr	r0, [pc, #48]	; (80023cc <USART2_CheckDmaReception+0xdc>)
 800239a:	f7ff fccd 	bl	8001d38 <LL_DMA_ConfigAddresses>
											 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
												(uint32_t)bufferUSART2dma,
												LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

			LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 800239e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023a2:	2106      	movs	r1, #6
 80023a4:	4809      	ldr	r0, [pc, #36]	; (80023cc <USART2_CheckDmaReception+0xdc>)
 80023a6:	f7ff fc8d 	bl	8001cc4 <LL_DMA_SetDataLength>
			LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80023aa:	2106      	movs	r1, #6
 80023ac:	4807      	ldr	r0, [pc, #28]	; (80023cc <USART2_CheckDmaReception+0xdc>)
 80023ae:	f7ff fb33 	bl	8001a18 <LL_DMA_EnableChannel>
			LL_USART_EnableDMAReq_RX(USART2);
 80023b2:	480a      	ldr	r0, [pc, #40]	; (80023dc <USART2_CheckDmaReception+0xec>)
 80023b4:	f7ff fe26 	bl	8002004 <LL_USART_EnableDMAReq_RX>
			old_pos = 0;
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <USART2_CheckDmaReception+0xe4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	801a      	strh	r2, [r3, #0]
 80023be:	e000      	b.n	80023c2 <USART2_CheckDmaReception+0xd2>
	if(USART2_ProcessData == 0) return;
 80023c0:	bf00      	nop
		}

	}

}
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bdb0      	pop	{r4, r5, r7, pc}
 80023c8:	200000a4 	.word	0x200000a4
 80023cc:	40020000 	.word	0x40020000
 80023d0:	200000d2 	.word	0x200000d2
 80023d4:	200000a8 	.word	0x200000a8
 80023d8:	200000ec 	.word	0x200000ec
 80023dc:	40004400 	.word	0x40004400

080023e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002418 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023e4:	480d      	ldr	r0, [pc, #52]	; (800241c <LoopForever+0x6>)
  ldr r1, =_edata
 80023e6:	490e      	ldr	r1, [pc, #56]	; (8002420 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023e8:	4a0e      	ldr	r2, [pc, #56]	; (8002424 <LoopForever+0xe>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023ec:	e002      	b.n	80023f4 <LoopCopyDataInit>

080023ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f2:	3304      	adds	r3, #4

080023f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f8:	d3f9      	bcc.n	80023ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fa:	4a0b      	ldr	r2, [pc, #44]	; (8002428 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023fc:	4c0b      	ldr	r4, [pc, #44]	; (800242c <LoopForever+0x16>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002400:	e001      	b.n	8002406 <LoopFillZerobss>

08002402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002404:	3204      	adds	r2, #4

08002406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002408:	d3fb      	bcc.n	8002402 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800240a:	f7ff faab 	bl	8001964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800240e:	f000 fc91 	bl	8002d34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002412:	f7fe fe63 	bl	80010dc <main>

08002416 <LoopForever>:

LoopForever:
    b LoopForever
 8002416:	e7fe      	b.n	8002416 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002418:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800241c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002420:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002424:	08005b34 	.word	0x08005b34
  ldr r2, =_sbss
 8002428:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800242c:	200001fc 	.word	0x200001fc

08002430 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002430:	e7fe      	b.n	8002430 <ADC1_IRQHandler>

08002432 <LL_GPIO_SetPinMode>:
{
 8002432:	b480      	push	{r7}
 8002434:	b089      	sub	sp, #36	; 0x24
 8002436:	af00      	add	r7, sp, #0
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	613b      	str	r3, [r7, #16]
  return result;
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	2103      	movs	r1, #3
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	401a      	ands	r2, r3
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	61bb      	str	r3, [r7, #24]
  return result;
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	431a      	orrs	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	601a      	str	r2, [r3, #0]
}
 8002484:	bf00      	nop
 8002486:	3724      	adds	r7, #36	; 0x24
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_GPIO_SetPinOutputType>:
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	43db      	mvns	r3, r3
 80024a4:	401a      	ands	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	431a      	orrs	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	605a      	str	r2, [r3, #4]
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_GPIO_SetPinSpeed>:
{
 80024c0:	b480      	push	{r7}
 80024c2:	b089      	sub	sp, #36	; 0x24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	613b      	str	r3, [r7, #16]
  return result;
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	fab3 f383 	clz	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2103      	movs	r1, #3
 80024e8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	401a      	ands	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	61bb      	str	r3, [r7, #24]
  return result;
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	431a      	orrs	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	609a      	str	r2, [r3, #8]
}
 8002512:	bf00      	nop
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <LL_GPIO_SetPinPull>:
{
 800251e:	b480      	push	{r7}
 8002520:	b089      	sub	sp, #36	; 0x24
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	fa93 f3a3 	rbit	r3, r3
 8002538:	613b      	str	r3, [r7, #16]
  return result;
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	2103      	movs	r1, #3
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	401a      	ands	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa93 f3a3 	rbit	r3, r3
 8002558:	61bb      	str	r3, [r7, #24]
  return result;
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	431a      	orrs	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	60da      	str	r2, [r3, #12]
}
 8002570:	bf00      	nop
 8002572:	3724      	adds	r7, #36	; 0x24
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <LL_GPIO_SetAFPin_0_7>:
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	; 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a1a      	ldr	r2, [r3, #32]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	613b      	str	r3, [r7, #16]
  return result;
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	fab3 f383 	clz	r3, r3
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	210f      	movs	r1, #15
 80025a4:	fa01 f303 	lsl.w	r3, r1, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	401a      	ands	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	61bb      	str	r3, [r7, #24]
  return result;
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	fa01 f303 	lsl.w	r3, r1, r3
 80025c8:	431a      	orrs	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	621a      	str	r2, [r3, #32]
}
 80025ce:	bf00      	nop
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <LL_GPIO_SetAFPin_8_15>:
{
 80025da:	b480      	push	{r7}
 80025dc:	b089      	sub	sp, #36	; 0x24
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	0a1b      	lsrs	r3, r3, #8
 80025ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	613b      	str	r3, [r7, #16]
  return result;
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	210f      	movs	r1, #15
 8002604:	fa01 f303 	lsl.w	r3, r1, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	401a      	ands	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	61bb      	str	r3, [r7, #24]
  return result;
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	431a      	orrs	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002630:	bf00      	nop
 8002632:	3724      	adds	r7, #36	; 0x24
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	613b      	str	r3, [r7, #16]
  return result;
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800265e:	e051      	b.n	8002704 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	2101      	movs	r1, #1
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	fa01 f303 	lsl.w	r3, r1, r3
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d043      	beq.n	80026fe <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d003      	beq.n	8002686 <LL_GPIO_Init+0x4a>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d10e      	bne.n	80026a4 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	461a      	mov	r2, r3
 800268c:	69b9      	ldr	r1, [r7, #24]
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff ff16 	bl	80024c0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	6819      	ldr	r1, [r3, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	461a      	mov	r2, r3
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff fef6 	bl	8002490 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	461a      	mov	r2, r3
 80026aa:	69b9      	ldr	r1, [r7, #24]
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff ff36 	bl	800251e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d11a      	bne.n	80026f0 <LL_GPIO_Init+0xb4>
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	60bb      	str	r3, [r7, #8]
  return result;
 80026c6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80026c8:	fab3 f383 	clz	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b07      	cmp	r3, #7
 80026d0:	d807      	bhi.n	80026e2 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	461a      	mov	r2, r3
 80026d8:	69b9      	ldr	r1, [r7, #24]
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff ff4e 	bl	800257c <LL_GPIO_SetAFPin_0_7>
 80026e0:	e006      	b.n	80026f0 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	461a      	mov	r2, r3
 80026e8:	69b9      	ldr	r1, [r7, #24]
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ff75 	bl	80025da <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	461a      	mov	r2, r3
 80026f6:	69b9      	ldr	r1, [r7, #24]
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff fe9a 	bl	8002432 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3301      	adds	r3, #1
 8002702:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	fa22 f303 	lsr.w	r3, r2, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1a6      	bne.n	8002660 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3720      	adds	r7, #32
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <LL_RCC_HSI_IsReady>:
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <LL_RCC_HSI_IsReady+0x20>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b02      	cmp	r3, #2
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
}
 8002732:	4618      	mov	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	40021000 	.word	0x40021000

08002740 <LL_RCC_LSE_IsReady>:
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <LL_RCC_LSE_IsReady+0x20>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b02      	cmp	r3, #2
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
}
 8002756:	4618      	mov	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	40021000 	.word	0x40021000

08002764 <LL_RCC_GetSysClkSource>:
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <LL_RCC_GetSysClkSource+0x18>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 030c 	and.w	r3, r3, #12
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000

08002780 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <LL_RCC_GetAHBPrescaler+0x18>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000

0800279c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40021000 	.word	0x40021000

080027b8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000

080027d4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80027dc:	4b07      	ldr	r3, [pc, #28]	; (80027fc <LL_RCC_GetUSARTClockSource+0x28>)
 80027de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027e0:	2103      	movs	r1, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	fa01 f303 	lsl.w	r3, r1, r3
 80027e8:	401a      	ands	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	061b      	lsls	r3, r3, #24
 80027ee:	4313      	orrs	r3, r2
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	40021000 	.word	0x40021000

08002800 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <LL_RCC_PLL_GetMainSource+0x18>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000

0800281c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000

08002838 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <LL_RCC_PLL_GetPrediv+0x18>)
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	f003 030f 	and.w	r3, r3, #15
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000

08002854 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800285c:	f000 f864 	bl	8002928 <RCC_GetSystemClockFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f882 	bl	8002974 <RCC_GetHCLKClockFreq>
 8002870:	4602      	mov	r2, r0
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f890 	bl	80029a0 <RCC_GetPCLK1ClockFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4618      	mov	r0, r3
 800288c:	f000 f89c 	bl	80029c8 <RCC_GetPCLK2ClockFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	60da      	str	r2, [r3, #12]
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d12d      	bne.n	800290e <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ff8e 	bl	80027d4 <LL_RCC_GetUSARTClockSource>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d00a      	beq.n	80028d4 <LL_RCC_GetUSARTClockFreq+0x34>
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d819      	bhi.n	80028f6 <LL_RCC_GetUSARTClockFreq+0x56>
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d002      	beq.n	80028cc <LL_RCC_GetUSARTClockFreq+0x2c>
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d00c      	beq.n	80028e4 <LL_RCC_GetUSARTClockFreq+0x44>
 80028ca:	e014      	b.n	80028f6 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80028cc:	f000 f82c 	bl	8002928 <RCC_GetSystemClockFreq>
 80028d0:	60f8      	str	r0, [r7, #12]
        break;
 80028d2:	e021      	b.n	8002918 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80028d4:	f7ff ff22 	bl	800271c <LL_RCC_HSI_IsReady>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d019      	beq.n	8002912 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <LL_RCC_GetUSARTClockFreq+0x84>)
 80028e0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80028e2:	e016      	b.n	8002912 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80028e4:	f7ff ff2c 	bl	8002740 <LL_RCC_LSE_IsReady>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d013      	beq.n	8002916 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 80028ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028f2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80028f4:	e00f      	b.n	8002916 <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80028f6:	f000 f817 	bl	8002928 <RCC_GetSystemClockFreq>
 80028fa:	4603      	mov	r3, r0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 f839 	bl	8002974 <RCC_GetHCLKClockFreq>
 8002902:	4603      	mov	r3, r0
 8002904:	4618      	mov	r0, r3
 8002906:	f000 f84b 	bl	80029a0 <RCC_GetPCLK1ClockFreq>
 800290a:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 800290c:	e004      	b.n	8002918 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 800290e:	bf00      	nop
 8002910:	e002      	b.n	8002918 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002912:	bf00      	nop
 8002914:	e000      	b.n	8002918 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002916:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002918:	68fb      	ldr	r3, [r7, #12]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	007a1200 	.word	0x007a1200

08002928 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002932:	f7ff ff17 	bl	8002764 <LL_RCC_GetSysClkSource>
 8002936:	4603      	mov	r3, r0
 8002938:	2b08      	cmp	r3, #8
 800293a:	d00c      	beq.n	8002956 <RCC_GetSystemClockFreq+0x2e>
 800293c:	2b08      	cmp	r3, #8
 800293e:	d80e      	bhi.n	800295e <RCC_GetSystemClockFreq+0x36>
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <RCC_GetSystemClockFreq+0x22>
 8002944:	2b04      	cmp	r3, #4
 8002946:	d003      	beq.n	8002950 <RCC_GetSystemClockFreq+0x28>
 8002948:	e009      	b.n	800295e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <RCC_GetSystemClockFreq+0x48>)
 800294c:	607b      	str	r3, [r7, #4]
      break;
 800294e:	e009      	b.n	8002964 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002950:	4b07      	ldr	r3, [pc, #28]	; (8002970 <RCC_GetSystemClockFreq+0x48>)
 8002952:	607b      	str	r3, [r7, #4]
      break;
 8002954:	e006      	b.n	8002964 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002956:	f000 f84b 	bl	80029f0 <RCC_PLL_GetFreqDomain_SYS>
 800295a:	6078      	str	r0, [r7, #4]
      break;
 800295c:	e002      	b.n	8002964 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800295e:	4b04      	ldr	r3, [pc, #16]	; (8002970 <RCC_GetSystemClockFreq+0x48>)
 8002960:	607b      	str	r3, [r7, #4]
      break;
 8002962:	bf00      	nop
  }

  return frequency;
 8002964:	687b      	ldr	r3, [r7, #4]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	007a1200 	.word	0x007a1200

08002974 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800297c:	f7ff ff00 	bl	8002780 <LL_RCC_GetAHBPrescaler>
 8002980:	4603      	mov	r3, r0
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	4a04      	ldr	r2, [pc, #16]	; (800299c <RCC_GetHCLKClockFreq+0x28>)
 800298a:	5cd3      	ldrb	r3, [r2, r3]
 800298c:	461a      	mov	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	40d3      	lsrs	r3, r2
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	08005840 	.word	0x08005840

080029a0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80029a8:	f7ff fef8 	bl	800279c <LL_RCC_GetAPB1Prescaler>
 80029ac:	4603      	mov	r3, r0
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <RCC_GetPCLK1ClockFreq+0x24>)
 80029b2:	5cd3      	ldrb	r3, [r2, r3]
 80029b4:	461a      	mov	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	40d3      	lsrs	r3, r2
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	08005850 	.word	0x08005850

080029c8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80029d0:	f7ff fef2 	bl	80027b8 <LL_RCC_GetAPB2Prescaler>
 80029d4:	4603      	mov	r3, r0
 80029d6:	0adb      	lsrs	r3, r3, #11
 80029d8:	4a04      	ldr	r2, [pc, #16]	; (80029ec <RCC_GetPCLK2ClockFreq+0x24>)
 80029da:	5cd3      	ldrb	r3, [r2, r3]
 80029dc:	461a      	mov	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	40d3      	lsrs	r3, r2
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	08005850 	.word	0x08005850

080029f0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80029fe:	f7ff feff 	bl	8002800 <LL_RCC_PLL_GetMainSource>
 8002a02:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d004      	beq.n	8002a14 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a10:	d003      	beq.n	8002a1a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002a12:	e005      	b.n	8002a20 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002a14:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002a16:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002a18:	e005      	b.n	8002a26 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002a1c:	60fb      	str	r3, [r7, #12]
      break;
 8002a1e:	e002      	b.n	8002a26 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8002a20:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002a22:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002a24:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002a26:	f7ff ff07 	bl	8002838 <LL_RCC_PLL_GetPrediv>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	fbb2 f4f3 	udiv	r4, r2, r3
 8002a34:	f7ff fef2 	bl	800281c <LL_RCC_PLL_GetMultiplicator>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a3e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a42:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	fa92 f2a2 	rbit	r2, r2
 8002a4a:	603a      	str	r2, [r7, #0]
  return result;
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	fab2 f282 	clz	r2, r2
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	40d3      	lsrs	r3, r2
 8002a56:	3302      	adds	r3, #2
 8002a58:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd90      	pop	{r4, r7, pc}
 8002a64:	003d0900 	.word	0x003d0900
 8002a68:	007a1200 	.word	0x007a1200

08002a6c <LL_USART_IsEnabled>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <LL_USART_IsEnabled+0x18>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <LL_USART_IsEnabled+0x1a>
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <LL_USART_SetStopBitsLength>:
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	605a      	str	r2, [r3, #4]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_USART_SetHWFlowCtrl>:
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	609a      	str	r2, [r3, #8]
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <LL_USART_SetBaudRate>:
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b087      	sub	sp, #28
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002af2:	d11a      	bne.n	8002b2a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	005a      	lsls	r2, r3, #1
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	085b      	lsrs	r3, r3, #1
 8002afc:	441a      	add	r2, r3
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	085b      	lsrs	r3, r3, #1
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	60da      	str	r2, [r3, #12]
}
 8002b28:	e00a      	b.n	8002b40 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	085a      	lsrs	r2, r3, #1
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	441a      	add	r2, r3
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	60da      	str	r2, [r3, #12]
}
 8002b40:	bf00      	nop
 8002b42:	371c      	adds	r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ff84 	bl	8002a6c <LL_USART_IsEnabled>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d14e      	bne.n	8002c08 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4b29      	ldr	r3, [pc, #164]	; (8002c14 <LL_USART_Init+0xc8>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	6851      	ldr	r1, [r2, #4]
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	68d2      	ldr	r2, [r2, #12]
 8002b7a:	4311      	orrs	r1, r2
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	6912      	ldr	r2, [r2, #16]
 8002b80:	4311      	orrs	r1, r2
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	6992      	ldr	r2, [r2, #24]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	4619      	mov	r1, r3
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff ff7c 	bl	8002a92 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff ff89 	bl	8002ab8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a1b      	ldr	r2, [pc, #108]	; (8002c18 <LL_USART_Init+0xcc>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d104      	bne.n	8002bb8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f7ff fe76 	bl	80028a0 <LL_RCC_GetUSARTClockFreq>
 8002bb4:	61b8      	str	r0, [r7, #24]
 8002bb6:	e016      	b.n	8002be6 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <LL_USART_Init+0xd0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d107      	bne.n	8002bd0 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002bc0:	f107 0308 	add.w	r3, r7, #8
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fe45 	bl	8002854 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	e00a      	b.n	8002be6 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a13      	ldr	r2, [pc, #76]	; (8002c20 <LL_USART_Init+0xd4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d106      	bne.n	8002be6 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002bd8:	f107 0308 	add.w	r3, r7, #8
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fe39 	bl	8002854 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00d      	beq.n	8002c08 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d009      	beq.n	8002c08 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	699a      	ldr	r2, [r3, #24]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	69b9      	ldr	r1, [r7, #24]
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff ff6b 	bl	8002ade <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002c08:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	efff69f3 	.word	0xefff69f3
 8002c18:	40013800 	.word	0x40013800
 8002c1c:	40004400 	.word	0x40004400
 8002c20:	40004800 	.word	0x40004800

08002c24 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c36:	4a07      	ldr	r2, [pc, #28]	; (8002c54 <LL_InitTick+0x30>)
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <LL_InitTick+0x30>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c42:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <LL_InitTick+0x30>)
 8002c44:	2205      	movs	r2, #5
 8002c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	e000e010 	.word	0xe000e010

08002c58 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002c60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff ffdd 	bl	8002c24 <LL_InitTick>
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <LL_mDelay+0x48>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002c82:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8a:	d00c      	beq.n	8002ca6 <LL_mDelay+0x32>
  {
    Delay++;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002c92:	e008      	b.n	8002ca6 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002c94:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <LL_mDelay+0x48>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <LL_mDelay+0x32>
    {
      Delay--;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1f3      	bne.n	8002c94 <LL_mDelay+0x20>
    }
  }
}
 8002cac:	bf00      	nop
 8002cae:	bf00      	nop
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	e000e010 	.word	0xe000e010

08002cc0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002cc8:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <LL_SetSystemCoreClock+0x1c>)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6013      	str	r3, [r2, #0]
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	2000000c 	.word	0x2000000c

08002ce0 <gcvt>:
 8002ce0:	b530      	push	{r4, r5, lr}
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	b085      	sub	sp, #20
 8002ce6:	460c      	mov	r4, r1
 8002ce8:	4605      	mov	r5, r0
 8002cea:	2300      	movs	r3, #0
 8002cec:	ec51 0b10 	vmov	r0, r1, d0
 8002cf0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002cf4:	f7fd fef2 	bl	8000adc <__aeabi_dcmplt>
 8002cf8:	ed9d 0b02 	vldr	d0, [sp, #8]
 8002cfc:	4622      	mov	r2, r4
 8002cfe:	b118      	cbz	r0, 8002d08 <gcvt+0x28>
 8002d00:	232d      	movs	r3, #45	; 0x2d
 8002d02:	f802 3b01 	strb.w	r3, [r2], #1
 8002d06:	3d01      	subs	r5, #1
 8002d08:	2300      	movs	r3, #0
 8002d0a:	4806      	ldr	r0, [pc, #24]	; (8002d24 <gcvt+0x44>)
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	4629      	mov	r1, r5
 8002d10:	2367      	movs	r3, #103	; 0x67
 8002d12:	6800      	ldr	r0, [r0, #0]
 8002d14:	f000 f8e0 	bl	8002ed8 <_gcvt>
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	bf14      	ite	ne
 8002d1c:	4620      	movne	r0, r4
 8002d1e:	2000      	moveq	r0, #0
 8002d20:	b005      	add	sp, #20
 8002d22:	bd30      	pop	{r4, r5, pc}
 8002d24:	20000010 	.word	0x20000010

08002d28 <__errno>:
 8002d28:	4b01      	ldr	r3, [pc, #4]	; (8002d30 <__errno+0x8>)
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20000010 	.word	0x20000010

08002d34 <__libc_init_array>:
 8002d34:	b570      	push	{r4, r5, r6, lr}
 8002d36:	4d0d      	ldr	r5, [pc, #52]	; (8002d6c <__libc_init_array+0x38>)
 8002d38:	4c0d      	ldr	r4, [pc, #52]	; (8002d70 <__libc_init_array+0x3c>)
 8002d3a:	1b64      	subs	r4, r4, r5
 8002d3c:	10a4      	asrs	r4, r4, #2
 8002d3e:	2600      	movs	r6, #0
 8002d40:	42a6      	cmp	r6, r4
 8002d42:	d109      	bne.n	8002d58 <__libc_init_array+0x24>
 8002d44:	4d0b      	ldr	r5, [pc, #44]	; (8002d74 <__libc_init_array+0x40>)
 8002d46:	4c0c      	ldr	r4, [pc, #48]	; (8002d78 <__libc_init_array+0x44>)
 8002d48:	f002 fd28 	bl	800579c <_init>
 8002d4c:	1b64      	subs	r4, r4, r5
 8002d4e:	10a4      	asrs	r4, r4, #2
 8002d50:	2600      	movs	r6, #0
 8002d52:	42a6      	cmp	r6, r4
 8002d54:	d105      	bne.n	8002d62 <__libc_init_array+0x2e>
 8002d56:	bd70      	pop	{r4, r5, r6, pc}
 8002d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d5c:	4798      	blx	r3
 8002d5e:	3601      	adds	r6, #1
 8002d60:	e7ee      	b.n	8002d40 <__libc_init_array+0xc>
 8002d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d66:	4798      	blx	r3
 8002d68:	3601      	adds	r6, #1
 8002d6a:	e7f2      	b.n	8002d52 <__libc_init_array+0x1e>
 8002d6c:	08005b2c 	.word	0x08005b2c
 8002d70:	08005b2c 	.word	0x08005b2c
 8002d74:	08005b2c 	.word	0x08005b2c
 8002d78:	08005b30 	.word	0x08005b30

08002d7c <memset>:
 8002d7c:	4402      	add	r2, r0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d100      	bne.n	8002d86 <memset+0xa>
 8002d84:	4770      	bx	lr
 8002d86:	f803 1b01 	strb.w	r1, [r3], #1
 8002d8a:	e7f9      	b.n	8002d80 <memset+0x4>

08002d8c <siprintf>:
 8002d8c:	b40e      	push	{r1, r2, r3}
 8002d8e:	b500      	push	{lr}
 8002d90:	b09c      	sub	sp, #112	; 0x70
 8002d92:	ab1d      	add	r3, sp, #116	; 0x74
 8002d94:	9002      	str	r0, [sp, #8]
 8002d96:	9006      	str	r0, [sp, #24]
 8002d98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d9c:	4809      	ldr	r0, [pc, #36]	; (8002dc4 <siprintf+0x38>)
 8002d9e:	9107      	str	r1, [sp, #28]
 8002da0:	9104      	str	r1, [sp, #16]
 8002da2:	4909      	ldr	r1, [pc, #36]	; (8002dc8 <siprintf+0x3c>)
 8002da4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002da8:	9105      	str	r1, [sp, #20]
 8002daa:	6800      	ldr	r0, [r0, #0]
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	a902      	add	r1, sp, #8
 8002db0:	f000 fdda 	bl	8003968 <_svfiprintf_r>
 8002db4:	9b02      	ldr	r3, [sp, #8]
 8002db6:	2200      	movs	r2, #0
 8002db8:	701a      	strb	r2, [r3, #0]
 8002dba:	b01c      	add	sp, #112	; 0x70
 8002dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002dc0:	b003      	add	sp, #12
 8002dc2:	4770      	bx	lr
 8002dc4:	20000010 	.word	0x20000010
 8002dc8:	ffff0208 	.word	0xffff0208

08002dcc <strcat>:
 8002dcc:	b510      	push	{r4, lr}
 8002dce:	4602      	mov	r2, r0
 8002dd0:	7814      	ldrb	r4, [r2, #0]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	3201      	adds	r2, #1
 8002dd6:	2c00      	cmp	r4, #0
 8002dd8:	d1fa      	bne.n	8002dd0 <strcat+0x4>
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002de0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002de4:	2a00      	cmp	r2, #0
 8002de6:	d1f9      	bne.n	8002ddc <strcat+0x10>
 8002de8:	bd10      	pop	{r4, pc}

08002dea <print_e>:
 8002dea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dec:	b087      	sub	sp, #28
 8002dee:	ec43 2b10 	vmov	d0, r2, r3
 8002df2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002df4:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8002df8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8002dfa:	ab04      	add	r3, sp, #16
 8002dfc:	9301      	str	r3, [sp, #4]
 8002dfe:	ab03      	add	r3, sp, #12
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	1c62      	adds	r2, r4, #1
 8002e04:	ab05      	add	r3, sp, #20
 8002e06:	460f      	mov	r7, r1
 8002e08:	2102      	movs	r1, #2
 8002e0a:	f001 f905 	bl	8004018 <_dtoa_r>
 8002e0e:	9a05      	ldr	r2, [sp, #20]
 8002e10:	f242 730f 	movw	r3, #9999	; 0x270f
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d105      	bne.n	8002e24 <print_e+0x3a>
 8002e18:	4601      	mov	r1, r0
 8002e1a:	4638      	mov	r0, r7
 8002e1c:	f001 f848 	bl	8003eb0 <strcpy>
 8002e20:	b007      	add	sp, #28
 8002e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e24:	463b      	mov	r3, r7
 8002e26:	7801      	ldrb	r1, [r0, #0]
 8002e28:	f803 1b01 	strb.w	r1, [r3], #1
 8002e2c:	2c00      	cmp	r4, #0
 8002e2e:	bfc8      	it	gt
 8002e30:	2501      	movgt	r5, #1
 8002e32:	212e      	movs	r1, #46	; 0x2e
 8002e34:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8002e38:	b10f      	cbz	r7, 8002e3e <print_e+0x54>
 8002e3a:	2c00      	cmp	r4, #0
 8002e3c:	dc37      	bgt.n	8002eae <print_e+0xc4>
 8002e3e:	2e67      	cmp	r6, #103	; 0x67
 8002e40:	d046      	beq.n	8002ed0 <print_e+0xe6>
 8002e42:	2e47      	cmp	r6, #71	; 0x47
 8002e44:	d046      	beq.n	8002ed4 <print_e+0xea>
 8002e46:	212e      	movs	r1, #46	; 0x2e
 8002e48:	2030      	movs	r0, #48	; 0x30
 8002e4a:	2c00      	cmp	r4, #0
 8002e4c:	dc38      	bgt.n	8002ec0 <print_e+0xd6>
 8002e4e:	1e51      	subs	r1, r2, #1
 8002e50:	2900      	cmp	r1, #0
 8002e52:	bfb8      	it	lt
 8002e54:	f1c2 0201 	rsblt	r2, r2, #1
 8002e58:	4618      	mov	r0, r3
 8002e5a:	9105      	str	r1, [sp, #20]
 8002e5c:	bfbc      	itt	lt
 8002e5e:	212d      	movlt	r1, #45	; 0x2d
 8002e60:	9205      	strlt	r2, [sp, #20]
 8002e62:	f800 6b02 	strb.w	r6, [r0], #2
 8002e66:	bfb8      	it	lt
 8002e68:	7059      	strblt	r1, [r3, #1]
 8002e6a:	9905      	ldr	r1, [sp, #20]
 8002e6c:	bfa4      	itt	ge
 8002e6e:	222b      	movge	r2, #43	; 0x2b
 8002e70:	705a      	strbge	r2, [r3, #1]
 8002e72:	2963      	cmp	r1, #99	; 0x63
 8002e74:	dd0b      	ble.n	8002e8e <print_e+0xa4>
 8002e76:	2264      	movs	r2, #100	; 0x64
 8002e78:	fb91 f2f2 	sdiv	r2, r1, r2
 8002e7c:	f102 0430 	add.w	r4, r2, #48	; 0x30
 8002e80:	1cd8      	adds	r0, r3, #3
 8002e82:	709c      	strb	r4, [r3, #2]
 8002e84:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002e88:	fb03 1202 	mla	r2, r3, r2, r1
 8002e8c:	9205      	str	r2, [sp, #20]
 8002e8e:	9a05      	ldr	r2, [sp, #20]
 8002e90:	230a      	movs	r3, #10
 8002e92:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002e9a:	7001      	strb	r1, [r0, #0]
 8002e9c:	f06f 0109 	mvn.w	r1, #9
 8002ea0:	fb01 2303 	mla	r3, r1, r3, r2
 8002ea4:	3330      	adds	r3, #48	; 0x30
 8002ea6:	7043      	strb	r3, [r0, #1]
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	7083      	strb	r3, [r0, #2]
 8002eac:	e7b8      	b.n	8002e20 <print_e+0x36>
 8002eae:	b10d      	cbz	r5, 8002eb4 <print_e+0xca>
 8002eb0:	f803 1b01 	strb.w	r1, [r3], #1
 8002eb4:	7805      	ldrb	r5, [r0, #0]
 8002eb6:	f803 5b01 	strb.w	r5, [r3], #1
 8002eba:	3c01      	subs	r4, #1
 8002ebc:	2500      	movs	r5, #0
 8002ebe:	e7b9      	b.n	8002e34 <print_e+0x4a>
 8002ec0:	b10d      	cbz	r5, 8002ec6 <print_e+0xdc>
 8002ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ec6:	f803 0b01 	strb.w	r0, [r3], #1
 8002eca:	3c01      	subs	r4, #1
 8002ecc:	2500      	movs	r5, #0
 8002ece:	e7bc      	b.n	8002e4a <print_e+0x60>
 8002ed0:	2665      	movs	r6, #101	; 0x65
 8002ed2:	e7bc      	b.n	8002e4e <print_e+0x64>
 8002ed4:	2645      	movs	r6, #69	; 0x45
 8002ed6:	e7ba      	b.n	8002e4e <print_e+0x64>

08002ed8 <_gcvt>:
 8002ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002edc:	ec55 4b10 	vmov	r4, r5, d0
 8002ee0:	b088      	sub	sp, #32
 8002ee2:	4681      	mov	r9, r0
 8002ee4:	4688      	mov	r8, r1
 8002ee6:	4616      	mov	r6, r2
 8002ee8:	469a      	mov	sl, r3
 8002eea:	ee10 0a10 	vmov	r0, s0
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8002ef6:	f7fd fdf1 	bl	8000adc <__aeabi_dcmplt>
 8002efa:	b110      	cbz	r0, 8002f02 <_gcvt+0x2a>
 8002efc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8002f00:	461d      	mov	r5, r3
 8002f02:	2200      	movs	r2, #0
 8002f04:	2300      	movs	r3, #0
 8002f06:	4620      	mov	r0, r4
 8002f08:	4629      	mov	r1, r5
 8002f0a:	f7fd fddd 	bl	8000ac8 <__aeabi_dcmpeq>
 8002f0e:	b138      	cbz	r0, 8002f20 <_gcvt+0x48>
 8002f10:	2330      	movs	r3, #48	; 0x30
 8002f12:	7033      	strb	r3, [r6, #0]
 8002f14:	2300      	movs	r3, #0
 8002f16:	7073      	strb	r3, [r6, #1]
 8002f18:	4630      	mov	r0, r6
 8002f1a:	b008      	add	sp, #32
 8002f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f20:	a34b      	add	r3, pc, #300	; (adr r3, 8003050 <_gcvt+0x178>)
 8002f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f26:	4620      	mov	r0, r4
 8002f28:	4629      	mov	r1, r5
 8002f2a:	f7fd fde1 	bl	8000af0 <__aeabi_dcmple>
 8002f2e:	b158      	cbz	r0, 8002f48 <_gcvt+0x70>
 8002f30:	f108 31ff 	add.w	r1, r8, #4294967295
 8002f34:	9100      	str	r1, [sp, #0]
 8002f36:	e9cd a701 	strd	sl, r7, [sp, #4]
 8002f3a:	4622      	mov	r2, r4
 8002f3c:	462b      	mov	r3, r5
 8002f3e:	4631      	mov	r1, r6
 8002f40:	4648      	mov	r0, r9
 8002f42:	f7ff ff52 	bl	8002dea <print_e>
 8002f46:	e7e7      	b.n	8002f18 <_gcvt+0x40>
 8002f48:	4640      	mov	r0, r8
 8002f4a:	f000 fc03 	bl	8003754 <_mprec_log10>
 8002f4e:	4622      	mov	r2, r4
 8002f50:	ec51 0b10 	vmov	r0, r1, d0
 8002f54:	462b      	mov	r3, r5
 8002f56:	f7fd fdcb 	bl	8000af0 <__aeabi_dcmple>
 8002f5a:	2800      	cmp	r0, #0
 8002f5c:	d1e8      	bne.n	8002f30 <_gcvt+0x58>
 8002f5e:	ab07      	add	r3, sp, #28
 8002f60:	9301      	str	r3, [sp, #4]
 8002f62:	ab06      	add	r3, sp, #24
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	4642      	mov	r2, r8
 8002f68:	ab05      	add	r3, sp, #20
 8002f6a:	ec45 4b10 	vmov	d0, r4, r5
 8002f6e:	2102      	movs	r1, #2
 8002f70:	4648      	mov	r0, r9
 8002f72:	f001 f851 	bl	8004018 <_dtoa_r>
 8002f76:	9a05      	ldr	r2, [sp, #20]
 8002f78:	f242 730f 	movw	r3, #9999	; 0x270f
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d00e      	beq.n	8002f9e <_gcvt+0xc6>
 8002f80:	4633      	mov	r3, r6
 8002f82:	44b0      	add	r8, r6
 8002f84:	4604      	mov	r4, r0
 8002f86:	f810 5b01 	ldrb.w	r5, [r0], #1
 8002f8a:	9905      	ldr	r1, [sp, #20]
 8002f8c:	eba8 0203 	sub.w	r2, r8, r3
 8002f90:	b10d      	cbz	r5, 8002f96 <_gcvt+0xbe>
 8002f92:	2900      	cmp	r1, #0
 8002f94:	dc08      	bgt.n	8002fa8 <_gcvt+0xd0>
 8002f96:	2000      	movs	r0, #0
 8002f98:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8002f9c:	e00d      	b.n	8002fba <_gcvt+0xe2>
 8002f9e:	4601      	mov	r1, r0
 8002fa0:	4630      	mov	r0, r6
 8002fa2:	f000 ff85 	bl	8003eb0 <strcpy>
 8002fa6:	e7b7      	b.n	8002f18 <_gcvt+0x40>
 8002fa8:	3901      	subs	r1, #1
 8002faa:	f803 5b01 	strb.w	r5, [r3], #1
 8002fae:	9105      	str	r1, [sp, #20]
 8002fb0:	e7e8      	b.n	8002f84 <_gcvt+0xac>
 8002fb2:	f803 cb01 	strb.w	ip, [r3], #1
 8002fb6:	3a01      	subs	r2, #1
 8002fb8:	2001      	movs	r0, #1
 8002fba:	2900      	cmp	r1, #0
 8002fbc:	460d      	mov	r5, r1
 8002fbe:	dc2a      	bgt.n	8003016 <_gcvt+0x13e>
 8002fc0:	b100      	cbz	r0, 8002fc4 <_gcvt+0xec>
 8002fc2:	9105      	str	r1, [sp, #20]
 8002fc4:	b90f      	cbnz	r7, 8002fca <_gcvt+0xf2>
 8002fc6:	7821      	ldrb	r1, [r4, #0]
 8002fc8:	b311      	cbz	r1, 8003010 <_gcvt+0x138>
 8002fca:	42b3      	cmp	r3, r6
 8002fcc:	bf04      	itt	eq
 8002fce:	2130      	moveq	r1, #48	; 0x30
 8002fd0:	f803 1b01 	strbeq.w	r1, [r3], #1
 8002fd4:	212e      	movs	r1, #46	; 0x2e
 8002fd6:	7019      	strb	r1, [r3, #0]
 8002fd8:	9905      	ldr	r1, [sp, #20]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	2500      	movs	r5, #0
 8002fde:	eba1 0c03 	sub.w	ip, r1, r3
 8002fe2:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8002fe6:	eb1c 0f00 	cmn.w	ip, r0
 8002fea:	d41c      	bmi.n	8003026 <_gcvt+0x14e>
 8002fec:	2900      	cmp	r1, #0
 8002fee:	f1c1 0000 	rsb	r0, r1, #0
 8002ff2:	bfc8      	it	gt
 8002ff4:	2000      	movgt	r0, #0
 8002ff6:	f100 0c01 	add.w	ip, r0, #1
 8002ffa:	4463      	add	r3, ip
 8002ffc:	4401      	add	r1, r0
 8002ffe:	b105      	cbz	r5, 8003002 <_gcvt+0x12a>
 8003000:	9105      	str	r1, [sp, #20]
 8003002:	1e61      	subs	r1, r4, #1
 8003004:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8003008:	b108      	cbz	r0, 800300e <_gcvt+0x136>
 800300a:	2a00      	cmp	r2, #0
 800300c:	dc0f      	bgt.n	800302e <_gcvt+0x156>
 800300e:	b9df      	cbnz	r7, 8003048 <_gcvt+0x170>
 8003010:	2200      	movs	r2, #0
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	e780      	b.n	8002f18 <_gcvt+0x40>
 8003016:	2a00      	cmp	r2, #0
 8003018:	f101 31ff 	add.w	r1, r1, #4294967295
 800301c:	dcc9      	bgt.n	8002fb2 <_gcvt+0xda>
 800301e:	2800      	cmp	r0, #0
 8003020:	d0d0      	beq.n	8002fc4 <_gcvt+0xec>
 8003022:	9505      	str	r5, [sp, #20]
 8003024:	e7ce      	b.n	8002fc4 <_gcvt+0xec>
 8003026:	f800 ef01 	strb.w	lr, [r0, #1]!
 800302a:	2501      	movs	r5, #1
 800302c:	e7db      	b.n	8002fe6 <_gcvt+0x10e>
 800302e:	f803 0b01 	strb.w	r0, [r3], #1
 8003032:	3a01      	subs	r2, #1
 8003034:	e7e6      	b.n	8003004 <_gcvt+0x12c>
 8003036:	f801 5b01 	strb.w	r5, [r1], #1
 800303a:	1a60      	subs	r0, r4, r1
 800303c:	2800      	cmp	r0, #0
 800303e:	dcfa      	bgt.n	8003036 <_gcvt+0x15e>
 8003040:	2a00      	cmp	r2, #0
 8003042:	bfa8      	it	ge
 8003044:	189b      	addge	r3, r3, r2
 8003046:	e7e3      	b.n	8003010 <_gcvt+0x138>
 8003048:	4619      	mov	r1, r3
 800304a:	189c      	adds	r4, r3, r2
 800304c:	2530      	movs	r5, #48	; 0x30
 800304e:	e7f4      	b.n	800303a <_gcvt+0x162>
 8003050:	eb1c432d 	.word	0xeb1c432d
 8003054:	3f1a36e2 	.word	0x3f1a36e2

08003058 <_Balloc>:
 8003058:	b570      	push	{r4, r5, r6, lr}
 800305a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800305c:	4604      	mov	r4, r0
 800305e:	460d      	mov	r5, r1
 8003060:	b976      	cbnz	r6, 8003080 <_Balloc+0x28>
 8003062:	2010      	movs	r0, #16
 8003064:	f001 fdd6 	bl	8004c14 <malloc>
 8003068:	4602      	mov	r2, r0
 800306a:	6260      	str	r0, [r4, #36]	; 0x24
 800306c:	b920      	cbnz	r0, 8003078 <_Balloc+0x20>
 800306e:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <_Balloc+0x78>)
 8003070:	4818      	ldr	r0, [pc, #96]	; (80030d4 <_Balloc+0x7c>)
 8003072:	2166      	movs	r1, #102	; 0x66
 8003074:	f000 ff24 	bl	8003ec0 <__assert_func>
 8003078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800307c:	6006      	str	r6, [r0, #0]
 800307e:	60c6      	str	r6, [r0, #12]
 8003080:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003082:	68f3      	ldr	r3, [r6, #12]
 8003084:	b183      	cbz	r3, 80030a8 <_Balloc+0x50>
 8003086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800308e:	b9b8      	cbnz	r0, 80030c0 <_Balloc+0x68>
 8003090:	2101      	movs	r1, #1
 8003092:	fa01 f605 	lsl.w	r6, r1, r5
 8003096:	1d72      	adds	r2, r6, #5
 8003098:	0092      	lsls	r2, r2, #2
 800309a:	4620      	mov	r0, r4
 800309c:	f000 fb78 	bl	8003790 <_calloc_r>
 80030a0:	b160      	cbz	r0, 80030bc <_Balloc+0x64>
 80030a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80030a6:	e00e      	b.n	80030c6 <_Balloc+0x6e>
 80030a8:	2221      	movs	r2, #33	; 0x21
 80030aa:	2104      	movs	r1, #4
 80030ac:	4620      	mov	r0, r4
 80030ae:	f000 fb6f 	bl	8003790 <_calloc_r>
 80030b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030b4:	60f0      	str	r0, [r6, #12]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e4      	bne.n	8003086 <_Balloc+0x2e>
 80030bc:	2000      	movs	r0, #0
 80030be:	bd70      	pop	{r4, r5, r6, pc}
 80030c0:	6802      	ldr	r2, [r0, #0]
 80030c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80030c6:	2300      	movs	r3, #0
 80030c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80030cc:	e7f7      	b.n	80030be <_Balloc+0x66>
 80030ce:	bf00      	nop
 80030d0:	08005864 	.word	0x08005864
 80030d4:	0800587b 	.word	0x0800587b

080030d8 <_Bfree>:
 80030d8:	b570      	push	{r4, r5, r6, lr}
 80030da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80030dc:	4605      	mov	r5, r0
 80030de:	460c      	mov	r4, r1
 80030e0:	b976      	cbnz	r6, 8003100 <_Bfree+0x28>
 80030e2:	2010      	movs	r0, #16
 80030e4:	f001 fd96 	bl	8004c14 <malloc>
 80030e8:	4602      	mov	r2, r0
 80030ea:	6268      	str	r0, [r5, #36]	; 0x24
 80030ec:	b920      	cbnz	r0, 80030f8 <_Bfree+0x20>
 80030ee:	4b09      	ldr	r3, [pc, #36]	; (8003114 <_Bfree+0x3c>)
 80030f0:	4809      	ldr	r0, [pc, #36]	; (8003118 <_Bfree+0x40>)
 80030f2:	218a      	movs	r1, #138	; 0x8a
 80030f4:	f000 fee4 	bl	8003ec0 <__assert_func>
 80030f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80030fc:	6006      	str	r6, [r0, #0]
 80030fe:	60c6      	str	r6, [r0, #12]
 8003100:	b13c      	cbz	r4, 8003112 <_Bfree+0x3a>
 8003102:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003104:	6862      	ldr	r2, [r4, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800310c:	6021      	str	r1, [r4, #0]
 800310e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003112:	bd70      	pop	{r4, r5, r6, pc}
 8003114:	08005864 	.word	0x08005864
 8003118:	0800587b 	.word	0x0800587b

0800311c <__multadd>:
 800311c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003120:	690e      	ldr	r6, [r1, #16]
 8003122:	4607      	mov	r7, r0
 8003124:	4698      	mov	r8, r3
 8003126:	460c      	mov	r4, r1
 8003128:	f101 0014 	add.w	r0, r1, #20
 800312c:	2300      	movs	r3, #0
 800312e:	6805      	ldr	r5, [r0, #0]
 8003130:	b2a9      	uxth	r1, r5
 8003132:	fb02 8101 	mla	r1, r2, r1, r8
 8003136:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800313a:	0c2d      	lsrs	r5, r5, #16
 800313c:	fb02 c505 	mla	r5, r2, r5, ip
 8003140:	b289      	uxth	r1, r1
 8003142:	3301      	adds	r3, #1
 8003144:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8003148:	429e      	cmp	r6, r3
 800314a:	f840 1b04 	str.w	r1, [r0], #4
 800314e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8003152:	dcec      	bgt.n	800312e <__multadd+0x12>
 8003154:	f1b8 0f00 	cmp.w	r8, #0
 8003158:	d022      	beq.n	80031a0 <__multadd+0x84>
 800315a:	68a3      	ldr	r3, [r4, #8]
 800315c:	42b3      	cmp	r3, r6
 800315e:	dc19      	bgt.n	8003194 <__multadd+0x78>
 8003160:	6861      	ldr	r1, [r4, #4]
 8003162:	4638      	mov	r0, r7
 8003164:	3101      	adds	r1, #1
 8003166:	f7ff ff77 	bl	8003058 <_Balloc>
 800316a:	4605      	mov	r5, r0
 800316c:	b928      	cbnz	r0, 800317a <__multadd+0x5e>
 800316e:	4602      	mov	r2, r0
 8003170:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <__multadd+0x8c>)
 8003172:	480e      	ldr	r0, [pc, #56]	; (80031ac <__multadd+0x90>)
 8003174:	21b5      	movs	r1, #181	; 0xb5
 8003176:	f000 fea3 	bl	8003ec0 <__assert_func>
 800317a:	6922      	ldr	r2, [r4, #16]
 800317c:	3202      	adds	r2, #2
 800317e:	f104 010c 	add.w	r1, r4, #12
 8003182:	0092      	lsls	r2, r2, #2
 8003184:	300c      	adds	r0, #12
 8003186:	f001 fd4d 	bl	8004c24 <memcpy>
 800318a:	4621      	mov	r1, r4
 800318c:	4638      	mov	r0, r7
 800318e:	f7ff ffa3 	bl	80030d8 <_Bfree>
 8003192:	462c      	mov	r4, r5
 8003194:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8003198:	3601      	adds	r6, #1
 800319a:	f8c3 8014 	str.w	r8, [r3, #20]
 800319e:	6126      	str	r6, [r4, #16]
 80031a0:	4620      	mov	r0, r4
 80031a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031a6:	bf00      	nop
 80031a8:	080058db 	.word	0x080058db
 80031ac:	0800587b 	.word	0x0800587b

080031b0 <__hi0bits>:
 80031b0:	0c03      	lsrs	r3, r0, #16
 80031b2:	041b      	lsls	r3, r3, #16
 80031b4:	b9d3      	cbnz	r3, 80031ec <__hi0bits+0x3c>
 80031b6:	0400      	lsls	r0, r0, #16
 80031b8:	2310      	movs	r3, #16
 80031ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80031be:	bf04      	itt	eq
 80031c0:	0200      	lsleq	r0, r0, #8
 80031c2:	3308      	addeq	r3, #8
 80031c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80031c8:	bf04      	itt	eq
 80031ca:	0100      	lsleq	r0, r0, #4
 80031cc:	3304      	addeq	r3, #4
 80031ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80031d2:	bf04      	itt	eq
 80031d4:	0080      	lsleq	r0, r0, #2
 80031d6:	3302      	addeq	r3, #2
 80031d8:	2800      	cmp	r0, #0
 80031da:	db05      	blt.n	80031e8 <__hi0bits+0x38>
 80031dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80031e0:	f103 0301 	add.w	r3, r3, #1
 80031e4:	bf08      	it	eq
 80031e6:	2320      	moveq	r3, #32
 80031e8:	4618      	mov	r0, r3
 80031ea:	4770      	bx	lr
 80031ec:	2300      	movs	r3, #0
 80031ee:	e7e4      	b.n	80031ba <__hi0bits+0xa>

080031f0 <__lo0bits>:
 80031f0:	6803      	ldr	r3, [r0, #0]
 80031f2:	f013 0207 	ands.w	r2, r3, #7
 80031f6:	4601      	mov	r1, r0
 80031f8:	d00b      	beq.n	8003212 <__lo0bits+0x22>
 80031fa:	07da      	lsls	r2, r3, #31
 80031fc:	d424      	bmi.n	8003248 <__lo0bits+0x58>
 80031fe:	0798      	lsls	r0, r3, #30
 8003200:	bf49      	itett	mi
 8003202:	085b      	lsrmi	r3, r3, #1
 8003204:	089b      	lsrpl	r3, r3, #2
 8003206:	2001      	movmi	r0, #1
 8003208:	600b      	strmi	r3, [r1, #0]
 800320a:	bf5c      	itt	pl
 800320c:	600b      	strpl	r3, [r1, #0]
 800320e:	2002      	movpl	r0, #2
 8003210:	4770      	bx	lr
 8003212:	b298      	uxth	r0, r3
 8003214:	b9b0      	cbnz	r0, 8003244 <__lo0bits+0x54>
 8003216:	0c1b      	lsrs	r3, r3, #16
 8003218:	2010      	movs	r0, #16
 800321a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800321e:	bf04      	itt	eq
 8003220:	0a1b      	lsreq	r3, r3, #8
 8003222:	3008      	addeq	r0, #8
 8003224:	071a      	lsls	r2, r3, #28
 8003226:	bf04      	itt	eq
 8003228:	091b      	lsreq	r3, r3, #4
 800322a:	3004      	addeq	r0, #4
 800322c:	079a      	lsls	r2, r3, #30
 800322e:	bf04      	itt	eq
 8003230:	089b      	lsreq	r3, r3, #2
 8003232:	3002      	addeq	r0, #2
 8003234:	07da      	lsls	r2, r3, #31
 8003236:	d403      	bmi.n	8003240 <__lo0bits+0x50>
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	f100 0001 	add.w	r0, r0, #1
 800323e:	d005      	beq.n	800324c <__lo0bits+0x5c>
 8003240:	600b      	str	r3, [r1, #0]
 8003242:	4770      	bx	lr
 8003244:	4610      	mov	r0, r2
 8003246:	e7e8      	b.n	800321a <__lo0bits+0x2a>
 8003248:	2000      	movs	r0, #0
 800324a:	4770      	bx	lr
 800324c:	2020      	movs	r0, #32
 800324e:	4770      	bx	lr

08003250 <__i2b>:
 8003250:	b510      	push	{r4, lr}
 8003252:	460c      	mov	r4, r1
 8003254:	2101      	movs	r1, #1
 8003256:	f7ff feff 	bl	8003058 <_Balloc>
 800325a:	4602      	mov	r2, r0
 800325c:	b928      	cbnz	r0, 800326a <__i2b+0x1a>
 800325e:	4b05      	ldr	r3, [pc, #20]	; (8003274 <__i2b+0x24>)
 8003260:	4805      	ldr	r0, [pc, #20]	; (8003278 <__i2b+0x28>)
 8003262:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003266:	f000 fe2b 	bl	8003ec0 <__assert_func>
 800326a:	2301      	movs	r3, #1
 800326c:	6144      	str	r4, [r0, #20]
 800326e:	6103      	str	r3, [r0, #16]
 8003270:	bd10      	pop	{r4, pc}
 8003272:	bf00      	nop
 8003274:	080058db 	.word	0x080058db
 8003278:	0800587b 	.word	0x0800587b

0800327c <__multiply>:
 800327c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003280:	4614      	mov	r4, r2
 8003282:	690a      	ldr	r2, [r1, #16]
 8003284:	6923      	ldr	r3, [r4, #16]
 8003286:	429a      	cmp	r2, r3
 8003288:	bfb8      	it	lt
 800328a:	460b      	movlt	r3, r1
 800328c:	460d      	mov	r5, r1
 800328e:	bfbc      	itt	lt
 8003290:	4625      	movlt	r5, r4
 8003292:	461c      	movlt	r4, r3
 8003294:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8003298:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800329c:	68ab      	ldr	r3, [r5, #8]
 800329e:	6869      	ldr	r1, [r5, #4]
 80032a0:	eb0a 0709 	add.w	r7, sl, r9
 80032a4:	42bb      	cmp	r3, r7
 80032a6:	b085      	sub	sp, #20
 80032a8:	bfb8      	it	lt
 80032aa:	3101      	addlt	r1, #1
 80032ac:	f7ff fed4 	bl	8003058 <_Balloc>
 80032b0:	b930      	cbnz	r0, 80032c0 <__multiply+0x44>
 80032b2:	4602      	mov	r2, r0
 80032b4:	4b42      	ldr	r3, [pc, #264]	; (80033c0 <__multiply+0x144>)
 80032b6:	4843      	ldr	r0, [pc, #268]	; (80033c4 <__multiply+0x148>)
 80032b8:	f240 115d 	movw	r1, #349	; 0x15d
 80032bc:	f000 fe00 	bl	8003ec0 <__assert_func>
 80032c0:	f100 0614 	add.w	r6, r0, #20
 80032c4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80032c8:	4633      	mov	r3, r6
 80032ca:	2200      	movs	r2, #0
 80032cc:	4543      	cmp	r3, r8
 80032ce:	d31e      	bcc.n	800330e <__multiply+0x92>
 80032d0:	f105 0c14 	add.w	ip, r5, #20
 80032d4:	f104 0314 	add.w	r3, r4, #20
 80032d8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80032dc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80032e0:	9202      	str	r2, [sp, #8]
 80032e2:	ebac 0205 	sub.w	r2, ip, r5
 80032e6:	3a15      	subs	r2, #21
 80032e8:	f022 0203 	bic.w	r2, r2, #3
 80032ec:	3204      	adds	r2, #4
 80032ee:	f105 0115 	add.w	r1, r5, #21
 80032f2:	458c      	cmp	ip, r1
 80032f4:	bf38      	it	cc
 80032f6:	2204      	movcc	r2, #4
 80032f8:	9201      	str	r2, [sp, #4]
 80032fa:	9a02      	ldr	r2, [sp, #8]
 80032fc:	9303      	str	r3, [sp, #12]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d808      	bhi.n	8003314 <__multiply+0x98>
 8003302:	2f00      	cmp	r7, #0
 8003304:	dc55      	bgt.n	80033b2 <__multiply+0x136>
 8003306:	6107      	str	r7, [r0, #16]
 8003308:	b005      	add	sp, #20
 800330a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800330e:	f843 2b04 	str.w	r2, [r3], #4
 8003312:	e7db      	b.n	80032cc <__multiply+0x50>
 8003314:	f8b3 a000 	ldrh.w	sl, [r3]
 8003318:	f1ba 0f00 	cmp.w	sl, #0
 800331c:	d020      	beq.n	8003360 <__multiply+0xe4>
 800331e:	f105 0e14 	add.w	lr, r5, #20
 8003322:	46b1      	mov	r9, r6
 8003324:	2200      	movs	r2, #0
 8003326:	f85e 4b04 	ldr.w	r4, [lr], #4
 800332a:	f8d9 b000 	ldr.w	fp, [r9]
 800332e:	b2a1      	uxth	r1, r4
 8003330:	fa1f fb8b 	uxth.w	fp, fp
 8003334:	fb0a b101 	mla	r1, sl, r1, fp
 8003338:	4411      	add	r1, r2
 800333a:	f8d9 2000 	ldr.w	r2, [r9]
 800333e:	0c24      	lsrs	r4, r4, #16
 8003340:	0c12      	lsrs	r2, r2, #16
 8003342:	fb0a 2404 	mla	r4, sl, r4, r2
 8003346:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800334a:	b289      	uxth	r1, r1
 800334c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8003350:	45f4      	cmp	ip, lr
 8003352:	f849 1b04 	str.w	r1, [r9], #4
 8003356:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800335a:	d8e4      	bhi.n	8003326 <__multiply+0xaa>
 800335c:	9901      	ldr	r1, [sp, #4]
 800335e:	5072      	str	r2, [r6, r1]
 8003360:	9a03      	ldr	r2, [sp, #12]
 8003362:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003366:	3304      	adds	r3, #4
 8003368:	f1b9 0f00 	cmp.w	r9, #0
 800336c:	d01f      	beq.n	80033ae <__multiply+0x132>
 800336e:	6834      	ldr	r4, [r6, #0]
 8003370:	f105 0114 	add.w	r1, r5, #20
 8003374:	46b6      	mov	lr, r6
 8003376:	f04f 0a00 	mov.w	sl, #0
 800337a:	880a      	ldrh	r2, [r1, #0]
 800337c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8003380:	fb09 b202 	mla	r2, r9, r2, fp
 8003384:	4492      	add	sl, r2
 8003386:	b2a4      	uxth	r4, r4
 8003388:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800338c:	f84e 4b04 	str.w	r4, [lr], #4
 8003390:	f851 4b04 	ldr.w	r4, [r1], #4
 8003394:	f8be 2000 	ldrh.w	r2, [lr]
 8003398:	0c24      	lsrs	r4, r4, #16
 800339a:	fb09 2404 	mla	r4, r9, r4, r2
 800339e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80033a2:	458c      	cmp	ip, r1
 80033a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80033a8:	d8e7      	bhi.n	800337a <__multiply+0xfe>
 80033aa:	9a01      	ldr	r2, [sp, #4]
 80033ac:	50b4      	str	r4, [r6, r2]
 80033ae:	3604      	adds	r6, #4
 80033b0:	e7a3      	b.n	80032fa <__multiply+0x7e>
 80033b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1a5      	bne.n	8003306 <__multiply+0x8a>
 80033ba:	3f01      	subs	r7, #1
 80033bc:	e7a1      	b.n	8003302 <__multiply+0x86>
 80033be:	bf00      	nop
 80033c0:	080058db 	.word	0x080058db
 80033c4:	0800587b 	.word	0x0800587b

080033c8 <__pow5mult>:
 80033c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033cc:	4615      	mov	r5, r2
 80033ce:	f012 0203 	ands.w	r2, r2, #3
 80033d2:	4606      	mov	r6, r0
 80033d4:	460f      	mov	r7, r1
 80033d6:	d007      	beq.n	80033e8 <__pow5mult+0x20>
 80033d8:	4c25      	ldr	r4, [pc, #148]	; (8003470 <__pow5mult+0xa8>)
 80033da:	3a01      	subs	r2, #1
 80033dc:	2300      	movs	r3, #0
 80033de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80033e2:	f7ff fe9b 	bl	800311c <__multadd>
 80033e6:	4607      	mov	r7, r0
 80033e8:	10ad      	asrs	r5, r5, #2
 80033ea:	d03d      	beq.n	8003468 <__pow5mult+0xa0>
 80033ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80033ee:	b97c      	cbnz	r4, 8003410 <__pow5mult+0x48>
 80033f0:	2010      	movs	r0, #16
 80033f2:	f001 fc0f 	bl	8004c14 <malloc>
 80033f6:	4602      	mov	r2, r0
 80033f8:	6270      	str	r0, [r6, #36]	; 0x24
 80033fa:	b928      	cbnz	r0, 8003408 <__pow5mult+0x40>
 80033fc:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <__pow5mult+0xac>)
 80033fe:	481e      	ldr	r0, [pc, #120]	; (8003478 <__pow5mult+0xb0>)
 8003400:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003404:	f000 fd5c 	bl	8003ec0 <__assert_func>
 8003408:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800340c:	6004      	str	r4, [r0, #0]
 800340e:	60c4      	str	r4, [r0, #12]
 8003410:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003414:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003418:	b94c      	cbnz	r4, 800342e <__pow5mult+0x66>
 800341a:	f240 2171 	movw	r1, #625	; 0x271
 800341e:	4630      	mov	r0, r6
 8003420:	f7ff ff16 	bl	8003250 <__i2b>
 8003424:	2300      	movs	r3, #0
 8003426:	f8c8 0008 	str.w	r0, [r8, #8]
 800342a:	4604      	mov	r4, r0
 800342c:	6003      	str	r3, [r0, #0]
 800342e:	f04f 0900 	mov.w	r9, #0
 8003432:	07eb      	lsls	r3, r5, #31
 8003434:	d50a      	bpl.n	800344c <__pow5mult+0x84>
 8003436:	4639      	mov	r1, r7
 8003438:	4622      	mov	r2, r4
 800343a:	4630      	mov	r0, r6
 800343c:	f7ff ff1e 	bl	800327c <__multiply>
 8003440:	4639      	mov	r1, r7
 8003442:	4680      	mov	r8, r0
 8003444:	4630      	mov	r0, r6
 8003446:	f7ff fe47 	bl	80030d8 <_Bfree>
 800344a:	4647      	mov	r7, r8
 800344c:	106d      	asrs	r5, r5, #1
 800344e:	d00b      	beq.n	8003468 <__pow5mult+0xa0>
 8003450:	6820      	ldr	r0, [r4, #0]
 8003452:	b938      	cbnz	r0, 8003464 <__pow5mult+0x9c>
 8003454:	4622      	mov	r2, r4
 8003456:	4621      	mov	r1, r4
 8003458:	4630      	mov	r0, r6
 800345a:	f7ff ff0f 	bl	800327c <__multiply>
 800345e:	6020      	str	r0, [r4, #0]
 8003460:	f8c0 9000 	str.w	r9, [r0]
 8003464:	4604      	mov	r4, r0
 8003466:	e7e4      	b.n	8003432 <__pow5mult+0x6a>
 8003468:	4638      	mov	r0, r7
 800346a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800346e:	bf00      	nop
 8003470:	080059e0 	.word	0x080059e0
 8003474:	08005864 	.word	0x08005864
 8003478:	0800587b 	.word	0x0800587b

0800347c <__lshift>:
 800347c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003480:	460c      	mov	r4, r1
 8003482:	6849      	ldr	r1, [r1, #4]
 8003484:	6923      	ldr	r3, [r4, #16]
 8003486:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800348a:	68a3      	ldr	r3, [r4, #8]
 800348c:	4607      	mov	r7, r0
 800348e:	4691      	mov	r9, r2
 8003490:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003494:	f108 0601 	add.w	r6, r8, #1
 8003498:	42b3      	cmp	r3, r6
 800349a:	db0b      	blt.n	80034b4 <__lshift+0x38>
 800349c:	4638      	mov	r0, r7
 800349e:	f7ff fddb 	bl	8003058 <_Balloc>
 80034a2:	4605      	mov	r5, r0
 80034a4:	b948      	cbnz	r0, 80034ba <__lshift+0x3e>
 80034a6:	4602      	mov	r2, r0
 80034a8:	4b28      	ldr	r3, [pc, #160]	; (800354c <__lshift+0xd0>)
 80034aa:	4829      	ldr	r0, [pc, #164]	; (8003550 <__lshift+0xd4>)
 80034ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80034b0:	f000 fd06 	bl	8003ec0 <__assert_func>
 80034b4:	3101      	adds	r1, #1
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	e7ee      	b.n	8003498 <__lshift+0x1c>
 80034ba:	2300      	movs	r3, #0
 80034bc:	f100 0114 	add.w	r1, r0, #20
 80034c0:	f100 0210 	add.w	r2, r0, #16
 80034c4:	4618      	mov	r0, r3
 80034c6:	4553      	cmp	r3, sl
 80034c8:	db33      	blt.n	8003532 <__lshift+0xb6>
 80034ca:	6920      	ldr	r0, [r4, #16]
 80034cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80034d0:	f104 0314 	add.w	r3, r4, #20
 80034d4:	f019 091f 	ands.w	r9, r9, #31
 80034d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80034dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80034e0:	d02b      	beq.n	800353a <__lshift+0xbe>
 80034e2:	f1c9 0e20 	rsb	lr, r9, #32
 80034e6:	468a      	mov	sl, r1
 80034e8:	2200      	movs	r2, #0
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	fa00 f009 	lsl.w	r0, r0, r9
 80034f0:	4302      	orrs	r2, r0
 80034f2:	f84a 2b04 	str.w	r2, [sl], #4
 80034f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80034fa:	459c      	cmp	ip, r3
 80034fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8003500:	d8f3      	bhi.n	80034ea <__lshift+0x6e>
 8003502:	ebac 0304 	sub.w	r3, ip, r4
 8003506:	3b15      	subs	r3, #21
 8003508:	f023 0303 	bic.w	r3, r3, #3
 800350c:	3304      	adds	r3, #4
 800350e:	f104 0015 	add.w	r0, r4, #21
 8003512:	4584      	cmp	ip, r0
 8003514:	bf38      	it	cc
 8003516:	2304      	movcc	r3, #4
 8003518:	50ca      	str	r2, [r1, r3]
 800351a:	b10a      	cbz	r2, 8003520 <__lshift+0xa4>
 800351c:	f108 0602 	add.w	r6, r8, #2
 8003520:	3e01      	subs	r6, #1
 8003522:	4638      	mov	r0, r7
 8003524:	612e      	str	r6, [r5, #16]
 8003526:	4621      	mov	r1, r4
 8003528:	f7ff fdd6 	bl	80030d8 <_Bfree>
 800352c:	4628      	mov	r0, r5
 800352e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003532:	f842 0f04 	str.w	r0, [r2, #4]!
 8003536:	3301      	adds	r3, #1
 8003538:	e7c5      	b.n	80034c6 <__lshift+0x4a>
 800353a:	3904      	subs	r1, #4
 800353c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003540:	f841 2f04 	str.w	r2, [r1, #4]!
 8003544:	459c      	cmp	ip, r3
 8003546:	d8f9      	bhi.n	800353c <__lshift+0xc0>
 8003548:	e7ea      	b.n	8003520 <__lshift+0xa4>
 800354a:	bf00      	nop
 800354c:	080058db 	.word	0x080058db
 8003550:	0800587b 	.word	0x0800587b

08003554 <__mcmp>:
 8003554:	b530      	push	{r4, r5, lr}
 8003556:	6902      	ldr	r2, [r0, #16]
 8003558:	690c      	ldr	r4, [r1, #16]
 800355a:	1b12      	subs	r2, r2, r4
 800355c:	d10e      	bne.n	800357c <__mcmp+0x28>
 800355e:	f100 0314 	add.w	r3, r0, #20
 8003562:	3114      	adds	r1, #20
 8003564:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8003568:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800356c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8003570:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8003574:	42a5      	cmp	r5, r4
 8003576:	d003      	beq.n	8003580 <__mcmp+0x2c>
 8003578:	d305      	bcc.n	8003586 <__mcmp+0x32>
 800357a:	2201      	movs	r2, #1
 800357c:	4610      	mov	r0, r2
 800357e:	bd30      	pop	{r4, r5, pc}
 8003580:	4283      	cmp	r3, r0
 8003582:	d3f3      	bcc.n	800356c <__mcmp+0x18>
 8003584:	e7fa      	b.n	800357c <__mcmp+0x28>
 8003586:	f04f 32ff 	mov.w	r2, #4294967295
 800358a:	e7f7      	b.n	800357c <__mcmp+0x28>

0800358c <__mdiff>:
 800358c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003590:	460c      	mov	r4, r1
 8003592:	4606      	mov	r6, r0
 8003594:	4611      	mov	r1, r2
 8003596:	4620      	mov	r0, r4
 8003598:	4617      	mov	r7, r2
 800359a:	f7ff ffdb 	bl	8003554 <__mcmp>
 800359e:	1e05      	subs	r5, r0, #0
 80035a0:	d110      	bne.n	80035c4 <__mdiff+0x38>
 80035a2:	4629      	mov	r1, r5
 80035a4:	4630      	mov	r0, r6
 80035a6:	f7ff fd57 	bl	8003058 <_Balloc>
 80035aa:	b930      	cbnz	r0, 80035ba <__mdiff+0x2e>
 80035ac:	4b39      	ldr	r3, [pc, #228]	; (8003694 <__mdiff+0x108>)
 80035ae:	4602      	mov	r2, r0
 80035b0:	f240 2132 	movw	r1, #562	; 0x232
 80035b4:	4838      	ldr	r0, [pc, #224]	; (8003698 <__mdiff+0x10c>)
 80035b6:	f000 fc83 	bl	8003ec0 <__assert_func>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80035c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035c4:	bfa4      	itt	ge
 80035c6:	463b      	movge	r3, r7
 80035c8:	4627      	movge	r7, r4
 80035ca:	4630      	mov	r0, r6
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	bfa6      	itte	ge
 80035d0:	461c      	movge	r4, r3
 80035d2:	2500      	movge	r5, #0
 80035d4:	2501      	movlt	r5, #1
 80035d6:	f7ff fd3f 	bl	8003058 <_Balloc>
 80035da:	b920      	cbnz	r0, 80035e6 <__mdiff+0x5a>
 80035dc:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <__mdiff+0x108>)
 80035de:	4602      	mov	r2, r0
 80035e0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80035e4:	e7e6      	b.n	80035b4 <__mdiff+0x28>
 80035e6:	693e      	ldr	r6, [r7, #16]
 80035e8:	60c5      	str	r5, [r0, #12]
 80035ea:	6925      	ldr	r5, [r4, #16]
 80035ec:	f107 0114 	add.w	r1, r7, #20
 80035f0:	f104 0914 	add.w	r9, r4, #20
 80035f4:	f100 0e14 	add.w	lr, r0, #20
 80035f8:	f107 0210 	add.w	r2, r7, #16
 80035fc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8003600:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8003604:	46f2      	mov	sl, lr
 8003606:	2700      	movs	r7, #0
 8003608:	f859 3b04 	ldr.w	r3, [r9], #4
 800360c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8003610:	fa1f f883 	uxth.w	r8, r3
 8003614:	fa17 f78b 	uxtah	r7, r7, fp
 8003618:	0c1b      	lsrs	r3, r3, #16
 800361a:	eba7 0808 	sub.w	r8, r7, r8
 800361e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003622:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8003626:	fa1f f888 	uxth.w	r8, r8
 800362a:	141f      	asrs	r7, r3, #16
 800362c:	454d      	cmp	r5, r9
 800362e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8003632:	f84a 3b04 	str.w	r3, [sl], #4
 8003636:	d8e7      	bhi.n	8003608 <__mdiff+0x7c>
 8003638:	1b2b      	subs	r3, r5, r4
 800363a:	3b15      	subs	r3, #21
 800363c:	f023 0303 	bic.w	r3, r3, #3
 8003640:	3304      	adds	r3, #4
 8003642:	3415      	adds	r4, #21
 8003644:	42a5      	cmp	r5, r4
 8003646:	bf38      	it	cc
 8003648:	2304      	movcc	r3, #4
 800364a:	4419      	add	r1, r3
 800364c:	4473      	add	r3, lr
 800364e:	469e      	mov	lr, r3
 8003650:	460d      	mov	r5, r1
 8003652:	4565      	cmp	r5, ip
 8003654:	d30e      	bcc.n	8003674 <__mdiff+0xe8>
 8003656:	f10c 0203 	add.w	r2, ip, #3
 800365a:	1a52      	subs	r2, r2, r1
 800365c:	f022 0203 	bic.w	r2, r2, #3
 8003660:	3903      	subs	r1, #3
 8003662:	458c      	cmp	ip, r1
 8003664:	bf38      	it	cc
 8003666:	2200      	movcc	r2, #0
 8003668:	441a      	add	r2, r3
 800366a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800366e:	b17b      	cbz	r3, 8003690 <__mdiff+0x104>
 8003670:	6106      	str	r6, [r0, #16]
 8003672:	e7a5      	b.n	80035c0 <__mdiff+0x34>
 8003674:	f855 8b04 	ldr.w	r8, [r5], #4
 8003678:	fa17 f488 	uxtah	r4, r7, r8
 800367c:	1422      	asrs	r2, r4, #16
 800367e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8003682:	b2a4      	uxth	r4, r4
 8003684:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8003688:	f84e 4b04 	str.w	r4, [lr], #4
 800368c:	1417      	asrs	r7, r2, #16
 800368e:	e7e0      	b.n	8003652 <__mdiff+0xc6>
 8003690:	3e01      	subs	r6, #1
 8003692:	e7ea      	b.n	800366a <__mdiff+0xde>
 8003694:	080058db 	.word	0x080058db
 8003698:	0800587b 	.word	0x0800587b

0800369c <__d2b>:
 800369c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80036a0:	4689      	mov	r9, r1
 80036a2:	2101      	movs	r1, #1
 80036a4:	ec57 6b10 	vmov	r6, r7, d0
 80036a8:	4690      	mov	r8, r2
 80036aa:	f7ff fcd5 	bl	8003058 <_Balloc>
 80036ae:	4604      	mov	r4, r0
 80036b0:	b930      	cbnz	r0, 80036c0 <__d2b+0x24>
 80036b2:	4602      	mov	r2, r0
 80036b4:	4b25      	ldr	r3, [pc, #148]	; (800374c <__d2b+0xb0>)
 80036b6:	4826      	ldr	r0, [pc, #152]	; (8003750 <__d2b+0xb4>)
 80036b8:	f240 310a 	movw	r1, #778	; 0x30a
 80036bc:	f000 fc00 	bl	8003ec0 <__assert_func>
 80036c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80036c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80036c8:	bb35      	cbnz	r5, 8003718 <__d2b+0x7c>
 80036ca:	2e00      	cmp	r6, #0
 80036cc:	9301      	str	r3, [sp, #4]
 80036ce:	d028      	beq.n	8003722 <__d2b+0x86>
 80036d0:	4668      	mov	r0, sp
 80036d2:	9600      	str	r6, [sp, #0]
 80036d4:	f7ff fd8c 	bl	80031f0 <__lo0bits>
 80036d8:	9900      	ldr	r1, [sp, #0]
 80036da:	b300      	cbz	r0, 800371e <__d2b+0x82>
 80036dc:	9a01      	ldr	r2, [sp, #4]
 80036de:	f1c0 0320 	rsb	r3, r0, #32
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	430b      	orrs	r3, r1
 80036e8:	40c2      	lsrs	r2, r0
 80036ea:	6163      	str	r3, [r4, #20]
 80036ec:	9201      	str	r2, [sp, #4]
 80036ee:	9b01      	ldr	r3, [sp, #4]
 80036f0:	61a3      	str	r3, [r4, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	bf14      	ite	ne
 80036f6:	2202      	movne	r2, #2
 80036f8:	2201      	moveq	r2, #1
 80036fa:	6122      	str	r2, [r4, #16]
 80036fc:	b1d5      	cbz	r5, 8003734 <__d2b+0x98>
 80036fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8003702:	4405      	add	r5, r0
 8003704:	f8c9 5000 	str.w	r5, [r9]
 8003708:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800370c:	f8c8 0000 	str.w	r0, [r8]
 8003710:	4620      	mov	r0, r4
 8003712:	b003      	add	sp, #12
 8003714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800371c:	e7d5      	b.n	80036ca <__d2b+0x2e>
 800371e:	6161      	str	r1, [r4, #20]
 8003720:	e7e5      	b.n	80036ee <__d2b+0x52>
 8003722:	a801      	add	r0, sp, #4
 8003724:	f7ff fd64 	bl	80031f0 <__lo0bits>
 8003728:	9b01      	ldr	r3, [sp, #4]
 800372a:	6163      	str	r3, [r4, #20]
 800372c:	2201      	movs	r2, #1
 800372e:	6122      	str	r2, [r4, #16]
 8003730:	3020      	adds	r0, #32
 8003732:	e7e3      	b.n	80036fc <__d2b+0x60>
 8003734:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003738:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800373c:	f8c9 0000 	str.w	r0, [r9]
 8003740:	6918      	ldr	r0, [r3, #16]
 8003742:	f7ff fd35 	bl	80031b0 <__hi0bits>
 8003746:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800374a:	e7df      	b.n	800370c <__d2b+0x70>
 800374c:	080058db 	.word	0x080058db
 8003750:	0800587b 	.word	0x0800587b

08003754 <_mprec_log10>:
 8003754:	2817      	cmp	r0, #23
 8003756:	b5d0      	push	{r4, r6, r7, lr}
 8003758:	4604      	mov	r4, r0
 800375a:	dc07      	bgt.n	800376c <_mprec_log10+0x18>
 800375c:	4809      	ldr	r0, [pc, #36]	; (8003784 <_mprec_log10+0x30>)
 800375e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8003762:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003766:	ec41 0b10 	vmov	d0, r0, r1
 800376a:	bdd0      	pop	{r4, r6, r7, pc}
 800376c:	4906      	ldr	r1, [pc, #24]	; (8003788 <_mprec_log10+0x34>)
 800376e:	4f07      	ldr	r7, [pc, #28]	; (800378c <_mprec_log10+0x38>)
 8003770:	2000      	movs	r0, #0
 8003772:	2600      	movs	r6, #0
 8003774:	4632      	mov	r2, r6
 8003776:	463b      	mov	r3, r7
 8003778:	f7fc ff3e 	bl	80005f8 <__aeabi_dmul>
 800377c:	3c01      	subs	r4, #1
 800377e:	d1f9      	bne.n	8003774 <_mprec_log10+0x20>
 8003780:	e7f1      	b.n	8003766 <_mprec_log10+0x12>
 8003782:	bf00      	nop
 8003784:	08005918 	.word	0x08005918
 8003788:	3ff00000 	.word	0x3ff00000
 800378c:	40240000 	.word	0x40240000

08003790 <_calloc_r>:
 8003790:	b513      	push	{r0, r1, r4, lr}
 8003792:	434a      	muls	r2, r1
 8003794:	4611      	mov	r1, r2
 8003796:	9201      	str	r2, [sp, #4]
 8003798:	f000 f80a 	bl	80037b0 <_malloc_r>
 800379c:	4604      	mov	r4, r0
 800379e:	b118      	cbz	r0, 80037a8 <_calloc_r+0x18>
 80037a0:	9a01      	ldr	r2, [sp, #4]
 80037a2:	2100      	movs	r1, #0
 80037a4:	f7ff faea 	bl	8002d7c <memset>
 80037a8:	4620      	mov	r0, r4
 80037aa:	b002      	add	sp, #8
 80037ac:	bd10      	pop	{r4, pc}
	...

080037b0 <_malloc_r>:
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b2:	1ccd      	adds	r5, r1, #3
 80037b4:	f025 0503 	bic.w	r5, r5, #3
 80037b8:	3508      	adds	r5, #8
 80037ba:	2d0c      	cmp	r5, #12
 80037bc:	bf38      	it	cc
 80037be:	250c      	movcc	r5, #12
 80037c0:	2d00      	cmp	r5, #0
 80037c2:	4606      	mov	r6, r0
 80037c4:	db01      	blt.n	80037ca <_malloc_r+0x1a>
 80037c6:	42a9      	cmp	r1, r5
 80037c8:	d903      	bls.n	80037d2 <_malloc_r+0x22>
 80037ca:	230c      	movs	r3, #12
 80037cc:	6033      	str	r3, [r6, #0]
 80037ce:	2000      	movs	r0, #0
 80037d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037d2:	f001 fa4f 	bl	8004c74 <__malloc_lock>
 80037d6:	4921      	ldr	r1, [pc, #132]	; (800385c <_malloc_r+0xac>)
 80037d8:	680a      	ldr	r2, [r1, #0]
 80037da:	4614      	mov	r4, r2
 80037dc:	b99c      	cbnz	r4, 8003806 <_malloc_r+0x56>
 80037de:	4f20      	ldr	r7, [pc, #128]	; (8003860 <_malloc_r+0xb0>)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	b923      	cbnz	r3, 80037ee <_malloc_r+0x3e>
 80037e4:	4621      	mov	r1, r4
 80037e6:	4630      	mov	r0, r6
 80037e8:	f000 fb52 	bl	8003e90 <_sbrk_r>
 80037ec:	6038      	str	r0, [r7, #0]
 80037ee:	4629      	mov	r1, r5
 80037f0:	4630      	mov	r0, r6
 80037f2:	f000 fb4d 	bl	8003e90 <_sbrk_r>
 80037f6:	1c43      	adds	r3, r0, #1
 80037f8:	d123      	bne.n	8003842 <_malloc_r+0x92>
 80037fa:	230c      	movs	r3, #12
 80037fc:	6033      	str	r3, [r6, #0]
 80037fe:	4630      	mov	r0, r6
 8003800:	f001 fa3e 	bl	8004c80 <__malloc_unlock>
 8003804:	e7e3      	b.n	80037ce <_malloc_r+0x1e>
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	1b5b      	subs	r3, r3, r5
 800380a:	d417      	bmi.n	800383c <_malloc_r+0x8c>
 800380c:	2b0b      	cmp	r3, #11
 800380e:	d903      	bls.n	8003818 <_malloc_r+0x68>
 8003810:	6023      	str	r3, [r4, #0]
 8003812:	441c      	add	r4, r3
 8003814:	6025      	str	r5, [r4, #0]
 8003816:	e004      	b.n	8003822 <_malloc_r+0x72>
 8003818:	6863      	ldr	r3, [r4, #4]
 800381a:	42a2      	cmp	r2, r4
 800381c:	bf0c      	ite	eq
 800381e:	600b      	streq	r3, [r1, #0]
 8003820:	6053      	strne	r3, [r2, #4]
 8003822:	4630      	mov	r0, r6
 8003824:	f001 fa2c 	bl	8004c80 <__malloc_unlock>
 8003828:	f104 000b 	add.w	r0, r4, #11
 800382c:	1d23      	adds	r3, r4, #4
 800382e:	f020 0007 	bic.w	r0, r0, #7
 8003832:	1ac2      	subs	r2, r0, r3
 8003834:	d0cc      	beq.n	80037d0 <_malloc_r+0x20>
 8003836:	1a1b      	subs	r3, r3, r0
 8003838:	50a3      	str	r3, [r4, r2]
 800383a:	e7c9      	b.n	80037d0 <_malloc_r+0x20>
 800383c:	4622      	mov	r2, r4
 800383e:	6864      	ldr	r4, [r4, #4]
 8003840:	e7cc      	b.n	80037dc <_malloc_r+0x2c>
 8003842:	1cc4      	adds	r4, r0, #3
 8003844:	f024 0403 	bic.w	r4, r4, #3
 8003848:	42a0      	cmp	r0, r4
 800384a:	d0e3      	beq.n	8003814 <_malloc_r+0x64>
 800384c:	1a21      	subs	r1, r4, r0
 800384e:	4630      	mov	r0, r6
 8003850:	f000 fb1e 	bl	8003e90 <_sbrk_r>
 8003854:	3001      	adds	r0, #1
 8003856:	d1dd      	bne.n	8003814 <_malloc_r+0x64>
 8003858:	e7cf      	b.n	80037fa <_malloc_r+0x4a>
 800385a:	bf00      	nop
 800385c:	200000ac 	.word	0x200000ac
 8003860:	200000b0 	.word	0x200000b0

08003864 <_realloc_r>:
 8003864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003866:	4607      	mov	r7, r0
 8003868:	4614      	mov	r4, r2
 800386a:	460e      	mov	r6, r1
 800386c:	b921      	cbnz	r1, 8003878 <_realloc_r+0x14>
 800386e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003872:	4611      	mov	r1, r2
 8003874:	f7ff bf9c 	b.w	80037b0 <_malloc_r>
 8003878:	b922      	cbnz	r2, 8003884 <_realloc_r+0x20>
 800387a:	f001 fa07 	bl	8004c8c <_free_r>
 800387e:	4625      	mov	r5, r4
 8003880:	4628      	mov	r0, r5
 8003882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003884:	f001 fa52 	bl	8004d2c <_malloc_usable_size_r>
 8003888:	42a0      	cmp	r0, r4
 800388a:	d20f      	bcs.n	80038ac <_realloc_r+0x48>
 800388c:	4621      	mov	r1, r4
 800388e:	4638      	mov	r0, r7
 8003890:	f7ff ff8e 	bl	80037b0 <_malloc_r>
 8003894:	4605      	mov	r5, r0
 8003896:	2800      	cmp	r0, #0
 8003898:	d0f2      	beq.n	8003880 <_realloc_r+0x1c>
 800389a:	4631      	mov	r1, r6
 800389c:	4622      	mov	r2, r4
 800389e:	f001 f9c1 	bl	8004c24 <memcpy>
 80038a2:	4631      	mov	r1, r6
 80038a4:	4638      	mov	r0, r7
 80038a6:	f001 f9f1 	bl	8004c8c <_free_r>
 80038aa:	e7e9      	b.n	8003880 <_realloc_r+0x1c>
 80038ac:	4635      	mov	r5, r6
 80038ae:	e7e7      	b.n	8003880 <_realloc_r+0x1c>

080038b0 <__ssputs_r>:
 80038b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038b4:	688e      	ldr	r6, [r1, #8]
 80038b6:	429e      	cmp	r6, r3
 80038b8:	4682      	mov	sl, r0
 80038ba:	460c      	mov	r4, r1
 80038bc:	4690      	mov	r8, r2
 80038be:	461f      	mov	r7, r3
 80038c0:	d838      	bhi.n	8003934 <__ssputs_r+0x84>
 80038c2:	898a      	ldrh	r2, [r1, #12]
 80038c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038c8:	d032      	beq.n	8003930 <__ssputs_r+0x80>
 80038ca:	6825      	ldr	r5, [r4, #0]
 80038cc:	6909      	ldr	r1, [r1, #16]
 80038ce:	eba5 0901 	sub.w	r9, r5, r1
 80038d2:	6965      	ldr	r5, [r4, #20]
 80038d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038dc:	3301      	adds	r3, #1
 80038de:	444b      	add	r3, r9
 80038e0:	106d      	asrs	r5, r5, #1
 80038e2:	429d      	cmp	r5, r3
 80038e4:	bf38      	it	cc
 80038e6:	461d      	movcc	r5, r3
 80038e8:	0553      	lsls	r3, r2, #21
 80038ea:	d531      	bpl.n	8003950 <__ssputs_r+0xa0>
 80038ec:	4629      	mov	r1, r5
 80038ee:	f7ff ff5f 	bl	80037b0 <_malloc_r>
 80038f2:	4606      	mov	r6, r0
 80038f4:	b950      	cbnz	r0, 800390c <__ssputs_r+0x5c>
 80038f6:	230c      	movs	r3, #12
 80038f8:	f8ca 3000 	str.w	r3, [sl]
 80038fc:	89a3      	ldrh	r3, [r4, #12]
 80038fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003902:	81a3      	strh	r3, [r4, #12]
 8003904:	f04f 30ff 	mov.w	r0, #4294967295
 8003908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800390c:	6921      	ldr	r1, [r4, #16]
 800390e:	464a      	mov	r2, r9
 8003910:	f001 f988 	bl	8004c24 <memcpy>
 8003914:	89a3      	ldrh	r3, [r4, #12]
 8003916:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800391a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800391e:	81a3      	strh	r3, [r4, #12]
 8003920:	6126      	str	r6, [r4, #16]
 8003922:	6165      	str	r5, [r4, #20]
 8003924:	444e      	add	r6, r9
 8003926:	eba5 0509 	sub.w	r5, r5, r9
 800392a:	6026      	str	r6, [r4, #0]
 800392c:	60a5      	str	r5, [r4, #8]
 800392e:	463e      	mov	r6, r7
 8003930:	42be      	cmp	r6, r7
 8003932:	d900      	bls.n	8003936 <__ssputs_r+0x86>
 8003934:	463e      	mov	r6, r7
 8003936:	4632      	mov	r2, r6
 8003938:	6820      	ldr	r0, [r4, #0]
 800393a:	4641      	mov	r1, r8
 800393c:	f001 f980 	bl	8004c40 <memmove>
 8003940:	68a3      	ldr	r3, [r4, #8]
 8003942:	6822      	ldr	r2, [r4, #0]
 8003944:	1b9b      	subs	r3, r3, r6
 8003946:	4432      	add	r2, r6
 8003948:	60a3      	str	r3, [r4, #8]
 800394a:	6022      	str	r2, [r4, #0]
 800394c:	2000      	movs	r0, #0
 800394e:	e7db      	b.n	8003908 <__ssputs_r+0x58>
 8003950:	462a      	mov	r2, r5
 8003952:	f7ff ff87 	bl	8003864 <_realloc_r>
 8003956:	4606      	mov	r6, r0
 8003958:	2800      	cmp	r0, #0
 800395a:	d1e1      	bne.n	8003920 <__ssputs_r+0x70>
 800395c:	6921      	ldr	r1, [r4, #16]
 800395e:	4650      	mov	r0, sl
 8003960:	f001 f994 	bl	8004c8c <_free_r>
 8003964:	e7c7      	b.n	80038f6 <__ssputs_r+0x46>
	...

08003968 <_svfiprintf_r>:
 8003968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800396c:	4698      	mov	r8, r3
 800396e:	898b      	ldrh	r3, [r1, #12]
 8003970:	061b      	lsls	r3, r3, #24
 8003972:	b09d      	sub	sp, #116	; 0x74
 8003974:	4607      	mov	r7, r0
 8003976:	460d      	mov	r5, r1
 8003978:	4614      	mov	r4, r2
 800397a:	d50e      	bpl.n	800399a <_svfiprintf_r+0x32>
 800397c:	690b      	ldr	r3, [r1, #16]
 800397e:	b963      	cbnz	r3, 800399a <_svfiprintf_r+0x32>
 8003980:	2140      	movs	r1, #64	; 0x40
 8003982:	f7ff ff15 	bl	80037b0 <_malloc_r>
 8003986:	6028      	str	r0, [r5, #0]
 8003988:	6128      	str	r0, [r5, #16]
 800398a:	b920      	cbnz	r0, 8003996 <_svfiprintf_r+0x2e>
 800398c:	230c      	movs	r3, #12
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	f04f 30ff 	mov.w	r0, #4294967295
 8003994:	e0d1      	b.n	8003b3a <_svfiprintf_r+0x1d2>
 8003996:	2340      	movs	r3, #64	; 0x40
 8003998:	616b      	str	r3, [r5, #20]
 800399a:	2300      	movs	r3, #0
 800399c:	9309      	str	r3, [sp, #36]	; 0x24
 800399e:	2320      	movs	r3, #32
 80039a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80039a8:	2330      	movs	r3, #48	; 0x30
 80039aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003b54 <_svfiprintf_r+0x1ec>
 80039ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039b2:	f04f 0901 	mov.w	r9, #1
 80039b6:	4623      	mov	r3, r4
 80039b8:	469a      	mov	sl, r3
 80039ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039be:	b10a      	cbz	r2, 80039c4 <_svfiprintf_r+0x5c>
 80039c0:	2a25      	cmp	r2, #37	; 0x25
 80039c2:	d1f9      	bne.n	80039b8 <_svfiprintf_r+0x50>
 80039c4:	ebba 0b04 	subs.w	fp, sl, r4
 80039c8:	d00b      	beq.n	80039e2 <_svfiprintf_r+0x7a>
 80039ca:	465b      	mov	r3, fp
 80039cc:	4622      	mov	r2, r4
 80039ce:	4629      	mov	r1, r5
 80039d0:	4638      	mov	r0, r7
 80039d2:	f7ff ff6d 	bl	80038b0 <__ssputs_r>
 80039d6:	3001      	adds	r0, #1
 80039d8:	f000 80aa 	beq.w	8003b30 <_svfiprintf_r+0x1c8>
 80039dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039de:	445a      	add	r2, fp
 80039e0:	9209      	str	r2, [sp, #36]	; 0x24
 80039e2:	f89a 3000 	ldrb.w	r3, [sl]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 80a2 	beq.w	8003b30 <_svfiprintf_r+0x1c8>
 80039ec:	2300      	movs	r3, #0
 80039ee:	f04f 32ff 	mov.w	r2, #4294967295
 80039f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039f6:	f10a 0a01 	add.w	sl, sl, #1
 80039fa:	9304      	str	r3, [sp, #16]
 80039fc:	9307      	str	r3, [sp, #28]
 80039fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a02:	931a      	str	r3, [sp, #104]	; 0x68
 8003a04:	4654      	mov	r4, sl
 8003a06:	2205      	movs	r2, #5
 8003a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a0c:	4851      	ldr	r0, [pc, #324]	; (8003b54 <_svfiprintf_r+0x1ec>)
 8003a0e:	f7fc fbe7 	bl	80001e0 <memchr>
 8003a12:	9a04      	ldr	r2, [sp, #16]
 8003a14:	b9d8      	cbnz	r0, 8003a4e <_svfiprintf_r+0xe6>
 8003a16:	06d0      	lsls	r0, r2, #27
 8003a18:	bf44      	itt	mi
 8003a1a:	2320      	movmi	r3, #32
 8003a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a20:	0711      	lsls	r1, r2, #28
 8003a22:	bf44      	itt	mi
 8003a24:	232b      	movmi	r3, #43	; 0x2b
 8003a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a30:	d015      	beq.n	8003a5e <_svfiprintf_r+0xf6>
 8003a32:	9a07      	ldr	r2, [sp, #28]
 8003a34:	4654      	mov	r4, sl
 8003a36:	2000      	movs	r0, #0
 8003a38:	f04f 0c0a 	mov.w	ip, #10
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a42:	3b30      	subs	r3, #48	; 0x30
 8003a44:	2b09      	cmp	r3, #9
 8003a46:	d94e      	bls.n	8003ae6 <_svfiprintf_r+0x17e>
 8003a48:	b1b0      	cbz	r0, 8003a78 <_svfiprintf_r+0x110>
 8003a4a:	9207      	str	r2, [sp, #28]
 8003a4c:	e014      	b.n	8003a78 <_svfiprintf_r+0x110>
 8003a4e:	eba0 0308 	sub.w	r3, r0, r8
 8003a52:	fa09 f303 	lsl.w	r3, r9, r3
 8003a56:	4313      	orrs	r3, r2
 8003a58:	9304      	str	r3, [sp, #16]
 8003a5a:	46a2      	mov	sl, r4
 8003a5c:	e7d2      	b.n	8003a04 <_svfiprintf_r+0x9c>
 8003a5e:	9b03      	ldr	r3, [sp, #12]
 8003a60:	1d19      	adds	r1, r3, #4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	9103      	str	r1, [sp, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bfbb      	ittet	lt
 8003a6a:	425b      	neglt	r3, r3
 8003a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8003a70:	9307      	strge	r3, [sp, #28]
 8003a72:	9307      	strlt	r3, [sp, #28]
 8003a74:	bfb8      	it	lt
 8003a76:	9204      	strlt	r2, [sp, #16]
 8003a78:	7823      	ldrb	r3, [r4, #0]
 8003a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8003a7c:	d10c      	bne.n	8003a98 <_svfiprintf_r+0x130>
 8003a7e:	7863      	ldrb	r3, [r4, #1]
 8003a80:	2b2a      	cmp	r3, #42	; 0x2a
 8003a82:	d135      	bne.n	8003af0 <_svfiprintf_r+0x188>
 8003a84:	9b03      	ldr	r3, [sp, #12]
 8003a86:	1d1a      	adds	r2, r3, #4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	9203      	str	r2, [sp, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bfb8      	it	lt
 8003a90:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a94:	3402      	adds	r4, #2
 8003a96:	9305      	str	r3, [sp, #20]
 8003a98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b64 <_svfiprintf_r+0x1fc>
 8003a9c:	7821      	ldrb	r1, [r4, #0]
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	4650      	mov	r0, sl
 8003aa2:	f7fc fb9d 	bl	80001e0 <memchr>
 8003aa6:	b140      	cbz	r0, 8003aba <_svfiprintf_r+0x152>
 8003aa8:	2340      	movs	r3, #64	; 0x40
 8003aaa:	eba0 000a 	sub.w	r0, r0, sl
 8003aae:	fa03 f000 	lsl.w	r0, r3, r0
 8003ab2:	9b04      	ldr	r3, [sp, #16]
 8003ab4:	4303      	orrs	r3, r0
 8003ab6:	3401      	adds	r4, #1
 8003ab8:	9304      	str	r3, [sp, #16]
 8003aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003abe:	4826      	ldr	r0, [pc, #152]	; (8003b58 <_svfiprintf_r+0x1f0>)
 8003ac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ac4:	2206      	movs	r2, #6
 8003ac6:	f7fc fb8b 	bl	80001e0 <memchr>
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d038      	beq.n	8003b40 <_svfiprintf_r+0x1d8>
 8003ace:	4b23      	ldr	r3, [pc, #140]	; (8003b5c <_svfiprintf_r+0x1f4>)
 8003ad0:	bb1b      	cbnz	r3, 8003b1a <_svfiprintf_r+0x1b2>
 8003ad2:	9b03      	ldr	r3, [sp, #12]
 8003ad4:	3307      	adds	r3, #7
 8003ad6:	f023 0307 	bic.w	r3, r3, #7
 8003ada:	3308      	adds	r3, #8
 8003adc:	9303      	str	r3, [sp, #12]
 8003ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ae0:	4433      	add	r3, r6
 8003ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ae4:	e767      	b.n	80039b6 <_svfiprintf_r+0x4e>
 8003ae6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003aea:	460c      	mov	r4, r1
 8003aec:	2001      	movs	r0, #1
 8003aee:	e7a5      	b.n	8003a3c <_svfiprintf_r+0xd4>
 8003af0:	2300      	movs	r3, #0
 8003af2:	3401      	adds	r4, #1
 8003af4:	9305      	str	r3, [sp, #20]
 8003af6:	4619      	mov	r1, r3
 8003af8:	f04f 0c0a 	mov.w	ip, #10
 8003afc:	4620      	mov	r0, r4
 8003afe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b02:	3a30      	subs	r2, #48	; 0x30
 8003b04:	2a09      	cmp	r2, #9
 8003b06:	d903      	bls.n	8003b10 <_svfiprintf_r+0x1a8>
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0c5      	beq.n	8003a98 <_svfiprintf_r+0x130>
 8003b0c:	9105      	str	r1, [sp, #20]
 8003b0e:	e7c3      	b.n	8003a98 <_svfiprintf_r+0x130>
 8003b10:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b14:	4604      	mov	r4, r0
 8003b16:	2301      	movs	r3, #1
 8003b18:	e7f0      	b.n	8003afc <_svfiprintf_r+0x194>
 8003b1a:	ab03      	add	r3, sp, #12
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	462a      	mov	r2, r5
 8003b20:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <_svfiprintf_r+0x1f8>)
 8003b22:	a904      	add	r1, sp, #16
 8003b24:	4638      	mov	r0, r7
 8003b26:	f3af 8000 	nop.w
 8003b2a:	1c42      	adds	r2, r0, #1
 8003b2c:	4606      	mov	r6, r0
 8003b2e:	d1d6      	bne.n	8003ade <_svfiprintf_r+0x176>
 8003b30:	89ab      	ldrh	r3, [r5, #12]
 8003b32:	065b      	lsls	r3, r3, #25
 8003b34:	f53f af2c 	bmi.w	8003990 <_svfiprintf_r+0x28>
 8003b38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b3a:	b01d      	add	sp, #116	; 0x74
 8003b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b40:	ab03      	add	r3, sp, #12
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	462a      	mov	r2, r5
 8003b46:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <_svfiprintf_r+0x1f8>)
 8003b48:	a904      	add	r1, sp, #16
 8003b4a:	4638      	mov	r0, r7
 8003b4c:	f000 f87a 	bl	8003c44 <_printf_i>
 8003b50:	e7eb      	b.n	8003b2a <_svfiprintf_r+0x1c2>
 8003b52:	bf00      	nop
 8003b54:	080059ec 	.word	0x080059ec
 8003b58:	080059f6 	.word	0x080059f6
 8003b5c:	00000000 	.word	0x00000000
 8003b60:	080038b1 	.word	0x080038b1
 8003b64:	080059f2 	.word	0x080059f2

08003b68 <_printf_common>:
 8003b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b6c:	4616      	mov	r6, r2
 8003b6e:	4699      	mov	r9, r3
 8003b70:	688a      	ldr	r2, [r1, #8]
 8003b72:	690b      	ldr	r3, [r1, #16]
 8003b74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	bfb8      	it	lt
 8003b7c:	4613      	movlt	r3, r2
 8003b7e:	6033      	str	r3, [r6, #0]
 8003b80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b84:	4607      	mov	r7, r0
 8003b86:	460c      	mov	r4, r1
 8003b88:	b10a      	cbz	r2, 8003b8e <_printf_common+0x26>
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	6033      	str	r3, [r6, #0]
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	0699      	lsls	r1, r3, #26
 8003b92:	bf42      	ittt	mi
 8003b94:	6833      	ldrmi	r3, [r6, #0]
 8003b96:	3302      	addmi	r3, #2
 8003b98:	6033      	strmi	r3, [r6, #0]
 8003b9a:	6825      	ldr	r5, [r4, #0]
 8003b9c:	f015 0506 	ands.w	r5, r5, #6
 8003ba0:	d106      	bne.n	8003bb0 <_printf_common+0x48>
 8003ba2:	f104 0a19 	add.w	sl, r4, #25
 8003ba6:	68e3      	ldr	r3, [r4, #12]
 8003ba8:	6832      	ldr	r2, [r6, #0]
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	42ab      	cmp	r3, r5
 8003bae:	dc26      	bgt.n	8003bfe <_printf_common+0x96>
 8003bb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bb4:	1e13      	subs	r3, r2, #0
 8003bb6:	6822      	ldr	r2, [r4, #0]
 8003bb8:	bf18      	it	ne
 8003bba:	2301      	movne	r3, #1
 8003bbc:	0692      	lsls	r2, r2, #26
 8003bbe:	d42b      	bmi.n	8003c18 <_printf_common+0xb0>
 8003bc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	4638      	mov	r0, r7
 8003bc8:	47c0      	blx	r8
 8003bca:	3001      	adds	r0, #1
 8003bcc:	d01e      	beq.n	8003c0c <_printf_common+0xa4>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	68e5      	ldr	r5, [r4, #12]
 8003bd2:	6832      	ldr	r2, [r6, #0]
 8003bd4:	f003 0306 	and.w	r3, r3, #6
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	bf08      	it	eq
 8003bdc:	1aad      	subeq	r5, r5, r2
 8003bde:	68a3      	ldr	r3, [r4, #8]
 8003be0:	6922      	ldr	r2, [r4, #16]
 8003be2:	bf0c      	ite	eq
 8003be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003be8:	2500      	movne	r5, #0
 8003bea:	4293      	cmp	r3, r2
 8003bec:	bfc4      	itt	gt
 8003bee:	1a9b      	subgt	r3, r3, r2
 8003bf0:	18ed      	addgt	r5, r5, r3
 8003bf2:	2600      	movs	r6, #0
 8003bf4:	341a      	adds	r4, #26
 8003bf6:	42b5      	cmp	r5, r6
 8003bf8:	d11a      	bne.n	8003c30 <_printf_common+0xc8>
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	e008      	b.n	8003c10 <_printf_common+0xa8>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	4652      	mov	r2, sl
 8003c02:	4649      	mov	r1, r9
 8003c04:	4638      	mov	r0, r7
 8003c06:	47c0      	blx	r8
 8003c08:	3001      	adds	r0, #1
 8003c0a:	d103      	bne.n	8003c14 <_printf_common+0xac>
 8003c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c14:	3501      	adds	r5, #1
 8003c16:	e7c6      	b.n	8003ba6 <_printf_common+0x3e>
 8003c18:	18e1      	adds	r1, r4, r3
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	2030      	movs	r0, #48	; 0x30
 8003c1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c22:	4422      	add	r2, r4
 8003c24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	e7c7      	b.n	8003bc0 <_printf_common+0x58>
 8003c30:	2301      	movs	r3, #1
 8003c32:	4622      	mov	r2, r4
 8003c34:	4649      	mov	r1, r9
 8003c36:	4638      	mov	r0, r7
 8003c38:	47c0      	blx	r8
 8003c3a:	3001      	adds	r0, #1
 8003c3c:	d0e6      	beq.n	8003c0c <_printf_common+0xa4>
 8003c3e:	3601      	adds	r6, #1
 8003c40:	e7d9      	b.n	8003bf6 <_printf_common+0x8e>
	...

08003c44 <_printf_i>:
 8003c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c48:	460c      	mov	r4, r1
 8003c4a:	4691      	mov	r9, r2
 8003c4c:	7e27      	ldrb	r7, [r4, #24]
 8003c4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c50:	2f78      	cmp	r7, #120	; 0x78
 8003c52:	4680      	mov	r8, r0
 8003c54:	469a      	mov	sl, r3
 8003c56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c5a:	d807      	bhi.n	8003c6c <_printf_i+0x28>
 8003c5c:	2f62      	cmp	r7, #98	; 0x62
 8003c5e:	d80a      	bhi.n	8003c76 <_printf_i+0x32>
 8003c60:	2f00      	cmp	r7, #0
 8003c62:	f000 80d8 	beq.w	8003e16 <_printf_i+0x1d2>
 8003c66:	2f58      	cmp	r7, #88	; 0x58
 8003c68:	f000 80a3 	beq.w	8003db2 <_printf_i+0x16e>
 8003c6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c74:	e03a      	b.n	8003cec <_printf_i+0xa8>
 8003c76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c7a:	2b15      	cmp	r3, #21
 8003c7c:	d8f6      	bhi.n	8003c6c <_printf_i+0x28>
 8003c7e:	a001      	add	r0, pc, #4	; (adr r0, 8003c84 <_printf_i+0x40>)
 8003c80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003c84:	08003cdd 	.word	0x08003cdd
 8003c88:	08003cf1 	.word	0x08003cf1
 8003c8c:	08003c6d 	.word	0x08003c6d
 8003c90:	08003c6d 	.word	0x08003c6d
 8003c94:	08003c6d 	.word	0x08003c6d
 8003c98:	08003c6d 	.word	0x08003c6d
 8003c9c:	08003cf1 	.word	0x08003cf1
 8003ca0:	08003c6d 	.word	0x08003c6d
 8003ca4:	08003c6d 	.word	0x08003c6d
 8003ca8:	08003c6d 	.word	0x08003c6d
 8003cac:	08003c6d 	.word	0x08003c6d
 8003cb0:	08003dfd 	.word	0x08003dfd
 8003cb4:	08003d21 	.word	0x08003d21
 8003cb8:	08003ddf 	.word	0x08003ddf
 8003cbc:	08003c6d 	.word	0x08003c6d
 8003cc0:	08003c6d 	.word	0x08003c6d
 8003cc4:	08003e1f 	.word	0x08003e1f
 8003cc8:	08003c6d 	.word	0x08003c6d
 8003ccc:	08003d21 	.word	0x08003d21
 8003cd0:	08003c6d 	.word	0x08003c6d
 8003cd4:	08003c6d 	.word	0x08003c6d
 8003cd8:	08003de7 	.word	0x08003de7
 8003cdc:	680b      	ldr	r3, [r1, #0]
 8003cde:	1d1a      	adds	r2, r3, #4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	600a      	str	r2, [r1, #0]
 8003ce4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0a3      	b.n	8003e38 <_printf_i+0x1f4>
 8003cf0:	6825      	ldr	r5, [r4, #0]
 8003cf2:	6808      	ldr	r0, [r1, #0]
 8003cf4:	062e      	lsls	r6, r5, #24
 8003cf6:	f100 0304 	add.w	r3, r0, #4
 8003cfa:	d50a      	bpl.n	8003d12 <_printf_i+0xce>
 8003cfc:	6805      	ldr	r5, [r0, #0]
 8003cfe:	600b      	str	r3, [r1, #0]
 8003d00:	2d00      	cmp	r5, #0
 8003d02:	da03      	bge.n	8003d0c <_printf_i+0xc8>
 8003d04:	232d      	movs	r3, #45	; 0x2d
 8003d06:	426d      	negs	r5, r5
 8003d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d0c:	485e      	ldr	r0, [pc, #376]	; (8003e88 <_printf_i+0x244>)
 8003d0e:	230a      	movs	r3, #10
 8003d10:	e019      	b.n	8003d46 <_printf_i+0x102>
 8003d12:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d16:	6805      	ldr	r5, [r0, #0]
 8003d18:	600b      	str	r3, [r1, #0]
 8003d1a:	bf18      	it	ne
 8003d1c:	b22d      	sxthne	r5, r5
 8003d1e:	e7ef      	b.n	8003d00 <_printf_i+0xbc>
 8003d20:	680b      	ldr	r3, [r1, #0]
 8003d22:	6825      	ldr	r5, [r4, #0]
 8003d24:	1d18      	adds	r0, r3, #4
 8003d26:	6008      	str	r0, [r1, #0]
 8003d28:	0628      	lsls	r0, r5, #24
 8003d2a:	d501      	bpl.n	8003d30 <_printf_i+0xec>
 8003d2c:	681d      	ldr	r5, [r3, #0]
 8003d2e:	e002      	b.n	8003d36 <_printf_i+0xf2>
 8003d30:	0669      	lsls	r1, r5, #25
 8003d32:	d5fb      	bpl.n	8003d2c <_printf_i+0xe8>
 8003d34:	881d      	ldrh	r5, [r3, #0]
 8003d36:	4854      	ldr	r0, [pc, #336]	; (8003e88 <_printf_i+0x244>)
 8003d38:	2f6f      	cmp	r7, #111	; 0x6f
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2308      	moveq	r3, #8
 8003d3e:	230a      	movne	r3, #10
 8003d40:	2100      	movs	r1, #0
 8003d42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d46:	6866      	ldr	r6, [r4, #4]
 8003d48:	60a6      	str	r6, [r4, #8]
 8003d4a:	2e00      	cmp	r6, #0
 8003d4c:	bfa2      	ittt	ge
 8003d4e:	6821      	ldrge	r1, [r4, #0]
 8003d50:	f021 0104 	bicge.w	r1, r1, #4
 8003d54:	6021      	strge	r1, [r4, #0]
 8003d56:	b90d      	cbnz	r5, 8003d5c <_printf_i+0x118>
 8003d58:	2e00      	cmp	r6, #0
 8003d5a:	d04d      	beq.n	8003df8 <_printf_i+0x1b4>
 8003d5c:	4616      	mov	r6, r2
 8003d5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d62:	fb03 5711 	mls	r7, r3, r1, r5
 8003d66:	5dc7      	ldrb	r7, [r0, r7]
 8003d68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d6c:	462f      	mov	r7, r5
 8003d6e:	42bb      	cmp	r3, r7
 8003d70:	460d      	mov	r5, r1
 8003d72:	d9f4      	bls.n	8003d5e <_printf_i+0x11a>
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d10b      	bne.n	8003d90 <_printf_i+0x14c>
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	07df      	lsls	r7, r3, #31
 8003d7c:	d508      	bpl.n	8003d90 <_printf_i+0x14c>
 8003d7e:	6923      	ldr	r3, [r4, #16]
 8003d80:	6861      	ldr	r1, [r4, #4]
 8003d82:	4299      	cmp	r1, r3
 8003d84:	bfde      	ittt	le
 8003d86:	2330      	movle	r3, #48	; 0x30
 8003d88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d90:	1b92      	subs	r2, r2, r6
 8003d92:	6122      	str	r2, [r4, #16]
 8003d94:	f8cd a000 	str.w	sl, [sp]
 8003d98:	464b      	mov	r3, r9
 8003d9a:	aa03      	add	r2, sp, #12
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	4640      	mov	r0, r8
 8003da0:	f7ff fee2 	bl	8003b68 <_printf_common>
 8003da4:	3001      	adds	r0, #1
 8003da6:	d14c      	bne.n	8003e42 <_printf_i+0x1fe>
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dac:	b004      	add	sp, #16
 8003dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db2:	4835      	ldr	r0, [pc, #212]	; (8003e88 <_printf_i+0x244>)
 8003db4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	680e      	ldr	r6, [r1, #0]
 8003dbc:	061f      	lsls	r7, r3, #24
 8003dbe:	f856 5b04 	ldr.w	r5, [r6], #4
 8003dc2:	600e      	str	r6, [r1, #0]
 8003dc4:	d514      	bpl.n	8003df0 <_printf_i+0x1ac>
 8003dc6:	07d9      	lsls	r1, r3, #31
 8003dc8:	bf44      	itt	mi
 8003dca:	f043 0320 	orrmi.w	r3, r3, #32
 8003dce:	6023      	strmi	r3, [r4, #0]
 8003dd0:	b91d      	cbnz	r5, 8003dda <_printf_i+0x196>
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	f023 0320 	bic.w	r3, r3, #32
 8003dd8:	6023      	str	r3, [r4, #0]
 8003dda:	2310      	movs	r3, #16
 8003ddc:	e7b0      	b.n	8003d40 <_printf_i+0xfc>
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	f043 0320 	orr.w	r3, r3, #32
 8003de4:	6023      	str	r3, [r4, #0]
 8003de6:	2378      	movs	r3, #120	; 0x78
 8003de8:	4828      	ldr	r0, [pc, #160]	; (8003e8c <_printf_i+0x248>)
 8003dea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dee:	e7e3      	b.n	8003db8 <_printf_i+0x174>
 8003df0:	065e      	lsls	r6, r3, #25
 8003df2:	bf48      	it	mi
 8003df4:	b2ad      	uxthmi	r5, r5
 8003df6:	e7e6      	b.n	8003dc6 <_printf_i+0x182>
 8003df8:	4616      	mov	r6, r2
 8003dfa:	e7bb      	b.n	8003d74 <_printf_i+0x130>
 8003dfc:	680b      	ldr	r3, [r1, #0]
 8003dfe:	6826      	ldr	r6, [r4, #0]
 8003e00:	6960      	ldr	r0, [r4, #20]
 8003e02:	1d1d      	adds	r5, r3, #4
 8003e04:	600d      	str	r5, [r1, #0]
 8003e06:	0635      	lsls	r5, r6, #24
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	d501      	bpl.n	8003e10 <_printf_i+0x1cc>
 8003e0c:	6018      	str	r0, [r3, #0]
 8003e0e:	e002      	b.n	8003e16 <_printf_i+0x1d2>
 8003e10:	0671      	lsls	r1, r6, #25
 8003e12:	d5fb      	bpl.n	8003e0c <_printf_i+0x1c8>
 8003e14:	8018      	strh	r0, [r3, #0]
 8003e16:	2300      	movs	r3, #0
 8003e18:	6123      	str	r3, [r4, #16]
 8003e1a:	4616      	mov	r6, r2
 8003e1c:	e7ba      	b.n	8003d94 <_printf_i+0x150>
 8003e1e:	680b      	ldr	r3, [r1, #0]
 8003e20:	1d1a      	adds	r2, r3, #4
 8003e22:	600a      	str	r2, [r1, #0]
 8003e24:	681e      	ldr	r6, [r3, #0]
 8003e26:	6862      	ldr	r2, [r4, #4]
 8003e28:	2100      	movs	r1, #0
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	f7fc f9d8 	bl	80001e0 <memchr>
 8003e30:	b108      	cbz	r0, 8003e36 <_printf_i+0x1f2>
 8003e32:	1b80      	subs	r0, r0, r6
 8003e34:	6060      	str	r0, [r4, #4]
 8003e36:	6863      	ldr	r3, [r4, #4]
 8003e38:	6123      	str	r3, [r4, #16]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e40:	e7a8      	b.n	8003d94 <_printf_i+0x150>
 8003e42:	6923      	ldr	r3, [r4, #16]
 8003e44:	4632      	mov	r2, r6
 8003e46:	4649      	mov	r1, r9
 8003e48:	4640      	mov	r0, r8
 8003e4a:	47d0      	blx	sl
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	d0ab      	beq.n	8003da8 <_printf_i+0x164>
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	079b      	lsls	r3, r3, #30
 8003e54:	d413      	bmi.n	8003e7e <_printf_i+0x23a>
 8003e56:	68e0      	ldr	r0, [r4, #12]
 8003e58:	9b03      	ldr	r3, [sp, #12]
 8003e5a:	4298      	cmp	r0, r3
 8003e5c:	bfb8      	it	lt
 8003e5e:	4618      	movlt	r0, r3
 8003e60:	e7a4      	b.n	8003dac <_printf_i+0x168>
 8003e62:	2301      	movs	r3, #1
 8003e64:	4632      	mov	r2, r6
 8003e66:	4649      	mov	r1, r9
 8003e68:	4640      	mov	r0, r8
 8003e6a:	47d0      	blx	sl
 8003e6c:	3001      	adds	r0, #1
 8003e6e:	d09b      	beq.n	8003da8 <_printf_i+0x164>
 8003e70:	3501      	adds	r5, #1
 8003e72:	68e3      	ldr	r3, [r4, #12]
 8003e74:	9903      	ldr	r1, [sp, #12]
 8003e76:	1a5b      	subs	r3, r3, r1
 8003e78:	42ab      	cmp	r3, r5
 8003e7a:	dcf2      	bgt.n	8003e62 <_printf_i+0x21e>
 8003e7c:	e7eb      	b.n	8003e56 <_printf_i+0x212>
 8003e7e:	2500      	movs	r5, #0
 8003e80:	f104 0619 	add.w	r6, r4, #25
 8003e84:	e7f5      	b.n	8003e72 <_printf_i+0x22e>
 8003e86:	bf00      	nop
 8003e88:	080059fd 	.word	0x080059fd
 8003e8c:	08005a0e 	.word	0x08005a0e

08003e90 <_sbrk_r>:
 8003e90:	b538      	push	{r3, r4, r5, lr}
 8003e92:	4d06      	ldr	r5, [pc, #24]	; (8003eac <_sbrk_r+0x1c>)
 8003e94:	2300      	movs	r3, #0
 8003e96:	4604      	mov	r4, r0
 8003e98:	4608      	mov	r0, r1
 8003e9a:	602b      	str	r3, [r5, #0]
 8003e9c:	f7fd fd2c 	bl	80018f8 <_sbrk>
 8003ea0:	1c43      	adds	r3, r0, #1
 8003ea2:	d102      	bne.n	8003eaa <_sbrk_r+0x1a>
 8003ea4:	682b      	ldr	r3, [r5, #0]
 8003ea6:	b103      	cbz	r3, 8003eaa <_sbrk_r+0x1a>
 8003ea8:	6023      	str	r3, [r4, #0]
 8003eaa:	bd38      	pop	{r3, r4, r5, pc}
 8003eac:	200001ec 	.word	0x200001ec

08003eb0 <strcpy>:
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003eb6:	f803 2b01 	strb.w	r2, [r3], #1
 8003eba:	2a00      	cmp	r2, #0
 8003ebc:	d1f9      	bne.n	8003eb2 <strcpy+0x2>
 8003ebe:	4770      	bx	lr

08003ec0 <__assert_func>:
 8003ec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003ec2:	4614      	mov	r4, r2
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4b09      	ldr	r3, [pc, #36]	; (8003eec <__assert_func+0x2c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4605      	mov	r5, r0
 8003ecc:	68d8      	ldr	r0, [r3, #12]
 8003ece:	b14c      	cbz	r4, 8003ee4 <__assert_func+0x24>
 8003ed0:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <__assert_func+0x30>)
 8003ed2:	9100      	str	r1, [sp, #0]
 8003ed4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003ed8:	4906      	ldr	r1, [pc, #24]	; (8003ef4 <__assert_func+0x34>)
 8003eda:	462b      	mov	r3, r5
 8003edc:	f000 fe88 	bl	8004bf0 <fiprintf>
 8003ee0:	f001 f946 	bl	8005170 <abort>
 8003ee4:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <__assert_func+0x38>)
 8003ee6:	461c      	mov	r4, r3
 8003ee8:	e7f3      	b.n	8003ed2 <__assert_func+0x12>
 8003eea:	bf00      	nop
 8003eec:	20000010 	.word	0x20000010
 8003ef0:	08005a1f 	.word	0x08005a1f
 8003ef4:	08005a2c 	.word	0x08005a2c
 8003ef8:	08005a5a 	.word	0x08005a5a

08003efc <quorem>:
 8003efc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f00:	6903      	ldr	r3, [r0, #16]
 8003f02:	690c      	ldr	r4, [r1, #16]
 8003f04:	42a3      	cmp	r3, r4
 8003f06:	4607      	mov	r7, r0
 8003f08:	f2c0 8081 	blt.w	800400e <quorem+0x112>
 8003f0c:	3c01      	subs	r4, #1
 8003f0e:	f101 0814 	add.w	r8, r1, #20
 8003f12:	f100 0514 	add.w	r5, r0, #20
 8003f16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f1a:	9301      	str	r3, [sp, #4]
 8003f1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003f20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f24:	3301      	adds	r3, #1
 8003f26:	429a      	cmp	r2, r3
 8003f28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003f2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003f30:	fbb2 f6f3 	udiv	r6, r2, r3
 8003f34:	d331      	bcc.n	8003f9a <quorem+0x9e>
 8003f36:	f04f 0e00 	mov.w	lr, #0
 8003f3a:	4640      	mov	r0, r8
 8003f3c:	46ac      	mov	ip, r5
 8003f3e:	46f2      	mov	sl, lr
 8003f40:	f850 2b04 	ldr.w	r2, [r0], #4
 8003f44:	b293      	uxth	r3, r2
 8003f46:	fb06 e303 	mla	r3, r6, r3, lr
 8003f4a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	ebaa 0303 	sub.w	r3, sl, r3
 8003f54:	0c12      	lsrs	r2, r2, #16
 8003f56:	f8dc a000 	ldr.w	sl, [ip]
 8003f5a:	fb06 e202 	mla	r2, r6, r2, lr
 8003f5e:	fa13 f38a 	uxtah	r3, r3, sl
 8003f62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003f66:	fa1f fa82 	uxth.w	sl, r2
 8003f6a:	f8dc 2000 	ldr.w	r2, [ip]
 8003f6e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003f72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f7c:	4581      	cmp	r9, r0
 8003f7e:	f84c 3b04 	str.w	r3, [ip], #4
 8003f82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003f86:	d2db      	bcs.n	8003f40 <quorem+0x44>
 8003f88:	f855 300b 	ldr.w	r3, [r5, fp]
 8003f8c:	b92b      	cbnz	r3, 8003f9a <quorem+0x9e>
 8003f8e:	9b01      	ldr	r3, [sp, #4]
 8003f90:	3b04      	subs	r3, #4
 8003f92:	429d      	cmp	r5, r3
 8003f94:	461a      	mov	r2, r3
 8003f96:	d32e      	bcc.n	8003ff6 <quorem+0xfa>
 8003f98:	613c      	str	r4, [r7, #16]
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	f7ff fada 	bl	8003554 <__mcmp>
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	db24      	blt.n	8003fee <quorem+0xf2>
 8003fa4:	3601      	adds	r6, #1
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	f04f 0c00 	mov.w	ip, #0
 8003fac:	f858 2b04 	ldr.w	r2, [r8], #4
 8003fb0:	f8d0 e000 	ldr.w	lr, [r0]
 8003fb4:	b293      	uxth	r3, r2
 8003fb6:	ebac 0303 	sub.w	r3, ip, r3
 8003fba:	0c12      	lsrs	r2, r2, #16
 8003fbc:	fa13 f38e 	uxtah	r3, r3, lr
 8003fc0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003fc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003fce:	45c1      	cmp	r9, r8
 8003fd0:	f840 3b04 	str.w	r3, [r0], #4
 8003fd4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003fd8:	d2e8      	bcs.n	8003fac <quorem+0xb0>
 8003fda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003fde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003fe2:	b922      	cbnz	r2, 8003fee <quorem+0xf2>
 8003fe4:	3b04      	subs	r3, #4
 8003fe6:	429d      	cmp	r5, r3
 8003fe8:	461a      	mov	r2, r3
 8003fea:	d30a      	bcc.n	8004002 <quorem+0x106>
 8003fec:	613c      	str	r4, [r7, #16]
 8003fee:	4630      	mov	r0, r6
 8003ff0:	b003      	add	sp, #12
 8003ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	3b04      	subs	r3, #4
 8003ffa:	2a00      	cmp	r2, #0
 8003ffc:	d1cc      	bne.n	8003f98 <quorem+0x9c>
 8003ffe:	3c01      	subs	r4, #1
 8004000:	e7c7      	b.n	8003f92 <quorem+0x96>
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	3b04      	subs	r3, #4
 8004006:	2a00      	cmp	r2, #0
 8004008:	d1f0      	bne.n	8003fec <quorem+0xf0>
 800400a:	3c01      	subs	r4, #1
 800400c:	e7eb      	b.n	8003fe6 <quorem+0xea>
 800400e:	2000      	movs	r0, #0
 8004010:	e7ee      	b.n	8003ff0 <quorem+0xf4>
 8004012:	0000      	movs	r0, r0
 8004014:	0000      	movs	r0, r0
	...

08004018 <_dtoa_r>:
 8004018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800401c:	ed2d 8b02 	vpush	{d8}
 8004020:	ec57 6b10 	vmov	r6, r7, d0
 8004024:	b095      	sub	sp, #84	; 0x54
 8004026:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004028:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800402c:	9105      	str	r1, [sp, #20]
 800402e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004032:	4604      	mov	r4, r0
 8004034:	9209      	str	r2, [sp, #36]	; 0x24
 8004036:	930f      	str	r3, [sp, #60]	; 0x3c
 8004038:	b975      	cbnz	r5, 8004058 <_dtoa_r+0x40>
 800403a:	2010      	movs	r0, #16
 800403c:	f000 fdea 	bl	8004c14 <malloc>
 8004040:	4602      	mov	r2, r0
 8004042:	6260      	str	r0, [r4, #36]	; 0x24
 8004044:	b920      	cbnz	r0, 8004050 <_dtoa_r+0x38>
 8004046:	4bb2      	ldr	r3, [pc, #712]	; (8004310 <_dtoa_r+0x2f8>)
 8004048:	21ea      	movs	r1, #234	; 0xea
 800404a:	48b2      	ldr	r0, [pc, #712]	; (8004314 <_dtoa_r+0x2fc>)
 800404c:	f7ff ff38 	bl	8003ec0 <__assert_func>
 8004050:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004054:	6005      	str	r5, [r0, #0]
 8004056:	60c5      	str	r5, [r0, #12]
 8004058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800405a:	6819      	ldr	r1, [r3, #0]
 800405c:	b151      	cbz	r1, 8004074 <_dtoa_r+0x5c>
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	604a      	str	r2, [r1, #4]
 8004062:	2301      	movs	r3, #1
 8004064:	4093      	lsls	r3, r2
 8004066:	608b      	str	r3, [r1, #8]
 8004068:	4620      	mov	r0, r4
 800406a:	f7ff f835 	bl	80030d8 <_Bfree>
 800406e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	1e3b      	subs	r3, r7, #0
 8004076:	bfb9      	ittee	lt
 8004078:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800407c:	9303      	strlt	r3, [sp, #12]
 800407e:	2300      	movge	r3, #0
 8004080:	f8c8 3000 	strge.w	r3, [r8]
 8004084:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004088:	4ba3      	ldr	r3, [pc, #652]	; (8004318 <_dtoa_r+0x300>)
 800408a:	bfbc      	itt	lt
 800408c:	2201      	movlt	r2, #1
 800408e:	f8c8 2000 	strlt.w	r2, [r8]
 8004092:	ea33 0309 	bics.w	r3, r3, r9
 8004096:	d11b      	bne.n	80040d0 <_dtoa_r+0xb8>
 8004098:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800409a:	f242 730f 	movw	r3, #9999	; 0x270f
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80040a4:	4333      	orrs	r3, r6
 80040a6:	f000 857a 	beq.w	8004b9e <_dtoa_r+0xb86>
 80040aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040ac:	b963      	cbnz	r3, 80040c8 <_dtoa_r+0xb0>
 80040ae:	4b9b      	ldr	r3, [pc, #620]	; (800431c <_dtoa_r+0x304>)
 80040b0:	e024      	b.n	80040fc <_dtoa_r+0xe4>
 80040b2:	4b9b      	ldr	r3, [pc, #620]	; (8004320 <_dtoa_r+0x308>)
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	3308      	adds	r3, #8
 80040b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	9800      	ldr	r0, [sp, #0]
 80040be:	b015      	add	sp, #84	; 0x54
 80040c0:	ecbd 8b02 	vpop	{d8}
 80040c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c8:	4b94      	ldr	r3, [pc, #592]	; (800431c <_dtoa_r+0x304>)
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	3303      	adds	r3, #3
 80040ce:	e7f3      	b.n	80040b8 <_dtoa_r+0xa0>
 80040d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80040d4:	2200      	movs	r2, #0
 80040d6:	ec51 0b17 	vmov	r0, r1, d7
 80040da:	2300      	movs	r3, #0
 80040dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80040e0:	f7fc fcf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80040e4:	4680      	mov	r8, r0
 80040e6:	b158      	cbz	r0, 8004100 <_dtoa_r+0xe8>
 80040e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80040ea:	2301      	movs	r3, #1
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 8551 	beq.w	8004b98 <_dtoa_r+0xb80>
 80040f6:	488b      	ldr	r0, [pc, #556]	; (8004324 <_dtoa_r+0x30c>)
 80040f8:	6018      	str	r0, [r3, #0]
 80040fa:	1e43      	subs	r3, r0, #1
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	e7dd      	b.n	80040bc <_dtoa_r+0xa4>
 8004100:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004104:	aa12      	add	r2, sp, #72	; 0x48
 8004106:	a913      	add	r1, sp, #76	; 0x4c
 8004108:	4620      	mov	r0, r4
 800410a:	f7ff fac7 	bl	800369c <__d2b>
 800410e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004112:	4683      	mov	fp, r0
 8004114:	2d00      	cmp	r5, #0
 8004116:	d07c      	beq.n	8004212 <_dtoa_r+0x1fa>
 8004118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800411a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800411e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004122:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004126:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800412a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800412e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004132:	4b7d      	ldr	r3, [pc, #500]	; (8004328 <_dtoa_r+0x310>)
 8004134:	2200      	movs	r2, #0
 8004136:	4630      	mov	r0, r6
 8004138:	4639      	mov	r1, r7
 800413a:	f7fc f8a5 	bl	8000288 <__aeabi_dsub>
 800413e:	a36e      	add	r3, pc, #440	; (adr r3, 80042f8 <_dtoa_r+0x2e0>)
 8004140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004144:	f7fc fa58 	bl	80005f8 <__aeabi_dmul>
 8004148:	a36d      	add	r3, pc, #436	; (adr r3, 8004300 <_dtoa_r+0x2e8>)
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	f7fc f89d 	bl	800028c <__adddf3>
 8004152:	4606      	mov	r6, r0
 8004154:	4628      	mov	r0, r5
 8004156:	460f      	mov	r7, r1
 8004158:	f7fc f9e4 	bl	8000524 <__aeabi_i2d>
 800415c:	a36a      	add	r3, pc, #424	; (adr r3, 8004308 <_dtoa_r+0x2f0>)
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f7fc fa49 	bl	80005f8 <__aeabi_dmul>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4630      	mov	r0, r6
 800416c:	4639      	mov	r1, r7
 800416e:	f7fc f88d 	bl	800028c <__adddf3>
 8004172:	4606      	mov	r6, r0
 8004174:	460f      	mov	r7, r1
 8004176:	f7fc fcd9 	bl	8000b2c <__aeabi_d2iz>
 800417a:	2200      	movs	r2, #0
 800417c:	4682      	mov	sl, r0
 800417e:	2300      	movs	r3, #0
 8004180:	4630      	mov	r0, r6
 8004182:	4639      	mov	r1, r7
 8004184:	f7fc fcaa 	bl	8000adc <__aeabi_dcmplt>
 8004188:	b148      	cbz	r0, 800419e <_dtoa_r+0x186>
 800418a:	4650      	mov	r0, sl
 800418c:	f7fc f9ca 	bl	8000524 <__aeabi_i2d>
 8004190:	4632      	mov	r2, r6
 8004192:	463b      	mov	r3, r7
 8004194:	f7fc fc98 	bl	8000ac8 <__aeabi_dcmpeq>
 8004198:	b908      	cbnz	r0, 800419e <_dtoa_r+0x186>
 800419a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800419e:	f1ba 0f16 	cmp.w	sl, #22
 80041a2:	d854      	bhi.n	800424e <_dtoa_r+0x236>
 80041a4:	4b61      	ldr	r3, [pc, #388]	; (800432c <_dtoa_r+0x314>)
 80041a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80041b2:	f7fc fc93 	bl	8000adc <__aeabi_dcmplt>
 80041b6:	2800      	cmp	r0, #0
 80041b8:	d04b      	beq.n	8004252 <_dtoa_r+0x23a>
 80041ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80041be:	2300      	movs	r3, #0
 80041c0:	930e      	str	r3, [sp, #56]	; 0x38
 80041c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80041c4:	1b5d      	subs	r5, r3, r5
 80041c6:	1e6b      	subs	r3, r5, #1
 80041c8:	9304      	str	r3, [sp, #16]
 80041ca:	bf43      	ittte	mi
 80041cc:	2300      	movmi	r3, #0
 80041ce:	f1c5 0801 	rsbmi	r8, r5, #1
 80041d2:	9304      	strmi	r3, [sp, #16]
 80041d4:	f04f 0800 	movpl.w	r8, #0
 80041d8:	f1ba 0f00 	cmp.w	sl, #0
 80041dc:	db3b      	blt.n	8004256 <_dtoa_r+0x23e>
 80041de:	9b04      	ldr	r3, [sp, #16]
 80041e0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80041e4:	4453      	add	r3, sl
 80041e6:	9304      	str	r3, [sp, #16]
 80041e8:	2300      	movs	r3, #0
 80041ea:	9306      	str	r3, [sp, #24]
 80041ec:	9b05      	ldr	r3, [sp, #20]
 80041ee:	2b09      	cmp	r3, #9
 80041f0:	d869      	bhi.n	80042c6 <_dtoa_r+0x2ae>
 80041f2:	2b05      	cmp	r3, #5
 80041f4:	bfc4      	itt	gt
 80041f6:	3b04      	subgt	r3, #4
 80041f8:	9305      	strgt	r3, [sp, #20]
 80041fa:	9b05      	ldr	r3, [sp, #20]
 80041fc:	f1a3 0302 	sub.w	r3, r3, #2
 8004200:	bfcc      	ite	gt
 8004202:	2500      	movgt	r5, #0
 8004204:	2501      	movle	r5, #1
 8004206:	2b03      	cmp	r3, #3
 8004208:	d869      	bhi.n	80042de <_dtoa_r+0x2c6>
 800420a:	e8df f003 	tbb	[pc, r3]
 800420e:	4e2c      	.short	0x4e2c
 8004210:	5a4c      	.short	0x5a4c
 8004212:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004216:	441d      	add	r5, r3
 8004218:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800421c:	2b20      	cmp	r3, #32
 800421e:	bfc1      	itttt	gt
 8004220:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004224:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004228:	fa09 f303 	lslgt.w	r3, r9, r3
 800422c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004230:	bfda      	itte	le
 8004232:	f1c3 0320 	rsble	r3, r3, #32
 8004236:	fa06 f003 	lslle.w	r0, r6, r3
 800423a:	4318      	orrgt	r0, r3
 800423c:	f7fc f962 	bl	8000504 <__aeabi_ui2d>
 8004240:	2301      	movs	r3, #1
 8004242:	4606      	mov	r6, r0
 8004244:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004248:	3d01      	subs	r5, #1
 800424a:	9310      	str	r3, [sp, #64]	; 0x40
 800424c:	e771      	b.n	8004132 <_dtoa_r+0x11a>
 800424e:	2301      	movs	r3, #1
 8004250:	e7b6      	b.n	80041c0 <_dtoa_r+0x1a8>
 8004252:	900e      	str	r0, [sp, #56]	; 0x38
 8004254:	e7b5      	b.n	80041c2 <_dtoa_r+0x1aa>
 8004256:	f1ca 0300 	rsb	r3, sl, #0
 800425a:	9306      	str	r3, [sp, #24]
 800425c:	2300      	movs	r3, #0
 800425e:	eba8 080a 	sub.w	r8, r8, sl
 8004262:	930d      	str	r3, [sp, #52]	; 0x34
 8004264:	e7c2      	b.n	80041ec <_dtoa_r+0x1d4>
 8004266:	2300      	movs	r3, #0
 8004268:	9308      	str	r3, [sp, #32]
 800426a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800426c:	2b00      	cmp	r3, #0
 800426e:	dc39      	bgt.n	80042e4 <_dtoa_r+0x2cc>
 8004270:	f04f 0901 	mov.w	r9, #1
 8004274:	f8cd 9004 	str.w	r9, [sp, #4]
 8004278:	464b      	mov	r3, r9
 800427a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800427e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004280:	2200      	movs	r2, #0
 8004282:	6042      	str	r2, [r0, #4]
 8004284:	2204      	movs	r2, #4
 8004286:	f102 0614 	add.w	r6, r2, #20
 800428a:	429e      	cmp	r6, r3
 800428c:	6841      	ldr	r1, [r0, #4]
 800428e:	d92f      	bls.n	80042f0 <_dtoa_r+0x2d8>
 8004290:	4620      	mov	r0, r4
 8004292:	f7fe fee1 	bl	8003058 <_Balloc>
 8004296:	9000      	str	r0, [sp, #0]
 8004298:	2800      	cmp	r0, #0
 800429a:	d14b      	bne.n	8004334 <_dtoa_r+0x31c>
 800429c:	4b24      	ldr	r3, [pc, #144]	; (8004330 <_dtoa_r+0x318>)
 800429e:	4602      	mov	r2, r0
 80042a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80042a4:	e6d1      	b.n	800404a <_dtoa_r+0x32>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e7de      	b.n	8004268 <_dtoa_r+0x250>
 80042aa:	2300      	movs	r3, #0
 80042ac:	9308      	str	r3, [sp, #32]
 80042ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042b0:	eb0a 0903 	add.w	r9, sl, r3
 80042b4:	f109 0301 	add.w	r3, r9, #1
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	9301      	str	r3, [sp, #4]
 80042bc:	bfb8      	it	lt
 80042be:	2301      	movlt	r3, #1
 80042c0:	e7dd      	b.n	800427e <_dtoa_r+0x266>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e7f2      	b.n	80042ac <_dtoa_r+0x294>
 80042c6:	2501      	movs	r5, #1
 80042c8:	2300      	movs	r3, #0
 80042ca:	9305      	str	r3, [sp, #20]
 80042cc:	9508      	str	r5, [sp, #32]
 80042ce:	f04f 39ff 	mov.w	r9, #4294967295
 80042d2:	2200      	movs	r2, #0
 80042d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80042d8:	2312      	movs	r3, #18
 80042da:	9209      	str	r2, [sp, #36]	; 0x24
 80042dc:	e7cf      	b.n	800427e <_dtoa_r+0x266>
 80042de:	2301      	movs	r3, #1
 80042e0:	9308      	str	r3, [sp, #32]
 80042e2:	e7f4      	b.n	80042ce <_dtoa_r+0x2b6>
 80042e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80042e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80042ec:	464b      	mov	r3, r9
 80042ee:	e7c6      	b.n	800427e <_dtoa_r+0x266>
 80042f0:	3101      	adds	r1, #1
 80042f2:	6041      	str	r1, [r0, #4]
 80042f4:	0052      	lsls	r2, r2, #1
 80042f6:	e7c6      	b.n	8004286 <_dtoa_r+0x26e>
 80042f8:	636f4361 	.word	0x636f4361
 80042fc:	3fd287a7 	.word	0x3fd287a7
 8004300:	8b60c8b3 	.word	0x8b60c8b3
 8004304:	3fc68a28 	.word	0x3fc68a28
 8004308:	509f79fb 	.word	0x509f79fb
 800430c:	3fd34413 	.word	0x3fd34413
 8004310:	08005864 	.word	0x08005864
 8004314:	08005a6a 	.word	0x08005a6a
 8004318:	7ff00000 	.word	0x7ff00000
 800431c:	08005a64 	.word	0x08005a64
 8004320:	08005a5b 	.word	0x08005a5b
 8004324:	08005a69 	.word	0x08005a69
 8004328:	3ff80000 	.word	0x3ff80000
 800432c:	08005918 	.word	0x08005918
 8004330:	080058db 	.word	0x080058db
 8004334:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004336:	9a00      	ldr	r2, [sp, #0]
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	9b01      	ldr	r3, [sp, #4]
 800433c:	2b0e      	cmp	r3, #14
 800433e:	f200 80ad 	bhi.w	800449c <_dtoa_r+0x484>
 8004342:	2d00      	cmp	r5, #0
 8004344:	f000 80aa 	beq.w	800449c <_dtoa_r+0x484>
 8004348:	f1ba 0f00 	cmp.w	sl, #0
 800434c:	dd36      	ble.n	80043bc <_dtoa_r+0x3a4>
 800434e:	4ac3      	ldr	r2, [pc, #780]	; (800465c <_dtoa_r+0x644>)
 8004350:	f00a 030f 	and.w	r3, sl, #15
 8004354:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004358:	ed93 7b00 	vldr	d7, [r3]
 800435c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004360:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004364:	eeb0 8a47 	vmov.f32	s16, s14
 8004368:	eef0 8a67 	vmov.f32	s17, s15
 800436c:	d016      	beq.n	800439c <_dtoa_r+0x384>
 800436e:	4bbc      	ldr	r3, [pc, #752]	; (8004660 <_dtoa_r+0x648>)
 8004370:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004374:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004378:	f7fc fa68 	bl	800084c <__aeabi_ddiv>
 800437c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004380:	f007 070f 	and.w	r7, r7, #15
 8004384:	2503      	movs	r5, #3
 8004386:	4eb6      	ldr	r6, [pc, #728]	; (8004660 <_dtoa_r+0x648>)
 8004388:	b957      	cbnz	r7, 80043a0 <_dtoa_r+0x388>
 800438a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800438e:	ec53 2b18 	vmov	r2, r3, d8
 8004392:	f7fc fa5b 	bl	800084c <__aeabi_ddiv>
 8004396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800439a:	e029      	b.n	80043f0 <_dtoa_r+0x3d8>
 800439c:	2502      	movs	r5, #2
 800439e:	e7f2      	b.n	8004386 <_dtoa_r+0x36e>
 80043a0:	07f9      	lsls	r1, r7, #31
 80043a2:	d508      	bpl.n	80043b6 <_dtoa_r+0x39e>
 80043a4:	ec51 0b18 	vmov	r0, r1, d8
 80043a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80043ac:	f7fc f924 	bl	80005f8 <__aeabi_dmul>
 80043b0:	ec41 0b18 	vmov	d8, r0, r1
 80043b4:	3501      	adds	r5, #1
 80043b6:	107f      	asrs	r7, r7, #1
 80043b8:	3608      	adds	r6, #8
 80043ba:	e7e5      	b.n	8004388 <_dtoa_r+0x370>
 80043bc:	f000 80a6 	beq.w	800450c <_dtoa_r+0x4f4>
 80043c0:	f1ca 0600 	rsb	r6, sl, #0
 80043c4:	4ba5      	ldr	r3, [pc, #660]	; (800465c <_dtoa_r+0x644>)
 80043c6:	4fa6      	ldr	r7, [pc, #664]	; (8004660 <_dtoa_r+0x648>)
 80043c8:	f006 020f 	and.w	r2, r6, #15
 80043cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80043d8:	f7fc f90e 	bl	80005f8 <__aeabi_dmul>
 80043dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043e0:	1136      	asrs	r6, r6, #4
 80043e2:	2300      	movs	r3, #0
 80043e4:	2502      	movs	r5, #2
 80043e6:	2e00      	cmp	r6, #0
 80043e8:	f040 8085 	bne.w	80044f6 <_dtoa_r+0x4de>
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1d2      	bne.n	8004396 <_dtoa_r+0x37e>
 80043f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 808c 	beq.w	8004510 <_dtoa_r+0x4f8>
 80043f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80043fc:	4b99      	ldr	r3, [pc, #612]	; (8004664 <_dtoa_r+0x64c>)
 80043fe:	2200      	movs	r2, #0
 8004400:	4630      	mov	r0, r6
 8004402:	4639      	mov	r1, r7
 8004404:	f7fc fb6a 	bl	8000adc <__aeabi_dcmplt>
 8004408:	2800      	cmp	r0, #0
 800440a:	f000 8081 	beq.w	8004510 <_dtoa_r+0x4f8>
 800440e:	9b01      	ldr	r3, [sp, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d07d      	beq.n	8004510 <_dtoa_r+0x4f8>
 8004414:	f1b9 0f00 	cmp.w	r9, #0
 8004418:	dd3c      	ble.n	8004494 <_dtoa_r+0x47c>
 800441a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800441e:	9307      	str	r3, [sp, #28]
 8004420:	2200      	movs	r2, #0
 8004422:	4b91      	ldr	r3, [pc, #580]	; (8004668 <_dtoa_r+0x650>)
 8004424:	4630      	mov	r0, r6
 8004426:	4639      	mov	r1, r7
 8004428:	f7fc f8e6 	bl	80005f8 <__aeabi_dmul>
 800442c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004430:	3501      	adds	r5, #1
 8004432:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004436:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800443a:	4628      	mov	r0, r5
 800443c:	f7fc f872 	bl	8000524 <__aeabi_i2d>
 8004440:	4632      	mov	r2, r6
 8004442:	463b      	mov	r3, r7
 8004444:	f7fc f8d8 	bl	80005f8 <__aeabi_dmul>
 8004448:	4b88      	ldr	r3, [pc, #544]	; (800466c <_dtoa_r+0x654>)
 800444a:	2200      	movs	r2, #0
 800444c:	f7fb ff1e 	bl	800028c <__adddf3>
 8004450:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004454:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004458:	9303      	str	r3, [sp, #12]
 800445a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800445c:	2b00      	cmp	r3, #0
 800445e:	d15c      	bne.n	800451a <_dtoa_r+0x502>
 8004460:	4b83      	ldr	r3, [pc, #524]	; (8004670 <_dtoa_r+0x658>)
 8004462:	2200      	movs	r2, #0
 8004464:	4630      	mov	r0, r6
 8004466:	4639      	mov	r1, r7
 8004468:	f7fb ff0e 	bl	8000288 <__aeabi_dsub>
 800446c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004470:	4606      	mov	r6, r0
 8004472:	460f      	mov	r7, r1
 8004474:	f7fc fb50 	bl	8000b18 <__aeabi_dcmpgt>
 8004478:	2800      	cmp	r0, #0
 800447a:	f040 8296 	bne.w	80049aa <_dtoa_r+0x992>
 800447e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004482:	4630      	mov	r0, r6
 8004484:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004488:	4639      	mov	r1, r7
 800448a:	f7fc fb27 	bl	8000adc <__aeabi_dcmplt>
 800448e:	2800      	cmp	r0, #0
 8004490:	f040 8288 	bne.w	80049a4 <_dtoa_r+0x98c>
 8004494:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004498:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800449c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f2c0 8158 	blt.w	8004754 <_dtoa_r+0x73c>
 80044a4:	f1ba 0f0e 	cmp.w	sl, #14
 80044a8:	f300 8154 	bgt.w	8004754 <_dtoa_r+0x73c>
 80044ac:	4b6b      	ldr	r3, [pc, #428]	; (800465c <_dtoa_r+0x644>)
 80044ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80044b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80044b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f280 80e3 	bge.w	8004684 <_dtoa_r+0x66c>
 80044be:	9b01      	ldr	r3, [sp, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f300 80df 	bgt.w	8004684 <_dtoa_r+0x66c>
 80044c6:	f040 826d 	bne.w	80049a4 <_dtoa_r+0x98c>
 80044ca:	4b69      	ldr	r3, [pc, #420]	; (8004670 <_dtoa_r+0x658>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	4640      	mov	r0, r8
 80044d0:	4649      	mov	r1, r9
 80044d2:	f7fc f891 	bl	80005f8 <__aeabi_dmul>
 80044d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044da:	f7fc fb13 	bl	8000b04 <__aeabi_dcmpge>
 80044de:	9e01      	ldr	r6, [sp, #4]
 80044e0:	4637      	mov	r7, r6
 80044e2:	2800      	cmp	r0, #0
 80044e4:	f040 8243 	bne.w	800496e <_dtoa_r+0x956>
 80044e8:	9d00      	ldr	r5, [sp, #0]
 80044ea:	2331      	movs	r3, #49	; 0x31
 80044ec:	f805 3b01 	strb.w	r3, [r5], #1
 80044f0:	f10a 0a01 	add.w	sl, sl, #1
 80044f4:	e23f      	b.n	8004976 <_dtoa_r+0x95e>
 80044f6:	07f2      	lsls	r2, r6, #31
 80044f8:	d505      	bpl.n	8004506 <_dtoa_r+0x4ee>
 80044fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044fe:	f7fc f87b 	bl	80005f8 <__aeabi_dmul>
 8004502:	3501      	adds	r5, #1
 8004504:	2301      	movs	r3, #1
 8004506:	1076      	asrs	r6, r6, #1
 8004508:	3708      	adds	r7, #8
 800450a:	e76c      	b.n	80043e6 <_dtoa_r+0x3ce>
 800450c:	2502      	movs	r5, #2
 800450e:	e76f      	b.n	80043f0 <_dtoa_r+0x3d8>
 8004510:	9b01      	ldr	r3, [sp, #4]
 8004512:	f8cd a01c 	str.w	sl, [sp, #28]
 8004516:	930c      	str	r3, [sp, #48]	; 0x30
 8004518:	e78d      	b.n	8004436 <_dtoa_r+0x41e>
 800451a:	9900      	ldr	r1, [sp, #0]
 800451c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800451e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004520:	4b4e      	ldr	r3, [pc, #312]	; (800465c <_dtoa_r+0x644>)
 8004522:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004526:	4401      	add	r1, r0
 8004528:	9102      	str	r1, [sp, #8]
 800452a:	9908      	ldr	r1, [sp, #32]
 800452c:	eeb0 8a47 	vmov.f32	s16, s14
 8004530:	eef0 8a67 	vmov.f32	s17, s15
 8004534:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004538:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800453c:	2900      	cmp	r1, #0
 800453e:	d045      	beq.n	80045cc <_dtoa_r+0x5b4>
 8004540:	494c      	ldr	r1, [pc, #304]	; (8004674 <_dtoa_r+0x65c>)
 8004542:	2000      	movs	r0, #0
 8004544:	f7fc f982 	bl	800084c <__aeabi_ddiv>
 8004548:	ec53 2b18 	vmov	r2, r3, d8
 800454c:	f7fb fe9c 	bl	8000288 <__aeabi_dsub>
 8004550:	9d00      	ldr	r5, [sp, #0]
 8004552:	ec41 0b18 	vmov	d8, r0, r1
 8004556:	4639      	mov	r1, r7
 8004558:	4630      	mov	r0, r6
 800455a:	f7fc fae7 	bl	8000b2c <__aeabi_d2iz>
 800455e:	900c      	str	r0, [sp, #48]	; 0x30
 8004560:	f7fb ffe0 	bl	8000524 <__aeabi_i2d>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4630      	mov	r0, r6
 800456a:	4639      	mov	r1, r7
 800456c:	f7fb fe8c 	bl	8000288 <__aeabi_dsub>
 8004570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004572:	3330      	adds	r3, #48	; 0x30
 8004574:	f805 3b01 	strb.w	r3, [r5], #1
 8004578:	ec53 2b18 	vmov	r2, r3, d8
 800457c:	4606      	mov	r6, r0
 800457e:	460f      	mov	r7, r1
 8004580:	f7fc faac 	bl	8000adc <__aeabi_dcmplt>
 8004584:	2800      	cmp	r0, #0
 8004586:	d165      	bne.n	8004654 <_dtoa_r+0x63c>
 8004588:	4632      	mov	r2, r6
 800458a:	463b      	mov	r3, r7
 800458c:	4935      	ldr	r1, [pc, #212]	; (8004664 <_dtoa_r+0x64c>)
 800458e:	2000      	movs	r0, #0
 8004590:	f7fb fe7a 	bl	8000288 <__aeabi_dsub>
 8004594:	ec53 2b18 	vmov	r2, r3, d8
 8004598:	f7fc faa0 	bl	8000adc <__aeabi_dcmplt>
 800459c:	2800      	cmp	r0, #0
 800459e:	f040 80b9 	bne.w	8004714 <_dtoa_r+0x6fc>
 80045a2:	9b02      	ldr	r3, [sp, #8]
 80045a4:	429d      	cmp	r5, r3
 80045a6:	f43f af75 	beq.w	8004494 <_dtoa_r+0x47c>
 80045aa:	4b2f      	ldr	r3, [pc, #188]	; (8004668 <_dtoa_r+0x650>)
 80045ac:	ec51 0b18 	vmov	r0, r1, d8
 80045b0:	2200      	movs	r2, #0
 80045b2:	f7fc f821 	bl	80005f8 <__aeabi_dmul>
 80045b6:	4b2c      	ldr	r3, [pc, #176]	; (8004668 <_dtoa_r+0x650>)
 80045b8:	ec41 0b18 	vmov	d8, r0, r1
 80045bc:	2200      	movs	r2, #0
 80045be:	4630      	mov	r0, r6
 80045c0:	4639      	mov	r1, r7
 80045c2:	f7fc f819 	bl	80005f8 <__aeabi_dmul>
 80045c6:	4606      	mov	r6, r0
 80045c8:	460f      	mov	r7, r1
 80045ca:	e7c4      	b.n	8004556 <_dtoa_r+0x53e>
 80045cc:	ec51 0b17 	vmov	r0, r1, d7
 80045d0:	f7fc f812 	bl	80005f8 <__aeabi_dmul>
 80045d4:	9b02      	ldr	r3, [sp, #8]
 80045d6:	9d00      	ldr	r5, [sp, #0]
 80045d8:	930c      	str	r3, [sp, #48]	; 0x30
 80045da:	ec41 0b18 	vmov	d8, r0, r1
 80045de:	4639      	mov	r1, r7
 80045e0:	4630      	mov	r0, r6
 80045e2:	f7fc faa3 	bl	8000b2c <__aeabi_d2iz>
 80045e6:	9011      	str	r0, [sp, #68]	; 0x44
 80045e8:	f7fb ff9c 	bl	8000524 <__aeabi_i2d>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4630      	mov	r0, r6
 80045f2:	4639      	mov	r1, r7
 80045f4:	f7fb fe48 	bl	8000288 <__aeabi_dsub>
 80045f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80045fa:	3330      	adds	r3, #48	; 0x30
 80045fc:	f805 3b01 	strb.w	r3, [r5], #1
 8004600:	9b02      	ldr	r3, [sp, #8]
 8004602:	429d      	cmp	r5, r3
 8004604:	4606      	mov	r6, r0
 8004606:	460f      	mov	r7, r1
 8004608:	f04f 0200 	mov.w	r2, #0
 800460c:	d134      	bne.n	8004678 <_dtoa_r+0x660>
 800460e:	4b19      	ldr	r3, [pc, #100]	; (8004674 <_dtoa_r+0x65c>)
 8004610:	ec51 0b18 	vmov	r0, r1, d8
 8004614:	f7fb fe3a 	bl	800028c <__adddf3>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4630      	mov	r0, r6
 800461e:	4639      	mov	r1, r7
 8004620:	f7fc fa7a 	bl	8000b18 <__aeabi_dcmpgt>
 8004624:	2800      	cmp	r0, #0
 8004626:	d175      	bne.n	8004714 <_dtoa_r+0x6fc>
 8004628:	ec53 2b18 	vmov	r2, r3, d8
 800462c:	4911      	ldr	r1, [pc, #68]	; (8004674 <_dtoa_r+0x65c>)
 800462e:	2000      	movs	r0, #0
 8004630:	f7fb fe2a 	bl	8000288 <__aeabi_dsub>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4630      	mov	r0, r6
 800463a:	4639      	mov	r1, r7
 800463c:	f7fc fa4e 	bl	8000adc <__aeabi_dcmplt>
 8004640:	2800      	cmp	r0, #0
 8004642:	f43f af27 	beq.w	8004494 <_dtoa_r+0x47c>
 8004646:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004648:	1e6b      	subs	r3, r5, #1
 800464a:	930c      	str	r3, [sp, #48]	; 0x30
 800464c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004650:	2b30      	cmp	r3, #48	; 0x30
 8004652:	d0f8      	beq.n	8004646 <_dtoa_r+0x62e>
 8004654:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004658:	e04a      	b.n	80046f0 <_dtoa_r+0x6d8>
 800465a:	bf00      	nop
 800465c:	08005918 	.word	0x08005918
 8004660:	080058f0 	.word	0x080058f0
 8004664:	3ff00000 	.word	0x3ff00000
 8004668:	40240000 	.word	0x40240000
 800466c:	401c0000 	.word	0x401c0000
 8004670:	40140000 	.word	0x40140000
 8004674:	3fe00000 	.word	0x3fe00000
 8004678:	4baf      	ldr	r3, [pc, #700]	; (8004938 <_dtoa_r+0x920>)
 800467a:	f7fb ffbd 	bl	80005f8 <__aeabi_dmul>
 800467e:	4606      	mov	r6, r0
 8004680:	460f      	mov	r7, r1
 8004682:	e7ac      	b.n	80045de <_dtoa_r+0x5c6>
 8004684:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004688:	9d00      	ldr	r5, [sp, #0]
 800468a:	4642      	mov	r2, r8
 800468c:	464b      	mov	r3, r9
 800468e:	4630      	mov	r0, r6
 8004690:	4639      	mov	r1, r7
 8004692:	f7fc f8db 	bl	800084c <__aeabi_ddiv>
 8004696:	f7fc fa49 	bl	8000b2c <__aeabi_d2iz>
 800469a:	9002      	str	r0, [sp, #8]
 800469c:	f7fb ff42 	bl	8000524 <__aeabi_i2d>
 80046a0:	4642      	mov	r2, r8
 80046a2:	464b      	mov	r3, r9
 80046a4:	f7fb ffa8 	bl	80005f8 <__aeabi_dmul>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4630      	mov	r0, r6
 80046ae:	4639      	mov	r1, r7
 80046b0:	f7fb fdea 	bl	8000288 <__aeabi_dsub>
 80046b4:	9e02      	ldr	r6, [sp, #8]
 80046b6:	9f01      	ldr	r7, [sp, #4]
 80046b8:	3630      	adds	r6, #48	; 0x30
 80046ba:	f805 6b01 	strb.w	r6, [r5], #1
 80046be:	9e00      	ldr	r6, [sp, #0]
 80046c0:	1bae      	subs	r6, r5, r6
 80046c2:	42b7      	cmp	r7, r6
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	d137      	bne.n	800473a <_dtoa_r+0x722>
 80046ca:	f7fb fddf 	bl	800028c <__adddf3>
 80046ce:	4642      	mov	r2, r8
 80046d0:	464b      	mov	r3, r9
 80046d2:	4606      	mov	r6, r0
 80046d4:	460f      	mov	r7, r1
 80046d6:	f7fc fa1f 	bl	8000b18 <__aeabi_dcmpgt>
 80046da:	b9c8      	cbnz	r0, 8004710 <_dtoa_r+0x6f8>
 80046dc:	4642      	mov	r2, r8
 80046de:	464b      	mov	r3, r9
 80046e0:	4630      	mov	r0, r6
 80046e2:	4639      	mov	r1, r7
 80046e4:	f7fc f9f0 	bl	8000ac8 <__aeabi_dcmpeq>
 80046e8:	b110      	cbz	r0, 80046f0 <_dtoa_r+0x6d8>
 80046ea:	9b02      	ldr	r3, [sp, #8]
 80046ec:	07d9      	lsls	r1, r3, #31
 80046ee:	d40f      	bmi.n	8004710 <_dtoa_r+0x6f8>
 80046f0:	4620      	mov	r0, r4
 80046f2:	4659      	mov	r1, fp
 80046f4:	f7fe fcf0 	bl	80030d8 <_Bfree>
 80046f8:	2300      	movs	r3, #0
 80046fa:	702b      	strb	r3, [r5, #0]
 80046fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046fe:	f10a 0001 	add.w	r0, sl, #1
 8004702:	6018      	str	r0, [r3, #0]
 8004704:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004706:	2b00      	cmp	r3, #0
 8004708:	f43f acd8 	beq.w	80040bc <_dtoa_r+0xa4>
 800470c:	601d      	str	r5, [r3, #0]
 800470e:	e4d5      	b.n	80040bc <_dtoa_r+0xa4>
 8004710:	f8cd a01c 	str.w	sl, [sp, #28]
 8004714:	462b      	mov	r3, r5
 8004716:	461d      	mov	r5, r3
 8004718:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800471c:	2a39      	cmp	r2, #57	; 0x39
 800471e:	d108      	bne.n	8004732 <_dtoa_r+0x71a>
 8004720:	9a00      	ldr	r2, [sp, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d1f7      	bne.n	8004716 <_dtoa_r+0x6fe>
 8004726:	9a07      	ldr	r2, [sp, #28]
 8004728:	9900      	ldr	r1, [sp, #0]
 800472a:	3201      	adds	r2, #1
 800472c:	9207      	str	r2, [sp, #28]
 800472e:	2230      	movs	r2, #48	; 0x30
 8004730:	700a      	strb	r2, [r1, #0]
 8004732:	781a      	ldrb	r2, [r3, #0]
 8004734:	3201      	adds	r2, #1
 8004736:	701a      	strb	r2, [r3, #0]
 8004738:	e78c      	b.n	8004654 <_dtoa_r+0x63c>
 800473a:	4b7f      	ldr	r3, [pc, #508]	; (8004938 <_dtoa_r+0x920>)
 800473c:	2200      	movs	r2, #0
 800473e:	f7fb ff5b 	bl	80005f8 <__aeabi_dmul>
 8004742:	2200      	movs	r2, #0
 8004744:	2300      	movs	r3, #0
 8004746:	4606      	mov	r6, r0
 8004748:	460f      	mov	r7, r1
 800474a:	f7fc f9bd 	bl	8000ac8 <__aeabi_dcmpeq>
 800474e:	2800      	cmp	r0, #0
 8004750:	d09b      	beq.n	800468a <_dtoa_r+0x672>
 8004752:	e7cd      	b.n	80046f0 <_dtoa_r+0x6d8>
 8004754:	9a08      	ldr	r2, [sp, #32]
 8004756:	2a00      	cmp	r2, #0
 8004758:	f000 80c4 	beq.w	80048e4 <_dtoa_r+0x8cc>
 800475c:	9a05      	ldr	r2, [sp, #20]
 800475e:	2a01      	cmp	r2, #1
 8004760:	f300 80a8 	bgt.w	80048b4 <_dtoa_r+0x89c>
 8004764:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004766:	2a00      	cmp	r2, #0
 8004768:	f000 80a0 	beq.w	80048ac <_dtoa_r+0x894>
 800476c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004770:	9e06      	ldr	r6, [sp, #24]
 8004772:	4645      	mov	r5, r8
 8004774:	9a04      	ldr	r2, [sp, #16]
 8004776:	2101      	movs	r1, #1
 8004778:	441a      	add	r2, r3
 800477a:	4620      	mov	r0, r4
 800477c:	4498      	add	r8, r3
 800477e:	9204      	str	r2, [sp, #16]
 8004780:	f7fe fd66 	bl	8003250 <__i2b>
 8004784:	4607      	mov	r7, r0
 8004786:	2d00      	cmp	r5, #0
 8004788:	dd0b      	ble.n	80047a2 <_dtoa_r+0x78a>
 800478a:	9b04      	ldr	r3, [sp, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	dd08      	ble.n	80047a2 <_dtoa_r+0x78a>
 8004790:	42ab      	cmp	r3, r5
 8004792:	9a04      	ldr	r2, [sp, #16]
 8004794:	bfa8      	it	ge
 8004796:	462b      	movge	r3, r5
 8004798:	eba8 0803 	sub.w	r8, r8, r3
 800479c:	1aed      	subs	r5, r5, r3
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	9304      	str	r3, [sp, #16]
 80047a2:	9b06      	ldr	r3, [sp, #24]
 80047a4:	b1fb      	cbz	r3, 80047e6 <_dtoa_r+0x7ce>
 80047a6:	9b08      	ldr	r3, [sp, #32]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 809f 	beq.w	80048ec <_dtoa_r+0x8d4>
 80047ae:	2e00      	cmp	r6, #0
 80047b0:	dd11      	ble.n	80047d6 <_dtoa_r+0x7be>
 80047b2:	4639      	mov	r1, r7
 80047b4:	4632      	mov	r2, r6
 80047b6:	4620      	mov	r0, r4
 80047b8:	f7fe fe06 	bl	80033c8 <__pow5mult>
 80047bc:	465a      	mov	r2, fp
 80047be:	4601      	mov	r1, r0
 80047c0:	4607      	mov	r7, r0
 80047c2:	4620      	mov	r0, r4
 80047c4:	f7fe fd5a 	bl	800327c <__multiply>
 80047c8:	4659      	mov	r1, fp
 80047ca:	9007      	str	r0, [sp, #28]
 80047cc:	4620      	mov	r0, r4
 80047ce:	f7fe fc83 	bl	80030d8 <_Bfree>
 80047d2:	9b07      	ldr	r3, [sp, #28]
 80047d4:	469b      	mov	fp, r3
 80047d6:	9b06      	ldr	r3, [sp, #24]
 80047d8:	1b9a      	subs	r2, r3, r6
 80047da:	d004      	beq.n	80047e6 <_dtoa_r+0x7ce>
 80047dc:	4659      	mov	r1, fp
 80047de:	4620      	mov	r0, r4
 80047e0:	f7fe fdf2 	bl	80033c8 <__pow5mult>
 80047e4:	4683      	mov	fp, r0
 80047e6:	2101      	movs	r1, #1
 80047e8:	4620      	mov	r0, r4
 80047ea:	f7fe fd31 	bl	8003250 <__i2b>
 80047ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	4606      	mov	r6, r0
 80047f4:	dd7c      	ble.n	80048f0 <_dtoa_r+0x8d8>
 80047f6:	461a      	mov	r2, r3
 80047f8:	4601      	mov	r1, r0
 80047fa:	4620      	mov	r0, r4
 80047fc:	f7fe fde4 	bl	80033c8 <__pow5mult>
 8004800:	9b05      	ldr	r3, [sp, #20]
 8004802:	2b01      	cmp	r3, #1
 8004804:	4606      	mov	r6, r0
 8004806:	dd76      	ble.n	80048f6 <_dtoa_r+0x8de>
 8004808:	2300      	movs	r3, #0
 800480a:	9306      	str	r3, [sp, #24]
 800480c:	6933      	ldr	r3, [r6, #16]
 800480e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004812:	6918      	ldr	r0, [r3, #16]
 8004814:	f7fe fccc 	bl	80031b0 <__hi0bits>
 8004818:	f1c0 0020 	rsb	r0, r0, #32
 800481c:	9b04      	ldr	r3, [sp, #16]
 800481e:	4418      	add	r0, r3
 8004820:	f010 001f 	ands.w	r0, r0, #31
 8004824:	f000 8086 	beq.w	8004934 <_dtoa_r+0x91c>
 8004828:	f1c0 0320 	rsb	r3, r0, #32
 800482c:	2b04      	cmp	r3, #4
 800482e:	dd7f      	ble.n	8004930 <_dtoa_r+0x918>
 8004830:	f1c0 001c 	rsb	r0, r0, #28
 8004834:	9b04      	ldr	r3, [sp, #16]
 8004836:	4403      	add	r3, r0
 8004838:	4480      	add	r8, r0
 800483a:	4405      	add	r5, r0
 800483c:	9304      	str	r3, [sp, #16]
 800483e:	f1b8 0f00 	cmp.w	r8, #0
 8004842:	dd05      	ble.n	8004850 <_dtoa_r+0x838>
 8004844:	4659      	mov	r1, fp
 8004846:	4642      	mov	r2, r8
 8004848:	4620      	mov	r0, r4
 800484a:	f7fe fe17 	bl	800347c <__lshift>
 800484e:	4683      	mov	fp, r0
 8004850:	9b04      	ldr	r3, [sp, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	dd05      	ble.n	8004862 <_dtoa_r+0x84a>
 8004856:	4631      	mov	r1, r6
 8004858:	461a      	mov	r2, r3
 800485a:	4620      	mov	r0, r4
 800485c:	f7fe fe0e 	bl	800347c <__lshift>
 8004860:	4606      	mov	r6, r0
 8004862:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004864:	2b00      	cmp	r3, #0
 8004866:	d069      	beq.n	800493c <_dtoa_r+0x924>
 8004868:	4631      	mov	r1, r6
 800486a:	4658      	mov	r0, fp
 800486c:	f7fe fe72 	bl	8003554 <__mcmp>
 8004870:	2800      	cmp	r0, #0
 8004872:	da63      	bge.n	800493c <_dtoa_r+0x924>
 8004874:	2300      	movs	r3, #0
 8004876:	4659      	mov	r1, fp
 8004878:	220a      	movs	r2, #10
 800487a:	4620      	mov	r0, r4
 800487c:	f7fe fc4e 	bl	800311c <__multadd>
 8004880:	9b08      	ldr	r3, [sp, #32]
 8004882:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004886:	4683      	mov	fp, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 818f 	beq.w	8004bac <_dtoa_r+0xb94>
 800488e:	4639      	mov	r1, r7
 8004890:	2300      	movs	r3, #0
 8004892:	220a      	movs	r2, #10
 8004894:	4620      	mov	r0, r4
 8004896:	f7fe fc41 	bl	800311c <__multadd>
 800489a:	f1b9 0f00 	cmp.w	r9, #0
 800489e:	4607      	mov	r7, r0
 80048a0:	f300 808e 	bgt.w	80049c0 <_dtoa_r+0x9a8>
 80048a4:	9b05      	ldr	r3, [sp, #20]
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	dc50      	bgt.n	800494c <_dtoa_r+0x934>
 80048aa:	e089      	b.n	80049c0 <_dtoa_r+0x9a8>
 80048ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80048b2:	e75d      	b.n	8004770 <_dtoa_r+0x758>
 80048b4:	9b01      	ldr	r3, [sp, #4]
 80048b6:	1e5e      	subs	r6, r3, #1
 80048b8:	9b06      	ldr	r3, [sp, #24]
 80048ba:	42b3      	cmp	r3, r6
 80048bc:	bfbf      	itttt	lt
 80048be:	9b06      	ldrlt	r3, [sp, #24]
 80048c0:	9606      	strlt	r6, [sp, #24]
 80048c2:	1af2      	sublt	r2, r6, r3
 80048c4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80048c6:	bfb6      	itet	lt
 80048c8:	189b      	addlt	r3, r3, r2
 80048ca:	1b9e      	subge	r6, r3, r6
 80048cc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80048ce:	9b01      	ldr	r3, [sp, #4]
 80048d0:	bfb8      	it	lt
 80048d2:	2600      	movlt	r6, #0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bfb5      	itete	lt
 80048d8:	eba8 0503 	sublt.w	r5, r8, r3
 80048dc:	9b01      	ldrge	r3, [sp, #4]
 80048de:	2300      	movlt	r3, #0
 80048e0:	4645      	movge	r5, r8
 80048e2:	e747      	b.n	8004774 <_dtoa_r+0x75c>
 80048e4:	9e06      	ldr	r6, [sp, #24]
 80048e6:	9f08      	ldr	r7, [sp, #32]
 80048e8:	4645      	mov	r5, r8
 80048ea:	e74c      	b.n	8004786 <_dtoa_r+0x76e>
 80048ec:	9a06      	ldr	r2, [sp, #24]
 80048ee:	e775      	b.n	80047dc <_dtoa_r+0x7c4>
 80048f0:	9b05      	ldr	r3, [sp, #20]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	dc18      	bgt.n	8004928 <_dtoa_r+0x910>
 80048f6:	9b02      	ldr	r3, [sp, #8]
 80048f8:	b9b3      	cbnz	r3, 8004928 <_dtoa_r+0x910>
 80048fa:	9b03      	ldr	r3, [sp, #12]
 80048fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004900:	b9a3      	cbnz	r3, 800492c <_dtoa_r+0x914>
 8004902:	9b03      	ldr	r3, [sp, #12]
 8004904:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004908:	0d1b      	lsrs	r3, r3, #20
 800490a:	051b      	lsls	r3, r3, #20
 800490c:	b12b      	cbz	r3, 800491a <_dtoa_r+0x902>
 800490e:	9b04      	ldr	r3, [sp, #16]
 8004910:	3301      	adds	r3, #1
 8004912:	9304      	str	r3, [sp, #16]
 8004914:	f108 0801 	add.w	r8, r8, #1
 8004918:	2301      	movs	r3, #1
 800491a:	9306      	str	r3, [sp, #24]
 800491c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800491e:	2b00      	cmp	r3, #0
 8004920:	f47f af74 	bne.w	800480c <_dtoa_r+0x7f4>
 8004924:	2001      	movs	r0, #1
 8004926:	e779      	b.n	800481c <_dtoa_r+0x804>
 8004928:	2300      	movs	r3, #0
 800492a:	e7f6      	b.n	800491a <_dtoa_r+0x902>
 800492c:	9b02      	ldr	r3, [sp, #8]
 800492e:	e7f4      	b.n	800491a <_dtoa_r+0x902>
 8004930:	d085      	beq.n	800483e <_dtoa_r+0x826>
 8004932:	4618      	mov	r0, r3
 8004934:	301c      	adds	r0, #28
 8004936:	e77d      	b.n	8004834 <_dtoa_r+0x81c>
 8004938:	40240000 	.word	0x40240000
 800493c:	9b01      	ldr	r3, [sp, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	dc38      	bgt.n	80049b4 <_dtoa_r+0x99c>
 8004942:	9b05      	ldr	r3, [sp, #20]
 8004944:	2b02      	cmp	r3, #2
 8004946:	dd35      	ble.n	80049b4 <_dtoa_r+0x99c>
 8004948:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800494c:	f1b9 0f00 	cmp.w	r9, #0
 8004950:	d10d      	bne.n	800496e <_dtoa_r+0x956>
 8004952:	4631      	mov	r1, r6
 8004954:	464b      	mov	r3, r9
 8004956:	2205      	movs	r2, #5
 8004958:	4620      	mov	r0, r4
 800495a:	f7fe fbdf 	bl	800311c <__multadd>
 800495e:	4601      	mov	r1, r0
 8004960:	4606      	mov	r6, r0
 8004962:	4658      	mov	r0, fp
 8004964:	f7fe fdf6 	bl	8003554 <__mcmp>
 8004968:	2800      	cmp	r0, #0
 800496a:	f73f adbd 	bgt.w	80044e8 <_dtoa_r+0x4d0>
 800496e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004970:	9d00      	ldr	r5, [sp, #0]
 8004972:	ea6f 0a03 	mvn.w	sl, r3
 8004976:	f04f 0800 	mov.w	r8, #0
 800497a:	4631      	mov	r1, r6
 800497c:	4620      	mov	r0, r4
 800497e:	f7fe fbab 	bl	80030d8 <_Bfree>
 8004982:	2f00      	cmp	r7, #0
 8004984:	f43f aeb4 	beq.w	80046f0 <_dtoa_r+0x6d8>
 8004988:	f1b8 0f00 	cmp.w	r8, #0
 800498c:	d005      	beq.n	800499a <_dtoa_r+0x982>
 800498e:	45b8      	cmp	r8, r7
 8004990:	d003      	beq.n	800499a <_dtoa_r+0x982>
 8004992:	4641      	mov	r1, r8
 8004994:	4620      	mov	r0, r4
 8004996:	f7fe fb9f 	bl	80030d8 <_Bfree>
 800499a:	4639      	mov	r1, r7
 800499c:	4620      	mov	r0, r4
 800499e:	f7fe fb9b 	bl	80030d8 <_Bfree>
 80049a2:	e6a5      	b.n	80046f0 <_dtoa_r+0x6d8>
 80049a4:	2600      	movs	r6, #0
 80049a6:	4637      	mov	r7, r6
 80049a8:	e7e1      	b.n	800496e <_dtoa_r+0x956>
 80049aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80049ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80049b0:	4637      	mov	r7, r6
 80049b2:	e599      	b.n	80044e8 <_dtoa_r+0x4d0>
 80049b4:	9b08      	ldr	r3, [sp, #32]
 80049b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 80fd 	beq.w	8004bba <_dtoa_r+0xba2>
 80049c0:	2d00      	cmp	r5, #0
 80049c2:	dd05      	ble.n	80049d0 <_dtoa_r+0x9b8>
 80049c4:	4639      	mov	r1, r7
 80049c6:	462a      	mov	r2, r5
 80049c8:	4620      	mov	r0, r4
 80049ca:	f7fe fd57 	bl	800347c <__lshift>
 80049ce:	4607      	mov	r7, r0
 80049d0:	9b06      	ldr	r3, [sp, #24]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d05c      	beq.n	8004a90 <_dtoa_r+0xa78>
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	4620      	mov	r0, r4
 80049da:	f7fe fb3d 	bl	8003058 <_Balloc>
 80049de:	4605      	mov	r5, r0
 80049e0:	b928      	cbnz	r0, 80049ee <_dtoa_r+0x9d6>
 80049e2:	4b80      	ldr	r3, [pc, #512]	; (8004be4 <_dtoa_r+0xbcc>)
 80049e4:	4602      	mov	r2, r0
 80049e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80049ea:	f7ff bb2e 	b.w	800404a <_dtoa_r+0x32>
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	3202      	adds	r2, #2
 80049f2:	0092      	lsls	r2, r2, #2
 80049f4:	f107 010c 	add.w	r1, r7, #12
 80049f8:	300c      	adds	r0, #12
 80049fa:	f000 f913 	bl	8004c24 <memcpy>
 80049fe:	2201      	movs	r2, #1
 8004a00:	4629      	mov	r1, r5
 8004a02:	4620      	mov	r0, r4
 8004a04:	f7fe fd3a 	bl	800347c <__lshift>
 8004a08:	9b00      	ldr	r3, [sp, #0]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	9301      	str	r3, [sp, #4]
 8004a0e:	9b00      	ldr	r3, [sp, #0]
 8004a10:	444b      	add	r3, r9
 8004a12:	9307      	str	r3, [sp, #28]
 8004a14:	9b02      	ldr	r3, [sp, #8]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	46b8      	mov	r8, r7
 8004a1c:	9306      	str	r3, [sp, #24]
 8004a1e:	4607      	mov	r7, r0
 8004a20:	9b01      	ldr	r3, [sp, #4]
 8004a22:	4631      	mov	r1, r6
 8004a24:	3b01      	subs	r3, #1
 8004a26:	4658      	mov	r0, fp
 8004a28:	9302      	str	r3, [sp, #8]
 8004a2a:	f7ff fa67 	bl	8003efc <quorem>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	3330      	adds	r3, #48	; 0x30
 8004a32:	9004      	str	r0, [sp, #16]
 8004a34:	4641      	mov	r1, r8
 8004a36:	4658      	mov	r0, fp
 8004a38:	9308      	str	r3, [sp, #32]
 8004a3a:	f7fe fd8b 	bl	8003554 <__mcmp>
 8004a3e:	463a      	mov	r2, r7
 8004a40:	4681      	mov	r9, r0
 8004a42:	4631      	mov	r1, r6
 8004a44:	4620      	mov	r0, r4
 8004a46:	f7fe fda1 	bl	800358c <__mdiff>
 8004a4a:	68c2      	ldr	r2, [r0, #12]
 8004a4c:	9b08      	ldr	r3, [sp, #32]
 8004a4e:	4605      	mov	r5, r0
 8004a50:	bb02      	cbnz	r2, 8004a94 <_dtoa_r+0xa7c>
 8004a52:	4601      	mov	r1, r0
 8004a54:	4658      	mov	r0, fp
 8004a56:	f7fe fd7d 	bl	8003554 <__mcmp>
 8004a5a:	9b08      	ldr	r3, [sp, #32]
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	4629      	mov	r1, r5
 8004a60:	4620      	mov	r0, r4
 8004a62:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004a66:	f7fe fb37 	bl	80030d8 <_Bfree>
 8004a6a:	9b05      	ldr	r3, [sp, #20]
 8004a6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a6e:	9d01      	ldr	r5, [sp, #4]
 8004a70:	ea43 0102 	orr.w	r1, r3, r2
 8004a74:	9b06      	ldr	r3, [sp, #24]
 8004a76:	430b      	orrs	r3, r1
 8004a78:	9b08      	ldr	r3, [sp, #32]
 8004a7a:	d10d      	bne.n	8004a98 <_dtoa_r+0xa80>
 8004a7c:	2b39      	cmp	r3, #57	; 0x39
 8004a7e:	d029      	beq.n	8004ad4 <_dtoa_r+0xabc>
 8004a80:	f1b9 0f00 	cmp.w	r9, #0
 8004a84:	dd01      	ble.n	8004a8a <_dtoa_r+0xa72>
 8004a86:	9b04      	ldr	r3, [sp, #16]
 8004a88:	3331      	adds	r3, #49	; 0x31
 8004a8a:	9a02      	ldr	r2, [sp, #8]
 8004a8c:	7013      	strb	r3, [r2, #0]
 8004a8e:	e774      	b.n	800497a <_dtoa_r+0x962>
 8004a90:	4638      	mov	r0, r7
 8004a92:	e7b9      	b.n	8004a08 <_dtoa_r+0x9f0>
 8004a94:	2201      	movs	r2, #1
 8004a96:	e7e2      	b.n	8004a5e <_dtoa_r+0xa46>
 8004a98:	f1b9 0f00 	cmp.w	r9, #0
 8004a9c:	db06      	blt.n	8004aac <_dtoa_r+0xa94>
 8004a9e:	9905      	ldr	r1, [sp, #20]
 8004aa0:	ea41 0909 	orr.w	r9, r1, r9
 8004aa4:	9906      	ldr	r1, [sp, #24]
 8004aa6:	ea59 0101 	orrs.w	r1, r9, r1
 8004aaa:	d120      	bne.n	8004aee <_dtoa_r+0xad6>
 8004aac:	2a00      	cmp	r2, #0
 8004aae:	ddec      	ble.n	8004a8a <_dtoa_r+0xa72>
 8004ab0:	4659      	mov	r1, fp
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	9301      	str	r3, [sp, #4]
 8004ab8:	f7fe fce0 	bl	800347c <__lshift>
 8004abc:	4631      	mov	r1, r6
 8004abe:	4683      	mov	fp, r0
 8004ac0:	f7fe fd48 	bl	8003554 <__mcmp>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	9b01      	ldr	r3, [sp, #4]
 8004ac8:	dc02      	bgt.n	8004ad0 <_dtoa_r+0xab8>
 8004aca:	d1de      	bne.n	8004a8a <_dtoa_r+0xa72>
 8004acc:	07da      	lsls	r2, r3, #31
 8004ace:	d5dc      	bpl.n	8004a8a <_dtoa_r+0xa72>
 8004ad0:	2b39      	cmp	r3, #57	; 0x39
 8004ad2:	d1d8      	bne.n	8004a86 <_dtoa_r+0xa6e>
 8004ad4:	9a02      	ldr	r2, [sp, #8]
 8004ad6:	2339      	movs	r3, #57	; 0x39
 8004ad8:	7013      	strb	r3, [r2, #0]
 8004ada:	462b      	mov	r3, r5
 8004adc:	461d      	mov	r5, r3
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004ae4:	2a39      	cmp	r2, #57	; 0x39
 8004ae6:	d050      	beq.n	8004b8a <_dtoa_r+0xb72>
 8004ae8:	3201      	adds	r2, #1
 8004aea:	701a      	strb	r2, [r3, #0]
 8004aec:	e745      	b.n	800497a <_dtoa_r+0x962>
 8004aee:	2a00      	cmp	r2, #0
 8004af0:	dd03      	ble.n	8004afa <_dtoa_r+0xae2>
 8004af2:	2b39      	cmp	r3, #57	; 0x39
 8004af4:	d0ee      	beq.n	8004ad4 <_dtoa_r+0xabc>
 8004af6:	3301      	adds	r3, #1
 8004af8:	e7c7      	b.n	8004a8a <_dtoa_r+0xa72>
 8004afa:	9a01      	ldr	r2, [sp, #4]
 8004afc:	9907      	ldr	r1, [sp, #28]
 8004afe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004b02:	428a      	cmp	r2, r1
 8004b04:	d02a      	beq.n	8004b5c <_dtoa_r+0xb44>
 8004b06:	4659      	mov	r1, fp
 8004b08:	2300      	movs	r3, #0
 8004b0a:	220a      	movs	r2, #10
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f7fe fb05 	bl	800311c <__multadd>
 8004b12:	45b8      	cmp	r8, r7
 8004b14:	4683      	mov	fp, r0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	f04f 020a 	mov.w	r2, #10
 8004b1e:	4641      	mov	r1, r8
 8004b20:	4620      	mov	r0, r4
 8004b22:	d107      	bne.n	8004b34 <_dtoa_r+0xb1c>
 8004b24:	f7fe fafa 	bl	800311c <__multadd>
 8004b28:	4680      	mov	r8, r0
 8004b2a:	4607      	mov	r7, r0
 8004b2c:	9b01      	ldr	r3, [sp, #4]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	9301      	str	r3, [sp, #4]
 8004b32:	e775      	b.n	8004a20 <_dtoa_r+0xa08>
 8004b34:	f7fe faf2 	bl	800311c <__multadd>
 8004b38:	4639      	mov	r1, r7
 8004b3a:	4680      	mov	r8, r0
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	220a      	movs	r2, #10
 8004b40:	4620      	mov	r0, r4
 8004b42:	f7fe faeb 	bl	800311c <__multadd>
 8004b46:	4607      	mov	r7, r0
 8004b48:	e7f0      	b.n	8004b2c <_dtoa_r+0xb14>
 8004b4a:	f1b9 0f00 	cmp.w	r9, #0
 8004b4e:	9a00      	ldr	r2, [sp, #0]
 8004b50:	bfcc      	ite	gt
 8004b52:	464d      	movgt	r5, r9
 8004b54:	2501      	movle	r5, #1
 8004b56:	4415      	add	r5, r2
 8004b58:	f04f 0800 	mov.w	r8, #0
 8004b5c:	4659      	mov	r1, fp
 8004b5e:	2201      	movs	r2, #1
 8004b60:	4620      	mov	r0, r4
 8004b62:	9301      	str	r3, [sp, #4]
 8004b64:	f7fe fc8a 	bl	800347c <__lshift>
 8004b68:	4631      	mov	r1, r6
 8004b6a:	4683      	mov	fp, r0
 8004b6c:	f7fe fcf2 	bl	8003554 <__mcmp>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	dcb2      	bgt.n	8004ada <_dtoa_r+0xac2>
 8004b74:	d102      	bne.n	8004b7c <_dtoa_r+0xb64>
 8004b76:	9b01      	ldr	r3, [sp, #4]
 8004b78:	07db      	lsls	r3, r3, #31
 8004b7a:	d4ae      	bmi.n	8004ada <_dtoa_r+0xac2>
 8004b7c:	462b      	mov	r3, r5
 8004b7e:	461d      	mov	r5, r3
 8004b80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b84:	2a30      	cmp	r2, #48	; 0x30
 8004b86:	d0fa      	beq.n	8004b7e <_dtoa_r+0xb66>
 8004b88:	e6f7      	b.n	800497a <_dtoa_r+0x962>
 8004b8a:	9a00      	ldr	r2, [sp, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d1a5      	bne.n	8004adc <_dtoa_r+0xac4>
 8004b90:	f10a 0a01 	add.w	sl, sl, #1
 8004b94:	2331      	movs	r3, #49	; 0x31
 8004b96:	e779      	b.n	8004a8c <_dtoa_r+0xa74>
 8004b98:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <_dtoa_r+0xbd0>)
 8004b9a:	f7ff baaf 	b.w	80040fc <_dtoa_r+0xe4>
 8004b9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f47f aa86 	bne.w	80040b2 <_dtoa_r+0x9a>
 8004ba6:	4b11      	ldr	r3, [pc, #68]	; (8004bec <_dtoa_r+0xbd4>)
 8004ba8:	f7ff baa8 	b.w	80040fc <_dtoa_r+0xe4>
 8004bac:	f1b9 0f00 	cmp.w	r9, #0
 8004bb0:	dc03      	bgt.n	8004bba <_dtoa_r+0xba2>
 8004bb2:	9b05      	ldr	r3, [sp, #20]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	f73f aec9 	bgt.w	800494c <_dtoa_r+0x934>
 8004bba:	9d00      	ldr	r5, [sp, #0]
 8004bbc:	4631      	mov	r1, r6
 8004bbe:	4658      	mov	r0, fp
 8004bc0:	f7ff f99c 	bl	8003efc <quorem>
 8004bc4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004bc8:	f805 3b01 	strb.w	r3, [r5], #1
 8004bcc:	9a00      	ldr	r2, [sp, #0]
 8004bce:	1aaa      	subs	r2, r5, r2
 8004bd0:	4591      	cmp	r9, r2
 8004bd2:	ddba      	ble.n	8004b4a <_dtoa_r+0xb32>
 8004bd4:	4659      	mov	r1, fp
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	220a      	movs	r2, #10
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f7fe fa9e 	bl	800311c <__multadd>
 8004be0:	4683      	mov	fp, r0
 8004be2:	e7eb      	b.n	8004bbc <_dtoa_r+0xba4>
 8004be4:	080058db 	.word	0x080058db
 8004be8:	08005a68 	.word	0x08005a68
 8004bec:	08005a5b 	.word	0x08005a5b

08004bf0 <fiprintf>:
 8004bf0:	b40e      	push	{r1, r2, r3}
 8004bf2:	b503      	push	{r0, r1, lr}
 8004bf4:	4601      	mov	r1, r0
 8004bf6:	ab03      	add	r3, sp, #12
 8004bf8:	4805      	ldr	r0, [pc, #20]	; (8004c10 <fiprintf+0x20>)
 8004bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bfe:	6800      	ldr	r0, [r0, #0]
 8004c00:	9301      	str	r3, [sp, #4]
 8004c02:	f000 f8c5 	bl	8004d90 <_vfiprintf_r>
 8004c06:	b002      	add	sp, #8
 8004c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c0c:	b003      	add	sp, #12
 8004c0e:	4770      	bx	lr
 8004c10:	20000010 	.word	0x20000010

08004c14 <malloc>:
 8004c14:	4b02      	ldr	r3, [pc, #8]	; (8004c20 <malloc+0xc>)
 8004c16:	4601      	mov	r1, r0
 8004c18:	6818      	ldr	r0, [r3, #0]
 8004c1a:	f7fe bdc9 	b.w	80037b0 <_malloc_r>
 8004c1e:	bf00      	nop
 8004c20:	20000010 	.word	0x20000010

08004c24 <memcpy>:
 8004c24:	440a      	add	r2, r1
 8004c26:	4291      	cmp	r1, r2
 8004c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c2c:	d100      	bne.n	8004c30 <memcpy+0xc>
 8004c2e:	4770      	bx	lr
 8004c30:	b510      	push	{r4, lr}
 8004c32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c3a:	4291      	cmp	r1, r2
 8004c3c:	d1f9      	bne.n	8004c32 <memcpy+0xe>
 8004c3e:	bd10      	pop	{r4, pc}

08004c40 <memmove>:
 8004c40:	4288      	cmp	r0, r1
 8004c42:	b510      	push	{r4, lr}
 8004c44:	eb01 0402 	add.w	r4, r1, r2
 8004c48:	d902      	bls.n	8004c50 <memmove+0x10>
 8004c4a:	4284      	cmp	r4, r0
 8004c4c:	4623      	mov	r3, r4
 8004c4e:	d807      	bhi.n	8004c60 <memmove+0x20>
 8004c50:	1e43      	subs	r3, r0, #1
 8004c52:	42a1      	cmp	r1, r4
 8004c54:	d008      	beq.n	8004c68 <memmove+0x28>
 8004c56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c5e:	e7f8      	b.n	8004c52 <memmove+0x12>
 8004c60:	4402      	add	r2, r0
 8004c62:	4601      	mov	r1, r0
 8004c64:	428a      	cmp	r2, r1
 8004c66:	d100      	bne.n	8004c6a <memmove+0x2a>
 8004c68:	bd10      	pop	{r4, pc}
 8004c6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c72:	e7f7      	b.n	8004c64 <memmove+0x24>

08004c74 <__malloc_lock>:
 8004c74:	4801      	ldr	r0, [pc, #4]	; (8004c7c <__malloc_lock+0x8>)
 8004c76:	f000 bc3b 	b.w	80054f0 <__retarget_lock_acquire_recursive>
 8004c7a:	bf00      	nop
 8004c7c:	200001f4 	.word	0x200001f4

08004c80 <__malloc_unlock>:
 8004c80:	4801      	ldr	r0, [pc, #4]	; (8004c88 <__malloc_unlock+0x8>)
 8004c82:	f000 bc36 	b.w	80054f2 <__retarget_lock_release_recursive>
 8004c86:	bf00      	nop
 8004c88:	200001f4 	.word	0x200001f4

08004c8c <_free_r>:
 8004c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c8e:	2900      	cmp	r1, #0
 8004c90:	d048      	beq.n	8004d24 <_free_r+0x98>
 8004c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c96:	9001      	str	r0, [sp, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f1a1 0404 	sub.w	r4, r1, #4
 8004c9e:	bfb8      	it	lt
 8004ca0:	18e4      	addlt	r4, r4, r3
 8004ca2:	f7ff ffe7 	bl	8004c74 <__malloc_lock>
 8004ca6:	4a20      	ldr	r2, [pc, #128]	; (8004d28 <_free_r+0x9c>)
 8004ca8:	9801      	ldr	r0, [sp, #4]
 8004caa:	6813      	ldr	r3, [r2, #0]
 8004cac:	4615      	mov	r5, r2
 8004cae:	b933      	cbnz	r3, 8004cbe <_free_r+0x32>
 8004cb0:	6063      	str	r3, [r4, #4]
 8004cb2:	6014      	str	r4, [r2, #0]
 8004cb4:	b003      	add	sp, #12
 8004cb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cba:	f7ff bfe1 	b.w	8004c80 <__malloc_unlock>
 8004cbe:	42a3      	cmp	r3, r4
 8004cc0:	d90b      	bls.n	8004cda <_free_r+0x4e>
 8004cc2:	6821      	ldr	r1, [r4, #0]
 8004cc4:	1862      	adds	r2, r4, r1
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	bf04      	itt	eq
 8004cca:	681a      	ldreq	r2, [r3, #0]
 8004ccc:	685b      	ldreq	r3, [r3, #4]
 8004cce:	6063      	str	r3, [r4, #4]
 8004cd0:	bf04      	itt	eq
 8004cd2:	1852      	addeq	r2, r2, r1
 8004cd4:	6022      	streq	r2, [r4, #0]
 8004cd6:	602c      	str	r4, [r5, #0]
 8004cd8:	e7ec      	b.n	8004cb4 <_free_r+0x28>
 8004cda:	461a      	mov	r2, r3
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	b10b      	cbz	r3, 8004ce4 <_free_r+0x58>
 8004ce0:	42a3      	cmp	r3, r4
 8004ce2:	d9fa      	bls.n	8004cda <_free_r+0x4e>
 8004ce4:	6811      	ldr	r1, [r2, #0]
 8004ce6:	1855      	adds	r5, r2, r1
 8004ce8:	42a5      	cmp	r5, r4
 8004cea:	d10b      	bne.n	8004d04 <_free_r+0x78>
 8004cec:	6824      	ldr	r4, [r4, #0]
 8004cee:	4421      	add	r1, r4
 8004cf0:	1854      	adds	r4, r2, r1
 8004cf2:	42a3      	cmp	r3, r4
 8004cf4:	6011      	str	r1, [r2, #0]
 8004cf6:	d1dd      	bne.n	8004cb4 <_free_r+0x28>
 8004cf8:	681c      	ldr	r4, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	6053      	str	r3, [r2, #4]
 8004cfe:	4421      	add	r1, r4
 8004d00:	6011      	str	r1, [r2, #0]
 8004d02:	e7d7      	b.n	8004cb4 <_free_r+0x28>
 8004d04:	d902      	bls.n	8004d0c <_free_r+0x80>
 8004d06:	230c      	movs	r3, #12
 8004d08:	6003      	str	r3, [r0, #0]
 8004d0a:	e7d3      	b.n	8004cb4 <_free_r+0x28>
 8004d0c:	6825      	ldr	r5, [r4, #0]
 8004d0e:	1961      	adds	r1, r4, r5
 8004d10:	428b      	cmp	r3, r1
 8004d12:	bf04      	itt	eq
 8004d14:	6819      	ldreq	r1, [r3, #0]
 8004d16:	685b      	ldreq	r3, [r3, #4]
 8004d18:	6063      	str	r3, [r4, #4]
 8004d1a:	bf04      	itt	eq
 8004d1c:	1949      	addeq	r1, r1, r5
 8004d1e:	6021      	streq	r1, [r4, #0]
 8004d20:	6054      	str	r4, [r2, #4]
 8004d22:	e7c7      	b.n	8004cb4 <_free_r+0x28>
 8004d24:	b003      	add	sp, #12
 8004d26:	bd30      	pop	{r4, r5, pc}
 8004d28:	200000ac 	.word	0x200000ac

08004d2c <_malloc_usable_size_r>:
 8004d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d30:	1f18      	subs	r0, r3, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bfbc      	itt	lt
 8004d36:	580b      	ldrlt	r3, [r1, r0]
 8004d38:	18c0      	addlt	r0, r0, r3
 8004d3a:	4770      	bx	lr

08004d3c <__sfputc_r>:
 8004d3c:	6893      	ldr	r3, [r2, #8]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	b410      	push	{r4}
 8004d44:	6093      	str	r3, [r2, #8]
 8004d46:	da08      	bge.n	8004d5a <__sfputc_r+0x1e>
 8004d48:	6994      	ldr	r4, [r2, #24]
 8004d4a:	42a3      	cmp	r3, r4
 8004d4c:	db01      	blt.n	8004d52 <__sfputc_r+0x16>
 8004d4e:	290a      	cmp	r1, #10
 8004d50:	d103      	bne.n	8004d5a <__sfputc_r+0x1e>
 8004d52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d56:	f000 b94b 	b.w	8004ff0 <__swbuf_r>
 8004d5a:	6813      	ldr	r3, [r2, #0]
 8004d5c:	1c58      	adds	r0, r3, #1
 8004d5e:	6010      	str	r0, [r2, #0]
 8004d60:	7019      	strb	r1, [r3, #0]
 8004d62:	4608      	mov	r0, r1
 8004d64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <__sfputs_r>:
 8004d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6c:	4606      	mov	r6, r0
 8004d6e:	460f      	mov	r7, r1
 8004d70:	4614      	mov	r4, r2
 8004d72:	18d5      	adds	r5, r2, r3
 8004d74:	42ac      	cmp	r4, r5
 8004d76:	d101      	bne.n	8004d7c <__sfputs_r+0x12>
 8004d78:	2000      	movs	r0, #0
 8004d7a:	e007      	b.n	8004d8c <__sfputs_r+0x22>
 8004d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d80:	463a      	mov	r2, r7
 8004d82:	4630      	mov	r0, r6
 8004d84:	f7ff ffda 	bl	8004d3c <__sfputc_r>
 8004d88:	1c43      	adds	r3, r0, #1
 8004d8a:	d1f3      	bne.n	8004d74 <__sfputs_r+0xa>
 8004d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d90 <_vfiprintf_r>:
 8004d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d94:	460d      	mov	r5, r1
 8004d96:	b09d      	sub	sp, #116	; 0x74
 8004d98:	4614      	mov	r4, r2
 8004d9a:	4698      	mov	r8, r3
 8004d9c:	4606      	mov	r6, r0
 8004d9e:	b118      	cbz	r0, 8004da8 <_vfiprintf_r+0x18>
 8004da0:	6983      	ldr	r3, [r0, #24]
 8004da2:	b90b      	cbnz	r3, 8004da8 <_vfiprintf_r+0x18>
 8004da4:	f000 fb06 	bl	80053b4 <__sinit>
 8004da8:	4b89      	ldr	r3, [pc, #548]	; (8004fd0 <_vfiprintf_r+0x240>)
 8004daa:	429d      	cmp	r5, r3
 8004dac:	d11b      	bne.n	8004de6 <_vfiprintf_r+0x56>
 8004dae:	6875      	ldr	r5, [r6, #4]
 8004db0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004db2:	07d9      	lsls	r1, r3, #31
 8004db4:	d405      	bmi.n	8004dc2 <_vfiprintf_r+0x32>
 8004db6:	89ab      	ldrh	r3, [r5, #12]
 8004db8:	059a      	lsls	r2, r3, #22
 8004dba:	d402      	bmi.n	8004dc2 <_vfiprintf_r+0x32>
 8004dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dbe:	f000 fb97 	bl	80054f0 <__retarget_lock_acquire_recursive>
 8004dc2:	89ab      	ldrh	r3, [r5, #12]
 8004dc4:	071b      	lsls	r3, r3, #28
 8004dc6:	d501      	bpl.n	8004dcc <_vfiprintf_r+0x3c>
 8004dc8:	692b      	ldr	r3, [r5, #16]
 8004dca:	b9eb      	cbnz	r3, 8004e08 <_vfiprintf_r+0x78>
 8004dcc:	4629      	mov	r1, r5
 8004dce:	4630      	mov	r0, r6
 8004dd0:	f000 f960 	bl	8005094 <__swsetup_r>
 8004dd4:	b1c0      	cbz	r0, 8004e08 <_vfiprintf_r+0x78>
 8004dd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dd8:	07dc      	lsls	r4, r3, #31
 8004dda:	d50e      	bpl.n	8004dfa <_vfiprintf_r+0x6a>
 8004ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8004de0:	b01d      	add	sp, #116	; 0x74
 8004de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de6:	4b7b      	ldr	r3, [pc, #492]	; (8004fd4 <_vfiprintf_r+0x244>)
 8004de8:	429d      	cmp	r5, r3
 8004dea:	d101      	bne.n	8004df0 <_vfiprintf_r+0x60>
 8004dec:	68b5      	ldr	r5, [r6, #8]
 8004dee:	e7df      	b.n	8004db0 <_vfiprintf_r+0x20>
 8004df0:	4b79      	ldr	r3, [pc, #484]	; (8004fd8 <_vfiprintf_r+0x248>)
 8004df2:	429d      	cmp	r5, r3
 8004df4:	bf08      	it	eq
 8004df6:	68f5      	ldreq	r5, [r6, #12]
 8004df8:	e7da      	b.n	8004db0 <_vfiprintf_r+0x20>
 8004dfa:	89ab      	ldrh	r3, [r5, #12]
 8004dfc:	0598      	lsls	r0, r3, #22
 8004dfe:	d4ed      	bmi.n	8004ddc <_vfiprintf_r+0x4c>
 8004e00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e02:	f000 fb76 	bl	80054f2 <__retarget_lock_release_recursive>
 8004e06:	e7e9      	b.n	8004ddc <_vfiprintf_r+0x4c>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e0c:	2320      	movs	r3, #32
 8004e0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e12:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e16:	2330      	movs	r3, #48	; 0x30
 8004e18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004fdc <_vfiprintf_r+0x24c>
 8004e1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e20:	f04f 0901 	mov.w	r9, #1
 8004e24:	4623      	mov	r3, r4
 8004e26:	469a      	mov	sl, r3
 8004e28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e2c:	b10a      	cbz	r2, 8004e32 <_vfiprintf_r+0xa2>
 8004e2e:	2a25      	cmp	r2, #37	; 0x25
 8004e30:	d1f9      	bne.n	8004e26 <_vfiprintf_r+0x96>
 8004e32:	ebba 0b04 	subs.w	fp, sl, r4
 8004e36:	d00b      	beq.n	8004e50 <_vfiprintf_r+0xc0>
 8004e38:	465b      	mov	r3, fp
 8004e3a:	4622      	mov	r2, r4
 8004e3c:	4629      	mov	r1, r5
 8004e3e:	4630      	mov	r0, r6
 8004e40:	f7ff ff93 	bl	8004d6a <__sfputs_r>
 8004e44:	3001      	adds	r0, #1
 8004e46:	f000 80aa 	beq.w	8004f9e <_vfiprintf_r+0x20e>
 8004e4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e4c:	445a      	add	r2, fp
 8004e4e:	9209      	str	r2, [sp, #36]	; 0x24
 8004e50:	f89a 3000 	ldrb.w	r3, [sl]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 80a2 	beq.w	8004f9e <_vfiprintf_r+0x20e>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e64:	f10a 0a01 	add.w	sl, sl, #1
 8004e68:	9304      	str	r3, [sp, #16]
 8004e6a:	9307      	str	r3, [sp, #28]
 8004e6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e70:	931a      	str	r3, [sp, #104]	; 0x68
 8004e72:	4654      	mov	r4, sl
 8004e74:	2205      	movs	r2, #5
 8004e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e7a:	4858      	ldr	r0, [pc, #352]	; (8004fdc <_vfiprintf_r+0x24c>)
 8004e7c:	f7fb f9b0 	bl	80001e0 <memchr>
 8004e80:	9a04      	ldr	r2, [sp, #16]
 8004e82:	b9d8      	cbnz	r0, 8004ebc <_vfiprintf_r+0x12c>
 8004e84:	06d1      	lsls	r1, r2, #27
 8004e86:	bf44      	itt	mi
 8004e88:	2320      	movmi	r3, #32
 8004e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e8e:	0713      	lsls	r3, r2, #28
 8004e90:	bf44      	itt	mi
 8004e92:	232b      	movmi	r3, #43	; 0x2b
 8004e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e98:	f89a 3000 	ldrb.w	r3, [sl]
 8004e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e9e:	d015      	beq.n	8004ecc <_vfiprintf_r+0x13c>
 8004ea0:	9a07      	ldr	r2, [sp, #28]
 8004ea2:	4654      	mov	r4, sl
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	f04f 0c0a 	mov.w	ip, #10
 8004eaa:	4621      	mov	r1, r4
 8004eac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004eb0:	3b30      	subs	r3, #48	; 0x30
 8004eb2:	2b09      	cmp	r3, #9
 8004eb4:	d94e      	bls.n	8004f54 <_vfiprintf_r+0x1c4>
 8004eb6:	b1b0      	cbz	r0, 8004ee6 <_vfiprintf_r+0x156>
 8004eb8:	9207      	str	r2, [sp, #28]
 8004eba:	e014      	b.n	8004ee6 <_vfiprintf_r+0x156>
 8004ebc:	eba0 0308 	sub.w	r3, r0, r8
 8004ec0:	fa09 f303 	lsl.w	r3, r9, r3
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	9304      	str	r3, [sp, #16]
 8004ec8:	46a2      	mov	sl, r4
 8004eca:	e7d2      	b.n	8004e72 <_vfiprintf_r+0xe2>
 8004ecc:	9b03      	ldr	r3, [sp, #12]
 8004ece:	1d19      	adds	r1, r3, #4
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	9103      	str	r1, [sp, #12]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	bfbb      	ittet	lt
 8004ed8:	425b      	neglt	r3, r3
 8004eda:	f042 0202 	orrlt.w	r2, r2, #2
 8004ede:	9307      	strge	r3, [sp, #28]
 8004ee0:	9307      	strlt	r3, [sp, #28]
 8004ee2:	bfb8      	it	lt
 8004ee4:	9204      	strlt	r2, [sp, #16]
 8004ee6:	7823      	ldrb	r3, [r4, #0]
 8004ee8:	2b2e      	cmp	r3, #46	; 0x2e
 8004eea:	d10c      	bne.n	8004f06 <_vfiprintf_r+0x176>
 8004eec:	7863      	ldrb	r3, [r4, #1]
 8004eee:	2b2a      	cmp	r3, #42	; 0x2a
 8004ef0:	d135      	bne.n	8004f5e <_vfiprintf_r+0x1ce>
 8004ef2:	9b03      	ldr	r3, [sp, #12]
 8004ef4:	1d1a      	adds	r2, r3, #4
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	9203      	str	r2, [sp, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	bfb8      	it	lt
 8004efe:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f02:	3402      	adds	r4, #2
 8004f04:	9305      	str	r3, [sp, #20]
 8004f06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004fec <_vfiprintf_r+0x25c>
 8004f0a:	7821      	ldrb	r1, [r4, #0]
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	4650      	mov	r0, sl
 8004f10:	f7fb f966 	bl	80001e0 <memchr>
 8004f14:	b140      	cbz	r0, 8004f28 <_vfiprintf_r+0x198>
 8004f16:	2340      	movs	r3, #64	; 0x40
 8004f18:	eba0 000a 	sub.w	r0, r0, sl
 8004f1c:	fa03 f000 	lsl.w	r0, r3, r0
 8004f20:	9b04      	ldr	r3, [sp, #16]
 8004f22:	4303      	orrs	r3, r0
 8004f24:	3401      	adds	r4, #1
 8004f26:	9304      	str	r3, [sp, #16]
 8004f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f2c:	482c      	ldr	r0, [pc, #176]	; (8004fe0 <_vfiprintf_r+0x250>)
 8004f2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f32:	2206      	movs	r2, #6
 8004f34:	f7fb f954 	bl	80001e0 <memchr>
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	d03f      	beq.n	8004fbc <_vfiprintf_r+0x22c>
 8004f3c:	4b29      	ldr	r3, [pc, #164]	; (8004fe4 <_vfiprintf_r+0x254>)
 8004f3e:	bb1b      	cbnz	r3, 8004f88 <_vfiprintf_r+0x1f8>
 8004f40:	9b03      	ldr	r3, [sp, #12]
 8004f42:	3307      	adds	r3, #7
 8004f44:	f023 0307 	bic.w	r3, r3, #7
 8004f48:	3308      	adds	r3, #8
 8004f4a:	9303      	str	r3, [sp, #12]
 8004f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f4e:	443b      	add	r3, r7
 8004f50:	9309      	str	r3, [sp, #36]	; 0x24
 8004f52:	e767      	b.n	8004e24 <_vfiprintf_r+0x94>
 8004f54:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f58:	460c      	mov	r4, r1
 8004f5a:	2001      	movs	r0, #1
 8004f5c:	e7a5      	b.n	8004eaa <_vfiprintf_r+0x11a>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	3401      	adds	r4, #1
 8004f62:	9305      	str	r3, [sp, #20]
 8004f64:	4619      	mov	r1, r3
 8004f66:	f04f 0c0a 	mov.w	ip, #10
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f70:	3a30      	subs	r2, #48	; 0x30
 8004f72:	2a09      	cmp	r2, #9
 8004f74:	d903      	bls.n	8004f7e <_vfiprintf_r+0x1ee>
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0c5      	beq.n	8004f06 <_vfiprintf_r+0x176>
 8004f7a:	9105      	str	r1, [sp, #20]
 8004f7c:	e7c3      	b.n	8004f06 <_vfiprintf_r+0x176>
 8004f7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f82:	4604      	mov	r4, r0
 8004f84:	2301      	movs	r3, #1
 8004f86:	e7f0      	b.n	8004f6a <_vfiprintf_r+0x1da>
 8004f88:	ab03      	add	r3, sp, #12
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	462a      	mov	r2, r5
 8004f8e:	4b16      	ldr	r3, [pc, #88]	; (8004fe8 <_vfiprintf_r+0x258>)
 8004f90:	a904      	add	r1, sp, #16
 8004f92:	4630      	mov	r0, r6
 8004f94:	f3af 8000 	nop.w
 8004f98:	4607      	mov	r7, r0
 8004f9a:	1c78      	adds	r0, r7, #1
 8004f9c:	d1d6      	bne.n	8004f4c <_vfiprintf_r+0x1bc>
 8004f9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fa0:	07d9      	lsls	r1, r3, #31
 8004fa2:	d405      	bmi.n	8004fb0 <_vfiprintf_r+0x220>
 8004fa4:	89ab      	ldrh	r3, [r5, #12]
 8004fa6:	059a      	lsls	r2, r3, #22
 8004fa8:	d402      	bmi.n	8004fb0 <_vfiprintf_r+0x220>
 8004faa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fac:	f000 faa1 	bl	80054f2 <__retarget_lock_release_recursive>
 8004fb0:	89ab      	ldrh	r3, [r5, #12]
 8004fb2:	065b      	lsls	r3, r3, #25
 8004fb4:	f53f af12 	bmi.w	8004ddc <_vfiprintf_r+0x4c>
 8004fb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fba:	e711      	b.n	8004de0 <_vfiprintf_r+0x50>
 8004fbc:	ab03      	add	r3, sp, #12
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	462a      	mov	r2, r5
 8004fc2:	4b09      	ldr	r3, [pc, #36]	; (8004fe8 <_vfiprintf_r+0x258>)
 8004fc4:	a904      	add	r1, sp, #16
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f7fe fe3c 	bl	8003c44 <_printf_i>
 8004fcc:	e7e4      	b.n	8004f98 <_vfiprintf_r+0x208>
 8004fce:	bf00      	nop
 8004fd0:	08005aec 	.word	0x08005aec
 8004fd4:	08005b0c 	.word	0x08005b0c
 8004fd8:	08005acc 	.word	0x08005acc
 8004fdc:	080059ec 	.word	0x080059ec
 8004fe0:	080059f6 	.word	0x080059f6
 8004fe4:	00000000 	.word	0x00000000
 8004fe8:	08004d6b 	.word	0x08004d6b
 8004fec:	080059f2 	.word	0x080059f2

08004ff0 <__swbuf_r>:
 8004ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff2:	460e      	mov	r6, r1
 8004ff4:	4614      	mov	r4, r2
 8004ff6:	4605      	mov	r5, r0
 8004ff8:	b118      	cbz	r0, 8005002 <__swbuf_r+0x12>
 8004ffa:	6983      	ldr	r3, [r0, #24]
 8004ffc:	b90b      	cbnz	r3, 8005002 <__swbuf_r+0x12>
 8004ffe:	f000 f9d9 	bl	80053b4 <__sinit>
 8005002:	4b21      	ldr	r3, [pc, #132]	; (8005088 <__swbuf_r+0x98>)
 8005004:	429c      	cmp	r4, r3
 8005006:	d12b      	bne.n	8005060 <__swbuf_r+0x70>
 8005008:	686c      	ldr	r4, [r5, #4]
 800500a:	69a3      	ldr	r3, [r4, #24]
 800500c:	60a3      	str	r3, [r4, #8]
 800500e:	89a3      	ldrh	r3, [r4, #12]
 8005010:	071a      	lsls	r2, r3, #28
 8005012:	d52f      	bpl.n	8005074 <__swbuf_r+0x84>
 8005014:	6923      	ldr	r3, [r4, #16]
 8005016:	b36b      	cbz	r3, 8005074 <__swbuf_r+0x84>
 8005018:	6923      	ldr	r3, [r4, #16]
 800501a:	6820      	ldr	r0, [r4, #0]
 800501c:	1ac0      	subs	r0, r0, r3
 800501e:	6963      	ldr	r3, [r4, #20]
 8005020:	b2f6      	uxtb	r6, r6
 8005022:	4283      	cmp	r3, r0
 8005024:	4637      	mov	r7, r6
 8005026:	dc04      	bgt.n	8005032 <__swbuf_r+0x42>
 8005028:	4621      	mov	r1, r4
 800502a:	4628      	mov	r0, r5
 800502c:	f000 f92e 	bl	800528c <_fflush_r>
 8005030:	bb30      	cbnz	r0, 8005080 <__swbuf_r+0x90>
 8005032:	68a3      	ldr	r3, [r4, #8]
 8005034:	3b01      	subs	r3, #1
 8005036:	60a3      	str	r3, [r4, #8]
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	6022      	str	r2, [r4, #0]
 800503e:	701e      	strb	r6, [r3, #0]
 8005040:	6963      	ldr	r3, [r4, #20]
 8005042:	3001      	adds	r0, #1
 8005044:	4283      	cmp	r3, r0
 8005046:	d004      	beq.n	8005052 <__swbuf_r+0x62>
 8005048:	89a3      	ldrh	r3, [r4, #12]
 800504a:	07db      	lsls	r3, r3, #31
 800504c:	d506      	bpl.n	800505c <__swbuf_r+0x6c>
 800504e:	2e0a      	cmp	r6, #10
 8005050:	d104      	bne.n	800505c <__swbuf_r+0x6c>
 8005052:	4621      	mov	r1, r4
 8005054:	4628      	mov	r0, r5
 8005056:	f000 f919 	bl	800528c <_fflush_r>
 800505a:	b988      	cbnz	r0, 8005080 <__swbuf_r+0x90>
 800505c:	4638      	mov	r0, r7
 800505e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005060:	4b0a      	ldr	r3, [pc, #40]	; (800508c <__swbuf_r+0x9c>)
 8005062:	429c      	cmp	r4, r3
 8005064:	d101      	bne.n	800506a <__swbuf_r+0x7a>
 8005066:	68ac      	ldr	r4, [r5, #8]
 8005068:	e7cf      	b.n	800500a <__swbuf_r+0x1a>
 800506a:	4b09      	ldr	r3, [pc, #36]	; (8005090 <__swbuf_r+0xa0>)
 800506c:	429c      	cmp	r4, r3
 800506e:	bf08      	it	eq
 8005070:	68ec      	ldreq	r4, [r5, #12]
 8005072:	e7ca      	b.n	800500a <__swbuf_r+0x1a>
 8005074:	4621      	mov	r1, r4
 8005076:	4628      	mov	r0, r5
 8005078:	f000 f80c 	bl	8005094 <__swsetup_r>
 800507c:	2800      	cmp	r0, #0
 800507e:	d0cb      	beq.n	8005018 <__swbuf_r+0x28>
 8005080:	f04f 37ff 	mov.w	r7, #4294967295
 8005084:	e7ea      	b.n	800505c <__swbuf_r+0x6c>
 8005086:	bf00      	nop
 8005088:	08005aec 	.word	0x08005aec
 800508c:	08005b0c 	.word	0x08005b0c
 8005090:	08005acc 	.word	0x08005acc

08005094 <__swsetup_r>:
 8005094:	4b32      	ldr	r3, [pc, #200]	; (8005160 <__swsetup_r+0xcc>)
 8005096:	b570      	push	{r4, r5, r6, lr}
 8005098:	681d      	ldr	r5, [r3, #0]
 800509a:	4606      	mov	r6, r0
 800509c:	460c      	mov	r4, r1
 800509e:	b125      	cbz	r5, 80050aa <__swsetup_r+0x16>
 80050a0:	69ab      	ldr	r3, [r5, #24]
 80050a2:	b913      	cbnz	r3, 80050aa <__swsetup_r+0x16>
 80050a4:	4628      	mov	r0, r5
 80050a6:	f000 f985 	bl	80053b4 <__sinit>
 80050aa:	4b2e      	ldr	r3, [pc, #184]	; (8005164 <__swsetup_r+0xd0>)
 80050ac:	429c      	cmp	r4, r3
 80050ae:	d10f      	bne.n	80050d0 <__swsetup_r+0x3c>
 80050b0:	686c      	ldr	r4, [r5, #4]
 80050b2:	89a3      	ldrh	r3, [r4, #12]
 80050b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050b8:	0719      	lsls	r1, r3, #28
 80050ba:	d42c      	bmi.n	8005116 <__swsetup_r+0x82>
 80050bc:	06dd      	lsls	r5, r3, #27
 80050be:	d411      	bmi.n	80050e4 <__swsetup_r+0x50>
 80050c0:	2309      	movs	r3, #9
 80050c2:	6033      	str	r3, [r6, #0]
 80050c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80050c8:	81a3      	strh	r3, [r4, #12]
 80050ca:	f04f 30ff 	mov.w	r0, #4294967295
 80050ce:	e03e      	b.n	800514e <__swsetup_r+0xba>
 80050d0:	4b25      	ldr	r3, [pc, #148]	; (8005168 <__swsetup_r+0xd4>)
 80050d2:	429c      	cmp	r4, r3
 80050d4:	d101      	bne.n	80050da <__swsetup_r+0x46>
 80050d6:	68ac      	ldr	r4, [r5, #8]
 80050d8:	e7eb      	b.n	80050b2 <__swsetup_r+0x1e>
 80050da:	4b24      	ldr	r3, [pc, #144]	; (800516c <__swsetup_r+0xd8>)
 80050dc:	429c      	cmp	r4, r3
 80050de:	bf08      	it	eq
 80050e0:	68ec      	ldreq	r4, [r5, #12]
 80050e2:	e7e6      	b.n	80050b2 <__swsetup_r+0x1e>
 80050e4:	0758      	lsls	r0, r3, #29
 80050e6:	d512      	bpl.n	800510e <__swsetup_r+0x7a>
 80050e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050ea:	b141      	cbz	r1, 80050fe <__swsetup_r+0x6a>
 80050ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050f0:	4299      	cmp	r1, r3
 80050f2:	d002      	beq.n	80050fa <__swsetup_r+0x66>
 80050f4:	4630      	mov	r0, r6
 80050f6:	f7ff fdc9 	bl	8004c8c <_free_r>
 80050fa:	2300      	movs	r3, #0
 80050fc:	6363      	str	r3, [r4, #52]	; 0x34
 80050fe:	89a3      	ldrh	r3, [r4, #12]
 8005100:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005104:	81a3      	strh	r3, [r4, #12]
 8005106:	2300      	movs	r3, #0
 8005108:	6063      	str	r3, [r4, #4]
 800510a:	6923      	ldr	r3, [r4, #16]
 800510c:	6023      	str	r3, [r4, #0]
 800510e:	89a3      	ldrh	r3, [r4, #12]
 8005110:	f043 0308 	orr.w	r3, r3, #8
 8005114:	81a3      	strh	r3, [r4, #12]
 8005116:	6923      	ldr	r3, [r4, #16]
 8005118:	b94b      	cbnz	r3, 800512e <__swsetup_r+0x9a>
 800511a:	89a3      	ldrh	r3, [r4, #12]
 800511c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005124:	d003      	beq.n	800512e <__swsetup_r+0x9a>
 8005126:	4621      	mov	r1, r4
 8005128:	4630      	mov	r0, r6
 800512a:	f000 fa07 	bl	800553c <__smakebuf_r>
 800512e:	89a0      	ldrh	r0, [r4, #12]
 8005130:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005134:	f010 0301 	ands.w	r3, r0, #1
 8005138:	d00a      	beq.n	8005150 <__swsetup_r+0xbc>
 800513a:	2300      	movs	r3, #0
 800513c:	60a3      	str	r3, [r4, #8]
 800513e:	6963      	ldr	r3, [r4, #20]
 8005140:	425b      	negs	r3, r3
 8005142:	61a3      	str	r3, [r4, #24]
 8005144:	6923      	ldr	r3, [r4, #16]
 8005146:	b943      	cbnz	r3, 800515a <__swsetup_r+0xc6>
 8005148:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800514c:	d1ba      	bne.n	80050c4 <__swsetup_r+0x30>
 800514e:	bd70      	pop	{r4, r5, r6, pc}
 8005150:	0781      	lsls	r1, r0, #30
 8005152:	bf58      	it	pl
 8005154:	6963      	ldrpl	r3, [r4, #20]
 8005156:	60a3      	str	r3, [r4, #8]
 8005158:	e7f4      	b.n	8005144 <__swsetup_r+0xb0>
 800515a:	2000      	movs	r0, #0
 800515c:	e7f7      	b.n	800514e <__swsetup_r+0xba>
 800515e:	bf00      	nop
 8005160:	20000010 	.word	0x20000010
 8005164:	08005aec 	.word	0x08005aec
 8005168:	08005b0c 	.word	0x08005b0c
 800516c:	08005acc 	.word	0x08005acc

08005170 <abort>:
 8005170:	b508      	push	{r3, lr}
 8005172:	2006      	movs	r0, #6
 8005174:	f000 fa4a 	bl	800560c <raise>
 8005178:	2001      	movs	r0, #1
 800517a:	f7fc fb45 	bl	8001808 <_exit>
	...

08005180 <__sflush_r>:
 8005180:	898a      	ldrh	r2, [r1, #12]
 8005182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005186:	4605      	mov	r5, r0
 8005188:	0710      	lsls	r0, r2, #28
 800518a:	460c      	mov	r4, r1
 800518c:	d458      	bmi.n	8005240 <__sflush_r+0xc0>
 800518e:	684b      	ldr	r3, [r1, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	dc05      	bgt.n	80051a0 <__sflush_r+0x20>
 8005194:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	dc02      	bgt.n	80051a0 <__sflush_r+0x20>
 800519a:	2000      	movs	r0, #0
 800519c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051a2:	2e00      	cmp	r6, #0
 80051a4:	d0f9      	beq.n	800519a <__sflush_r+0x1a>
 80051a6:	2300      	movs	r3, #0
 80051a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80051ac:	682f      	ldr	r7, [r5, #0]
 80051ae:	602b      	str	r3, [r5, #0]
 80051b0:	d032      	beq.n	8005218 <__sflush_r+0x98>
 80051b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80051b4:	89a3      	ldrh	r3, [r4, #12]
 80051b6:	075a      	lsls	r2, r3, #29
 80051b8:	d505      	bpl.n	80051c6 <__sflush_r+0x46>
 80051ba:	6863      	ldr	r3, [r4, #4]
 80051bc:	1ac0      	subs	r0, r0, r3
 80051be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051c0:	b10b      	cbz	r3, 80051c6 <__sflush_r+0x46>
 80051c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051c4:	1ac0      	subs	r0, r0, r3
 80051c6:	2300      	movs	r3, #0
 80051c8:	4602      	mov	r2, r0
 80051ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051cc:	6a21      	ldr	r1, [r4, #32]
 80051ce:	4628      	mov	r0, r5
 80051d0:	47b0      	blx	r6
 80051d2:	1c43      	adds	r3, r0, #1
 80051d4:	89a3      	ldrh	r3, [r4, #12]
 80051d6:	d106      	bne.n	80051e6 <__sflush_r+0x66>
 80051d8:	6829      	ldr	r1, [r5, #0]
 80051da:	291d      	cmp	r1, #29
 80051dc:	d82c      	bhi.n	8005238 <__sflush_r+0xb8>
 80051de:	4a2a      	ldr	r2, [pc, #168]	; (8005288 <__sflush_r+0x108>)
 80051e0:	40ca      	lsrs	r2, r1
 80051e2:	07d6      	lsls	r6, r2, #31
 80051e4:	d528      	bpl.n	8005238 <__sflush_r+0xb8>
 80051e6:	2200      	movs	r2, #0
 80051e8:	6062      	str	r2, [r4, #4]
 80051ea:	04d9      	lsls	r1, r3, #19
 80051ec:	6922      	ldr	r2, [r4, #16]
 80051ee:	6022      	str	r2, [r4, #0]
 80051f0:	d504      	bpl.n	80051fc <__sflush_r+0x7c>
 80051f2:	1c42      	adds	r2, r0, #1
 80051f4:	d101      	bne.n	80051fa <__sflush_r+0x7a>
 80051f6:	682b      	ldr	r3, [r5, #0]
 80051f8:	b903      	cbnz	r3, 80051fc <__sflush_r+0x7c>
 80051fa:	6560      	str	r0, [r4, #84]	; 0x54
 80051fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051fe:	602f      	str	r7, [r5, #0]
 8005200:	2900      	cmp	r1, #0
 8005202:	d0ca      	beq.n	800519a <__sflush_r+0x1a>
 8005204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005208:	4299      	cmp	r1, r3
 800520a:	d002      	beq.n	8005212 <__sflush_r+0x92>
 800520c:	4628      	mov	r0, r5
 800520e:	f7ff fd3d 	bl	8004c8c <_free_r>
 8005212:	2000      	movs	r0, #0
 8005214:	6360      	str	r0, [r4, #52]	; 0x34
 8005216:	e7c1      	b.n	800519c <__sflush_r+0x1c>
 8005218:	6a21      	ldr	r1, [r4, #32]
 800521a:	2301      	movs	r3, #1
 800521c:	4628      	mov	r0, r5
 800521e:	47b0      	blx	r6
 8005220:	1c41      	adds	r1, r0, #1
 8005222:	d1c7      	bne.n	80051b4 <__sflush_r+0x34>
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0c4      	beq.n	80051b4 <__sflush_r+0x34>
 800522a:	2b1d      	cmp	r3, #29
 800522c:	d001      	beq.n	8005232 <__sflush_r+0xb2>
 800522e:	2b16      	cmp	r3, #22
 8005230:	d101      	bne.n	8005236 <__sflush_r+0xb6>
 8005232:	602f      	str	r7, [r5, #0]
 8005234:	e7b1      	b.n	800519a <__sflush_r+0x1a>
 8005236:	89a3      	ldrh	r3, [r4, #12]
 8005238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800523c:	81a3      	strh	r3, [r4, #12]
 800523e:	e7ad      	b.n	800519c <__sflush_r+0x1c>
 8005240:	690f      	ldr	r7, [r1, #16]
 8005242:	2f00      	cmp	r7, #0
 8005244:	d0a9      	beq.n	800519a <__sflush_r+0x1a>
 8005246:	0793      	lsls	r3, r2, #30
 8005248:	680e      	ldr	r6, [r1, #0]
 800524a:	bf08      	it	eq
 800524c:	694b      	ldreq	r3, [r1, #20]
 800524e:	600f      	str	r7, [r1, #0]
 8005250:	bf18      	it	ne
 8005252:	2300      	movne	r3, #0
 8005254:	eba6 0807 	sub.w	r8, r6, r7
 8005258:	608b      	str	r3, [r1, #8]
 800525a:	f1b8 0f00 	cmp.w	r8, #0
 800525e:	dd9c      	ble.n	800519a <__sflush_r+0x1a>
 8005260:	6a21      	ldr	r1, [r4, #32]
 8005262:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005264:	4643      	mov	r3, r8
 8005266:	463a      	mov	r2, r7
 8005268:	4628      	mov	r0, r5
 800526a:	47b0      	blx	r6
 800526c:	2800      	cmp	r0, #0
 800526e:	dc06      	bgt.n	800527e <__sflush_r+0xfe>
 8005270:	89a3      	ldrh	r3, [r4, #12]
 8005272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005276:	81a3      	strh	r3, [r4, #12]
 8005278:	f04f 30ff 	mov.w	r0, #4294967295
 800527c:	e78e      	b.n	800519c <__sflush_r+0x1c>
 800527e:	4407      	add	r7, r0
 8005280:	eba8 0800 	sub.w	r8, r8, r0
 8005284:	e7e9      	b.n	800525a <__sflush_r+0xda>
 8005286:	bf00      	nop
 8005288:	20400001 	.word	0x20400001

0800528c <_fflush_r>:
 800528c:	b538      	push	{r3, r4, r5, lr}
 800528e:	690b      	ldr	r3, [r1, #16]
 8005290:	4605      	mov	r5, r0
 8005292:	460c      	mov	r4, r1
 8005294:	b913      	cbnz	r3, 800529c <_fflush_r+0x10>
 8005296:	2500      	movs	r5, #0
 8005298:	4628      	mov	r0, r5
 800529a:	bd38      	pop	{r3, r4, r5, pc}
 800529c:	b118      	cbz	r0, 80052a6 <_fflush_r+0x1a>
 800529e:	6983      	ldr	r3, [r0, #24]
 80052a0:	b90b      	cbnz	r3, 80052a6 <_fflush_r+0x1a>
 80052a2:	f000 f887 	bl	80053b4 <__sinit>
 80052a6:	4b14      	ldr	r3, [pc, #80]	; (80052f8 <_fflush_r+0x6c>)
 80052a8:	429c      	cmp	r4, r3
 80052aa:	d11b      	bne.n	80052e4 <_fflush_r+0x58>
 80052ac:	686c      	ldr	r4, [r5, #4]
 80052ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0ef      	beq.n	8005296 <_fflush_r+0xa>
 80052b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80052b8:	07d0      	lsls	r0, r2, #31
 80052ba:	d404      	bmi.n	80052c6 <_fflush_r+0x3a>
 80052bc:	0599      	lsls	r1, r3, #22
 80052be:	d402      	bmi.n	80052c6 <_fflush_r+0x3a>
 80052c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052c2:	f000 f915 	bl	80054f0 <__retarget_lock_acquire_recursive>
 80052c6:	4628      	mov	r0, r5
 80052c8:	4621      	mov	r1, r4
 80052ca:	f7ff ff59 	bl	8005180 <__sflush_r>
 80052ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052d0:	07da      	lsls	r2, r3, #31
 80052d2:	4605      	mov	r5, r0
 80052d4:	d4e0      	bmi.n	8005298 <_fflush_r+0xc>
 80052d6:	89a3      	ldrh	r3, [r4, #12]
 80052d8:	059b      	lsls	r3, r3, #22
 80052da:	d4dd      	bmi.n	8005298 <_fflush_r+0xc>
 80052dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052de:	f000 f908 	bl	80054f2 <__retarget_lock_release_recursive>
 80052e2:	e7d9      	b.n	8005298 <_fflush_r+0xc>
 80052e4:	4b05      	ldr	r3, [pc, #20]	; (80052fc <_fflush_r+0x70>)
 80052e6:	429c      	cmp	r4, r3
 80052e8:	d101      	bne.n	80052ee <_fflush_r+0x62>
 80052ea:	68ac      	ldr	r4, [r5, #8]
 80052ec:	e7df      	b.n	80052ae <_fflush_r+0x22>
 80052ee:	4b04      	ldr	r3, [pc, #16]	; (8005300 <_fflush_r+0x74>)
 80052f0:	429c      	cmp	r4, r3
 80052f2:	bf08      	it	eq
 80052f4:	68ec      	ldreq	r4, [r5, #12]
 80052f6:	e7da      	b.n	80052ae <_fflush_r+0x22>
 80052f8:	08005aec 	.word	0x08005aec
 80052fc:	08005b0c 	.word	0x08005b0c
 8005300:	08005acc 	.word	0x08005acc

08005304 <std>:
 8005304:	2300      	movs	r3, #0
 8005306:	b510      	push	{r4, lr}
 8005308:	4604      	mov	r4, r0
 800530a:	e9c0 3300 	strd	r3, r3, [r0]
 800530e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005312:	6083      	str	r3, [r0, #8]
 8005314:	8181      	strh	r1, [r0, #12]
 8005316:	6643      	str	r3, [r0, #100]	; 0x64
 8005318:	81c2      	strh	r2, [r0, #14]
 800531a:	6183      	str	r3, [r0, #24]
 800531c:	4619      	mov	r1, r3
 800531e:	2208      	movs	r2, #8
 8005320:	305c      	adds	r0, #92	; 0x5c
 8005322:	f7fd fd2b 	bl	8002d7c <memset>
 8005326:	4b05      	ldr	r3, [pc, #20]	; (800533c <std+0x38>)
 8005328:	6263      	str	r3, [r4, #36]	; 0x24
 800532a:	4b05      	ldr	r3, [pc, #20]	; (8005340 <std+0x3c>)
 800532c:	62a3      	str	r3, [r4, #40]	; 0x28
 800532e:	4b05      	ldr	r3, [pc, #20]	; (8005344 <std+0x40>)
 8005330:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005332:	4b05      	ldr	r3, [pc, #20]	; (8005348 <std+0x44>)
 8005334:	6224      	str	r4, [r4, #32]
 8005336:	6323      	str	r3, [r4, #48]	; 0x30
 8005338:	bd10      	pop	{r4, pc}
 800533a:	bf00      	nop
 800533c:	08005645 	.word	0x08005645
 8005340:	08005667 	.word	0x08005667
 8005344:	0800569f 	.word	0x0800569f
 8005348:	080056c3 	.word	0x080056c3

0800534c <_cleanup_r>:
 800534c:	4901      	ldr	r1, [pc, #4]	; (8005354 <_cleanup_r+0x8>)
 800534e:	f000 b8af 	b.w	80054b0 <_fwalk_reent>
 8005352:	bf00      	nop
 8005354:	0800528d 	.word	0x0800528d

08005358 <__sfmoreglue>:
 8005358:	b570      	push	{r4, r5, r6, lr}
 800535a:	1e4a      	subs	r2, r1, #1
 800535c:	2568      	movs	r5, #104	; 0x68
 800535e:	4355      	muls	r5, r2
 8005360:	460e      	mov	r6, r1
 8005362:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005366:	f7fe fa23 	bl	80037b0 <_malloc_r>
 800536a:	4604      	mov	r4, r0
 800536c:	b140      	cbz	r0, 8005380 <__sfmoreglue+0x28>
 800536e:	2100      	movs	r1, #0
 8005370:	e9c0 1600 	strd	r1, r6, [r0]
 8005374:	300c      	adds	r0, #12
 8005376:	60a0      	str	r0, [r4, #8]
 8005378:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800537c:	f7fd fcfe 	bl	8002d7c <memset>
 8005380:	4620      	mov	r0, r4
 8005382:	bd70      	pop	{r4, r5, r6, pc}

08005384 <__sfp_lock_acquire>:
 8005384:	4801      	ldr	r0, [pc, #4]	; (800538c <__sfp_lock_acquire+0x8>)
 8005386:	f000 b8b3 	b.w	80054f0 <__retarget_lock_acquire_recursive>
 800538a:	bf00      	nop
 800538c:	200001f8 	.word	0x200001f8

08005390 <__sfp_lock_release>:
 8005390:	4801      	ldr	r0, [pc, #4]	; (8005398 <__sfp_lock_release+0x8>)
 8005392:	f000 b8ae 	b.w	80054f2 <__retarget_lock_release_recursive>
 8005396:	bf00      	nop
 8005398:	200001f8 	.word	0x200001f8

0800539c <__sinit_lock_acquire>:
 800539c:	4801      	ldr	r0, [pc, #4]	; (80053a4 <__sinit_lock_acquire+0x8>)
 800539e:	f000 b8a7 	b.w	80054f0 <__retarget_lock_acquire_recursive>
 80053a2:	bf00      	nop
 80053a4:	200001f3 	.word	0x200001f3

080053a8 <__sinit_lock_release>:
 80053a8:	4801      	ldr	r0, [pc, #4]	; (80053b0 <__sinit_lock_release+0x8>)
 80053aa:	f000 b8a2 	b.w	80054f2 <__retarget_lock_release_recursive>
 80053ae:	bf00      	nop
 80053b0:	200001f3 	.word	0x200001f3

080053b4 <__sinit>:
 80053b4:	b510      	push	{r4, lr}
 80053b6:	4604      	mov	r4, r0
 80053b8:	f7ff fff0 	bl	800539c <__sinit_lock_acquire>
 80053bc:	69a3      	ldr	r3, [r4, #24]
 80053be:	b11b      	cbz	r3, 80053c8 <__sinit+0x14>
 80053c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053c4:	f7ff bff0 	b.w	80053a8 <__sinit_lock_release>
 80053c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80053cc:	6523      	str	r3, [r4, #80]	; 0x50
 80053ce:	4b13      	ldr	r3, [pc, #76]	; (800541c <__sinit+0x68>)
 80053d0:	4a13      	ldr	r2, [pc, #76]	; (8005420 <__sinit+0x6c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80053d6:	42a3      	cmp	r3, r4
 80053d8:	bf04      	itt	eq
 80053da:	2301      	moveq	r3, #1
 80053dc:	61a3      	streq	r3, [r4, #24]
 80053de:	4620      	mov	r0, r4
 80053e0:	f000 f820 	bl	8005424 <__sfp>
 80053e4:	6060      	str	r0, [r4, #4]
 80053e6:	4620      	mov	r0, r4
 80053e8:	f000 f81c 	bl	8005424 <__sfp>
 80053ec:	60a0      	str	r0, [r4, #8]
 80053ee:	4620      	mov	r0, r4
 80053f0:	f000 f818 	bl	8005424 <__sfp>
 80053f4:	2200      	movs	r2, #0
 80053f6:	60e0      	str	r0, [r4, #12]
 80053f8:	2104      	movs	r1, #4
 80053fa:	6860      	ldr	r0, [r4, #4]
 80053fc:	f7ff ff82 	bl	8005304 <std>
 8005400:	68a0      	ldr	r0, [r4, #8]
 8005402:	2201      	movs	r2, #1
 8005404:	2109      	movs	r1, #9
 8005406:	f7ff ff7d 	bl	8005304 <std>
 800540a:	68e0      	ldr	r0, [r4, #12]
 800540c:	2202      	movs	r2, #2
 800540e:	2112      	movs	r1, #18
 8005410:	f7ff ff78 	bl	8005304 <std>
 8005414:	2301      	movs	r3, #1
 8005416:	61a3      	str	r3, [r4, #24]
 8005418:	e7d2      	b.n	80053c0 <__sinit+0xc>
 800541a:	bf00      	nop
 800541c:	08005860 	.word	0x08005860
 8005420:	0800534d 	.word	0x0800534d

08005424 <__sfp>:
 8005424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005426:	4607      	mov	r7, r0
 8005428:	f7ff ffac 	bl	8005384 <__sfp_lock_acquire>
 800542c:	4b1e      	ldr	r3, [pc, #120]	; (80054a8 <__sfp+0x84>)
 800542e:	681e      	ldr	r6, [r3, #0]
 8005430:	69b3      	ldr	r3, [r6, #24]
 8005432:	b913      	cbnz	r3, 800543a <__sfp+0x16>
 8005434:	4630      	mov	r0, r6
 8005436:	f7ff ffbd 	bl	80053b4 <__sinit>
 800543a:	3648      	adds	r6, #72	; 0x48
 800543c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005440:	3b01      	subs	r3, #1
 8005442:	d503      	bpl.n	800544c <__sfp+0x28>
 8005444:	6833      	ldr	r3, [r6, #0]
 8005446:	b30b      	cbz	r3, 800548c <__sfp+0x68>
 8005448:	6836      	ldr	r6, [r6, #0]
 800544a:	e7f7      	b.n	800543c <__sfp+0x18>
 800544c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005450:	b9d5      	cbnz	r5, 8005488 <__sfp+0x64>
 8005452:	4b16      	ldr	r3, [pc, #88]	; (80054ac <__sfp+0x88>)
 8005454:	60e3      	str	r3, [r4, #12]
 8005456:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800545a:	6665      	str	r5, [r4, #100]	; 0x64
 800545c:	f000 f847 	bl	80054ee <__retarget_lock_init_recursive>
 8005460:	f7ff ff96 	bl	8005390 <__sfp_lock_release>
 8005464:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005468:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800546c:	6025      	str	r5, [r4, #0]
 800546e:	61a5      	str	r5, [r4, #24]
 8005470:	2208      	movs	r2, #8
 8005472:	4629      	mov	r1, r5
 8005474:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005478:	f7fd fc80 	bl	8002d7c <memset>
 800547c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005480:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005484:	4620      	mov	r0, r4
 8005486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005488:	3468      	adds	r4, #104	; 0x68
 800548a:	e7d9      	b.n	8005440 <__sfp+0x1c>
 800548c:	2104      	movs	r1, #4
 800548e:	4638      	mov	r0, r7
 8005490:	f7ff ff62 	bl	8005358 <__sfmoreglue>
 8005494:	4604      	mov	r4, r0
 8005496:	6030      	str	r0, [r6, #0]
 8005498:	2800      	cmp	r0, #0
 800549a:	d1d5      	bne.n	8005448 <__sfp+0x24>
 800549c:	f7ff ff78 	bl	8005390 <__sfp_lock_release>
 80054a0:	230c      	movs	r3, #12
 80054a2:	603b      	str	r3, [r7, #0]
 80054a4:	e7ee      	b.n	8005484 <__sfp+0x60>
 80054a6:	bf00      	nop
 80054a8:	08005860 	.word	0x08005860
 80054ac:	ffff0001 	.word	0xffff0001

080054b0 <_fwalk_reent>:
 80054b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054b4:	4606      	mov	r6, r0
 80054b6:	4688      	mov	r8, r1
 80054b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80054bc:	2700      	movs	r7, #0
 80054be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054c2:	f1b9 0901 	subs.w	r9, r9, #1
 80054c6:	d505      	bpl.n	80054d4 <_fwalk_reent+0x24>
 80054c8:	6824      	ldr	r4, [r4, #0]
 80054ca:	2c00      	cmp	r4, #0
 80054cc:	d1f7      	bne.n	80054be <_fwalk_reent+0xe>
 80054ce:	4638      	mov	r0, r7
 80054d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054d4:	89ab      	ldrh	r3, [r5, #12]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d907      	bls.n	80054ea <_fwalk_reent+0x3a>
 80054da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054de:	3301      	adds	r3, #1
 80054e0:	d003      	beq.n	80054ea <_fwalk_reent+0x3a>
 80054e2:	4629      	mov	r1, r5
 80054e4:	4630      	mov	r0, r6
 80054e6:	47c0      	blx	r8
 80054e8:	4307      	orrs	r7, r0
 80054ea:	3568      	adds	r5, #104	; 0x68
 80054ec:	e7e9      	b.n	80054c2 <_fwalk_reent+0x12>

080054ee <__retarget_lock_init_recursive>:
 80054ee:	4770      	bx	lr

080054f0 <__retarget_lock_acquire_recursive>:
 80054f0:	4770      	bx	lr

080054f2 <__retarget_lock_release_recursive>:
 80054f2:	4770      	bx	lr

080054f4 <__swhatbuf_r>:
 80054f4:	b570      	push	{r4, r5, r6, lr}
 80054f6:	460e      	mov	r6, r1
 80054f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054fc:	2900      	cmp	r1, #0
 80054fe:	b096      	sub	sp, #88	; 0x58
 8005500:	4614      	mov	r4, r2
 8005502:	461d      	mov	r5, r3
 8005504:	da07      	bge.n	8005516 <__swhatbuf_r+0x22>
 8005506:	2300      	movs	r3, #0
 8005508:	602b      	str	r3, [r5, #0]
 800550a:	89b3      	ldrh	r3, [r6, #12]
 800550c:	061a      	lsls	r2, r3, #24
 800550e:	d410      	bmi.n	8005532 <__swhatbuf_r+0x3e>
 8005510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005514:	e00e      	b.n	8005534 <__swhatbuf_r+0x40>
 8005516:	466a      	mov	r2, sp
 8005518:	f000 f8fa 	bl	8005710 <_fstat_r>
 800551c:	2800      	cmp	r0, #0
 800551e:	dbf2      	blt.n	8005506 <__swhatbuf_r+0x12>
 8005520:	9a01      	ldr	r2, [sp, #4]
 8005522:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005526:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800552a:	425a      	negs	r2, r3
 800552c:	415a      	adcs	r2, r3
 800552e:	602a      	str	r2, [r5, #0]
 8005530:	e7ee      	b.n	8005510 <__swhatbuf_r+0x1c>
 8005532:	2340      	movs	r3, #64	; 0x40
 8005534:	2000      	movs	r0, #0
 8005536:	6023      	str	r3, [r4, #0]
 8005538:	b016      	add	sp, #88	; 0x58
 800553a:	bd70      	pop	{r4, r5, r6, pc}

0800553c <__smakebuf_r>:
 800553c:	898b      	ldrh	r3, [r1, #12]
 800553e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005540:	079d      	lsls	r5, r3, #30
 8005542:	4606      	mov	r6, r0
 8005544:	460c      	mov	r4, r1
 8005546:	d507      	bpl.n	8005558 <__smakebuf_r+0x1c>
 8005548:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	6123      	str	r3, [r4, #16]
 8005550:	2301      	movs	r3, #1
 8005552:	6163      	str	r3, [r4, #20]
 8005554:	b002      	add	sp, #8
 8005556:	bd70      	pop	{r4, r5, r6, pc}
 8005558:	ab01      	add	r3, sp, #4
 800555a:	466a      	mov	r2, sp
 800555c:	f7ff ffca 	bl	80054f4 <__swhatbuf_r>
 8005560:	9900      	ldr	r1, [sp, #0]
 8005562:	4605      	mov	r5, r0
 8005564:	4630      	mov	r0, r6
 8005566:	f7fe f923 	bl	80037b0 <_malloc_r>
 800556a:	b948      	cbnz	r0, 8005580 <__smakebuf_r+0x44>
 800556c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005570:	059a      	lsls	r2, r3, #22
 8005572:	d4ef      	bmi.n	8005554 <__smakebuf_r+0x18>
 8005574:	f023 0303 	bic.w	r3, r3, #3
 8005578:	f043 0302 	orr.w	r3, r3, #2
 800557c:	81a3      	strh	r3, [r4, #12]
 800557e:	e7e3      	b.n	8005548 <__smakebuf_r+0xc>
 8005580:	4b0d      	ldr	r3, [pc, #52]	; (80055b8 <__smakebuf_r+0x7c>)
 8005582:	62b3      	str	r3, [r6, #40]	; 0x28
 8005584:	89a3      	ldrh	r3, [r4, #12]
 8005586:	6020      	str	r0, [r4, #0]
 8005588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800558c:	81a3      	strh	r3, [r4, #12]
 800558e:	9b00      	ldr	r3, [sp, #0]
 8005590:	6163      	str	r3, [r4, #20]
 8005592:	9b01      	ldr	r3, [sp, #4]
 8005594:	6120      	str	r0, [r4, #16]
 8005596:	b15b      	cbz	r3, 80055b0 <__smakebuf_r+0x74>
 8005598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800559c:	4630      	mov	r0, r6
 800559e:	f000 f8c9 	bl	8005734 <_isatty_r>
 80055a2:	b128      	cbz	r0, 80055b0 <__smakebuf_r+0x74>
 80055a4:	89a3      	ldrh	r3, [r4, #12]
 80055a6:	f023 0303 	bic.w	r3, r3, #3
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	81a3      	strh	r3, [r4, #12]
 80055b0:	89a0      	ldrh	r0, [r4, #12]
 80055b2:	4305      	orrs	r5, r0
 80055b4:	81a5      	strh	r5, [r4, #12]
 80055b6:	e7cd      	b.n	8005554 <__smakebuf_r+0x18>
 80055b8:	0800534d 	.word	0x0800534d

080055bc <_raise_r>:
 80055bc:	291f      	cmp	r1, #31
 80055be:	b538      	push	{r3, r4, r5, lr}
 80055c0:	4604      	mov	r4, r0
 80055c2:	460d      	mov	r5, r1
 80055c4:	d904      	bls.n	80055d0 <_raise_r+0x14>
 80055c6:	2316      	movs	r3, #22
 80055c8:	6003      	str	r3, [r0, #0]
 80055ca:	f04f 30ff 	mov.w	r0, #4294967295
 80055ce:	bd38      	pop	{r3, r4, r5, pc}
 80055d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80055d2:	b112      	cbz	r2, 80055da <_raise_r+0x1e>
 80055d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80055d8:	b94b      	cbnz	r3, 80055ee <_raise_r+0x32>
 80055da:	4620      	mov	r0, r4
 80055dc:	f000 f830 	bl	8005640 <_getpid_r>
 80055e0:	462a      	mov	r2, r5
 80055e2:	4601      	mov	r1, r0
 80055e4:	4620      	mov	r0, r4
 80055e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055ea:	f000 b817 	b.w	800561c <_kill_r>
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d00a      	beq.n	8005608 <_raise_r+0x4c>
 80055f2:	1c59      	adds	r1, r3, #1
 80055f4:	d103      	bne.n	80055fe <_raise_r+0x42>
 80055f6:	2316      	movs	r3, #22
 80055f8:	6003      	str	r3, [r0, #0]
 80055fa:	2001      	movs	r0, #1
 80055fc:	e7e7      	b.n	80055ce <_raise_r+0x12>
 80055fe:	2400      	movs	r4, #0
 8005600:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005604:	4628      	mov	r0, r5
 8005606:	4798      	blx	r3
 8005608:	2000      	movs	r0, #0
 800560a:	e7e0      	b.n	80055ce <_raise_r+0x12>

0800560c <raise>:
 800560c:	4b02      	ldr	r3, [pc, #8]	; (8005618 <raise+0xc>)
 800560e:	4601      	mov	r1, r0
 8005610:	6818      	ldr	r0, [r3, #0]
 8005612:	f7ff bfd3 	b.w	80055bc <_raise_r>
 8005616:	bf00      	nop
 8005618:	20000010 	.word	0x20000010

0800561c <_kill_r>:
 800561c:	b538      	push	{r3, r4, r5, lr}
 800561e:	4d07      	ldr	r5, [pc, #28]	; (800563c <_kill_r+0x20>)
 8005620:	2300      	movs	r3, #0
 8005622:	4604      	mov	r4, r0
 8005624:	4608      	mov	r0, r1
 8005626:	4611      	mov	r1, r2
 8005628:	602b      	str	r3, [r5, #0]
 800562a:	f7fc f8dd 	bl	80017e8 <_kill>
 800562e:	1c43      	adds	r3, r0, #1
 8005630:	d102      	bne.n	8005638 <_kill_r+0x1c>
 8005632:	682b      	ldr	r3, [r5, #0]
 8005634:	b103      	cbz	r3, 8005638 <_kill_r+0x1c>
 8005636:	6023      	str	r3, [r4, #0]
 8005638:	bd38      	pop	{r3, r4, r5, pc}
 800563a:	bf00      	nop
 800563c:	200001ec 	.word	0x200001ec

08005640 <_getpid_r>:
 8005640:	f7fc b8ca 	b.w	80017d8 <_getpid>

08005644 <__sread>:
 8005644:	b510      	push	{r4, lr}
 8005646:	460c      	mov	r4, r1
 8005648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800564c:	f000 f894 	bl	8005778 <_read_r>
 8005650:	2800      	cmp	r0, #0
 8005652:	bfab      	itete	ge
 8005654:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005656:	89a3      	ldrhlt	r3, [r4, #12]
 8005658:	181b      	addge	r3, r3, r0
 800565a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800565e:	bfac      	ite	ge
 8005660:	6563      	strge	r3, [r4, #84]	; 0x54
 8005662:	81a3      	strhlt	r3, [r4, #12]
 8005664:	bd10      	pop	{r4, pc}

08005666 <__swrite>:
 8005666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800566a:	461f      	mov	r7, r3
 800566c:	898b      	ldrh	r3, [r1, #12]
 800566e:	05db      	lsls	r3, r3, #23
 8005670:	4605      	mov	r5, r0
 8005672:	460c      	mov	r4, r1
 8005674:	4616      	mov	r6, r2
 8005676:	d505      	bpl.n	8005684 <__swrite+0x1e>
 8005678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800567c:	2302      	movs	r3, #2
 800567e:	2200      	movs	r2, #0
 8005680:	f000 f868 	bl	8005754 <_lseek_r>
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800568a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800568e:	81a3      	strh	r3, [r4, #12]
 8005690:	4632      	mov	r2, r6
 8005692:	463b      	mov	r3, r7
 8005694:	4628      	mov	r0, r5
 8005696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800569a:	f000 b817 	b.w	80056cc <_write_r>

0800569e <__sseek>:
 800569e:	b510      	push	{r4, lr}
 80056a0:	460c      	mov	r4, r1
 80056a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056a6:	f000 f855 	bl	8005754 <_lseek_r>
 80056aa:	1c43      	adds	r3, r0, #1
 80056ac:	89a3      	ldrh	r3, [r4, #12]
 80056ae:	bf15      	itete	ne
 80056b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80056b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056ba:	81a3      	strheq	r3, [r4, #12]
 80056bc:	bf18      	it	ne
 80056be:	81a3      	strhne	r3, [r4, #12]
 80056c0:	bd10      	pop	{r4, pc}

080056c2 <__sclose>:
 80056c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c6:	f000 b813 	b.w	80056f0 <_close_r>
	...

080056cc <_write_r>:
 80056cc:	b538      	push	{r3, r4, r5, lr}
 80056ce:	4d07      	ldr	r5, [pc, #28]	; (80056ec <_write_r+0x20>)
 80056d0:	4604      	mov	r4, r0
 80056d2:	4608      	mov	r0, r1
 80056d4:	4611      	mov	r1, r2
 80056d6:	2200      	movs	r2, #0
 80056d8:	602a      	str	r2, [r5, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	f7fc f8bb 	bl	8001856 <_write>
 80056e0:	1c43      	adds	r3, r0, #1
 80056e2:	d102      	bne.n	80056ea <_write_r+0x1e>
 80056e4:	682b      	ldr	r3, [r5, #0]
 80056e6:	b103      	cbz	r3, 80056ea <_write_r+0x1e>
 80056e8:	6023      	str	r3, [r4, #0]
 80056ea:	bd38      	pop	{r3, r4, r5, pc}
 80056ec:	200001ec 	.word	0x200001ec

080056f0 <_close_r>:
 80056f0:	b538      	push	{r3, r4, r5, lr}
 80056f2:	4d06      	ldr	r5, [pc, #24]	; (800570c <_close_r+0x1c>)
 80056f4:	2300      	movs	r3, #0
 80056f6:	4604      	mov	r4, r0
 80056f8:	4608      	mov	r0, r1
 80056fa:	602b      	str	r3, [r5, #0]
 80056fc:	f7fc f8c7 	bl	800188e <_close>
 8005700:	1c43      	adds	r3, r0, #1
 8005702:	d102      	bne.n	800570a <_close_r+0x1a>
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	b103      	cbz	r3, 800570a <_close_r+0x1a>
 8005708:	6023      	str	r3, [r4, #0]
 800570a:	bd38      	pop	{r3, r4, r5, pc}
 800570c:	200001ec 	.word	0x200001ec

08005710 <_fstat_r>:
 8005710:	b538      	push	{r3, r4, r5, lr}
 8005712:	4d07      	ldr	r5, [pc, #28]	; (8005730 <_fstat_r+0x20>)
 8005714:	2300      	movs	r3, #0
 8005716:	4604      	mov	r4, r0
 8005718:	4608      	mov	r0, r1
 800571a:	4611      	mov	r1, r2
 800571c:	602b      	str	r3, [r5, #0]
 800571e:	f7fc f8c2 	bl	80018a6 <_fstat>
 8005722:	1c43      	adds	r3, r0, #1
 8005724:	d102      	bne.n	800572c <_fstat_r+0x1c>
 8005726:	682b      	ldr	r3, [r5, #0]
 8005728:	b103      	cbz	r3, 800572c <_fstat_r+0x1c>
 800572a:	6023      	str	r3, [r4, #0]
 800572c:	bd38      	pop	{r3, r4, r5, pc}
 800572e:	bf00      	nop
 8005730:	200001ec 	.word	0x200001ec

08005734 <_isatty_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	4d06      	ldr	r5, [pc, #24]	; (8005750 <_isatty_r+0x1c>)
 8005738:	2300      	movs	r3, #0
 800573a:	4604      	mov	r4, r0
 800573c:	4608      	mov	r0, r1
 800573e:	602b      	str	r3, [r5, #0]
 8005740:	f7fc f8c1 	bl	80018c6 <_isatty>
 8005744:	1c43      	adds	r3, r0, #1
 8005746:	d102      	bne.n	800574e <_isatty_r+0x1a>
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	b103      	cbz	r3, 800574e <_isatty_r+0x1a>
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	bd38      	pop	{r3, r4, r5, pc}
 8005750:	200001ec 	.word	0x200001ec

08005754 <_lseek_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	4d07      	ldr	r5, [pc, #28]	; (8005774 <_lseek_r+0x20>)
 8005758:	4604      	mov	r4, r0
 800575a:	4608      	mov	r0, r1
 800575c:	4611      	mov	r1, r2
 800575e:	2200      	movs	r2, #0
 8005760:	602a      	str	r2, [r5, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	f7fc f8ba 	bl	80018dc <_lseek>
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	d102      	bne.n	8005772 <_lseek_r+0x1e>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	b103      	cbz	r3, 8005772 <_lseek_r+0x1e>
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	bd38      	pop	{r3, r4, r5, pc}
 8005774:	200001ec 	.word	0x200001ec

08005778 <_read_r>:
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	4d07      	ldr	r5, [pc, #28]	; (8005798 <_read_r+0x20>)
 800577c:	4604      	mov	r4, r0
 800577e:	4608      	mov	r0, r1
 8005780:	4611      	mov	r1, r2
 8005782:	2200      	movs	r2, #0
 8005784:	602a      	str	r2, [r5, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	f7fc f848 	bl	800181c <_read>
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	d102      	bne.n	8005796 <_read_r+0x1e>
 8005790:	682b      	ldr	r3, [r5, #0]
 8005792:	b103      	cbz	r3, 8005796 <_read_r+0x1e>
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	bd38      	pop	{r3, r4, r5, pc}
 8005798:	200001ec 	.word	0x200001ec

0800579c <_init>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	bf00      	nop
 80057a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a2:	bc08      	pop	{r3}
 80057a4:	469e      	mov	lr, r3
 80057a6:	4770      	bx	lr

080057a8 <_fini>:
 80057a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057aa:	bf00      	nop
 80057ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ae:	bc08      	pop	{r3}
 80057b0:	469e      	mov	lr, r3
 80057b2:	4770      	bx	lr
